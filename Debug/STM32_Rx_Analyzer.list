
STM32_Rx_Analyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000819c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800833c  0800833c  0001833c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084cc  080084cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080084cc  080084cc  000184cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084d4  080084d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084d4  080084d4  000184d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084d8  080084d8  000184d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080084dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005870  20000074  08008550  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200058e4  08008550  000258e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c056  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000351a  00000000  00000000  0003c0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0003f618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  00040ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f1c  00000000  00000000  00041e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163df  00000000  00000000  00045d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098f3a  00000000  00000000  0005c11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5055  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae0  00000000  00000000  000f50a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008324 	.word	0x08008324

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008324 	.word	0x08008324

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HAL_UARTEx_RxEventCallback>:
MsgBook_st MsgBook;
uint32_t millis = 0;
bool     uart2_tx_done;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	807b      	strh	r3, [r7, #2]

	osStatus_t osRes;
	if (huart->Instance == USART6)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a65      	ldr	r2, [pc, #404]	; (8000730 <HAL_UARTEx_RxEventCallback+0x1a8>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d15f      	bne.n	800065e <HAL_UARTEx_RxEventCallback+0xd6>
	{
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800059e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a2:	4864      	ldr	r0, [pc, #400]	; (8000734 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80005a4:	f001 fd87 	bl	80020b6 <HAL_GPIO_TogglePin>
		MsgBook.Row[MsgBook.head_indx].Source = 6;
 80005a8:	4b63      	ldr	r3, [pc, #396]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80005aa:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 80005ae:	4619      	mov	r1, r3
 80005b0:	4a61      	ldr	r2, [pc, #388]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80005b2:	460b      	mov	r3, r1
 80005b4:	015b      	lsls	r3, r3, #5
 80005b6:	440b      	add	r3, r1
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	4413      	add	r3, r2
 80005bc:	3306      	adds	r3, #6
 80005be:	2206      	movs	r2, #6
 80005c0:	701a      	strb	r2, [r3, #0]
		MsgBook.Row[MsgBook.head_indx].DataLen = Size;
 80005c2:	4b5d      	ldr	r3, [pc, #372]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80005c4:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 80005c8:	4619      	mov	r1, r3
 80005ca:	4a5b      	ldr	r2, [pc, #364]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80005cc:	460b      	mov	r3, r1
 80005ce:	015b      	lsls	r3, r3, #5
 80005d0:	440b      	add	r3, r1
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	4413      	add	r3, r2
 80005d6:	3304      	adds	r3, #4
 80005d8:	887a      	ldrh	r2, [r7, #2]
 80005da:	801a      	strh	r2, [r3, #0]
		MsgBook.Row[MsgBook.head_indx].TimeStamp = millis;
 80005dc:	4b56      	ldr	r3, [pc, #344]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80005de:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 80005e2:	4618      	mov	r0, r3
 80005e4:	4b55      	ldr	r3, [pc, #340]	; (800073c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4953      	ldr	r1, [pc, #332]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80005ea:	4603      	mov	r3, r0
 80005ec:	015b      	lsls	r3, r3, #5
 80005ee:	4403      	add	r3, r0
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	440b      	add	r3, r1
 80005f4:	601a      	str	r2, [r3, #0]
		memcpy(MsgBook.Row[MsgBook.head_indx].Data, RxBuf6, Size);
 80005f6:	4b50      	ldr	r3, [pc, #320]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80005f8:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 80005fc:	461a      	mov	r2, r3
 80005fe:	4613      	mov	r3, r2
 8000600:	015b      	lsls	r3, r3, #5
 8000602:	4413      	add	r3, r2
 8000604:	00db      	lsls	r3, r3, #3
 8000606:	4a4c      	ldr	r2, [pc, #304]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000608:	4413      	add	r3, r2
 800060a:	3307      	adds	r3, #7
 800060c:	887a      	ldrh	r2, [r7, #2]
 800060e:	494c      	ldr	r1, [pc, #304]	; (8000740 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000610:	4618      	mov	r0, r3
 8000612:	f007 fa1d 	bl	8007a50 <memcpy>

		MsgBook.head_indx++;
 8000616:	4b48      	ldr	r3, [pc, #288]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000618:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 800061c:	3301      	adds	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b45      	ldr	r3, [pc, #276]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000622:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
		if (MsgBook.head_indx >= MSG_ROWS)
 8000626:	4b44      	ldr	r3, [pc, #272]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000628:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 800062c:	2b07      	cmp	r3, #7
 800062e:	d903      	bls.n	8000638 <HAL_UARTEx_RxEventCallback+0xb0>
		{
			MsgBook.head_indx = 0;
 8000630:	4b41      	ldr	r3, [pc, #260]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
		}
		osSemaphoreRelease(availRowCntSemaHandle);
 8000638:	4b42      	ldr	r3, [pc, #264]	; (8000744 <HAL_UARTEx_RxEventCallback+0x1bc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f004 f8c5 	bl	80047cc <osSemaphoreRelease>

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *) RxBuf6, RX_BUF_SIZE);
 8000642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000646:	493e      	ldr	r1, [pc, #248]	; (8000740 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000648:	483f      	ldr	r0, [pc, #252]	; (8000748 <HAL_UARTEx_RxEventCallback+0x1c0>)
 800064a:	f002 fda7 	bl	800319c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 800064e:	4b3f      	ldr	r3, [pc, #252]	; (800074c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b3d      	ldr	r3, [pc, #244]	; (800074c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f022 0208 	bic.w	r2, r2, #8
 800065c:	601a      	str	r2, [r3, #0]

	}

	if (huart->Instance == USART1)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a3b      	ldr	r2, [pc, #236]	; (8000750 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d15f      	bne.n	8000728 <HAL_UARTEx_RxEventCallback+0x1a0>
	{
		HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin);
 8000668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066c:	4839      	ldr	r0, [pc, #228]	; (8000754 <HAL_UARTEx_RxEventCallback+0x1cc>)
 800066e:	f001 fd22 	bl	80020b6 <HAL_GPIO_TogglePin>
		//oldPos = newPos;  // Update the last position before copying new data
		MsgBook.Row[MsgBook.head_indx].Source = 1;
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000674:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 8000678:	4619      	mov	r1, r3
 800067a:	4a2f      	ldr	r2, [pc, #188]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800067c:	460b      	mov	r3, r1
 800067e:	015b      	lsls	r3, r3, #5
 8000680:	440b      	add	r3, r1
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	4413      	add	r3, r2
 8000686:	3306      	adds	r3, #6
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
		MsgBook.Row[MsgBook.head_indx].DataLen = Size;
 800068c:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800068e:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 8000692:	4619      	mov	r1, r3
 8000694:	4a28      	ldr	r2, [pc, #160]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000696:	460b      	mov	r3, r1
 8000698:	015b      	lsls	r3, r3, #5
 800069a:	440b      	add	r3, r1
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	4413      	add	r3, r2
 80006a0:	3304      	adds	r3, #4
 80006a2:	887a      	ldrh	r2, [r7, #2]
 80006a4:	801a      	strh	r2, [r3, #0]
		MsgBook.Row[MsgBook.head_indx].TimeStamp = millis;
 80006a6:	4b24      	ldr	r3, [pc, #144]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80006a8:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 80006ac:	4618      	mov	r0, r3
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4921      	ldr	r1, [pc, #132]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80006b4:	4603      	mov	r3, r0
 80006b6:	015b      	lsls	r3, r3, #5
 80006b8:	4403      	add	r3, r0
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	440b      	add	r3, r1
 80006be:	601a      	str	r2, [r3, #0]
		memcpy(MsgBook.Row[MsgBook.head_indx].Data, RxBuf1, Size);
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80006c2:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 80006c6:	461a      	mov	r2, r3
 80006c8:	4613      	mov	r3, r2
 80006ca:	015b      	lsls	r3, r3, #5
 80006cc:	4413      	add	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	4a19      	ldr	r2, [pc, #100]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80006d2:	4413      	add	r3, r2
 80006d4:	3307      	adds	r3, #7
 80006d6:	887a      	ldrh	r2, [r7, #2]
 80006d8:	491f      	ldr	r1, [pc, #124]	; (8000758 <HAL_UARTEx_RxEventCallback+0x1d0>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f007 f9b8 	bl	8007a50 <memcpy>

		MsgBook.head_indx++;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80006e2:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 80006e6:	3301      	adds	r3, #1
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80006ec:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
		if (MsgBook.head_indx >= MSG_ROWS)
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80006f2:	f893 3840 	ldrb.w	r3, [r3, #2112]	; 0x840
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	d903      	bls.n	8000702 <HAL_UARTEx_RxEventCallback+0x17a>
		{
			MsgBook.head_indx = 0;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
		}

		osSemaphoreRelease(availRowCntSemaHandle);
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f004 f860 	bl	80047cc <osSemaphoreRelease>

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf1, RX_BUF_SIZE);
 800070c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000710:	4911      	ldr	r1, [pc, #68]	; (8000758 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <HAL_UARTEx_RxEventCallback+0x1d4>)
 8000714:	f002 fd42 	bl	800319c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <HAL_UARTEx_RxEventCallback+0x1d8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f022 0208 	bic.w	r2, r2, #8
 8000726:	601a      	str	r2, [r3, #0]
	}

}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40011400 	.word	0x40011400
 8000734:	40020000 	.word	0x40020000
 8000738:	20004b24 	.word	0x20004b24
 800073c:	20000090 	.word	0x20000090
 8000740:	20005368 	.word	0x20005368
 8000744:	20004a14 	.word	0x20004a14
 8000748:	20005568 	.word	0x20005568
 800074c:	200049b4 	.word	0x200049b4
 8000750:	40011000 	.word	0x40011000
 8000754:	40020400 	.word	0x40020400
 8000758:	200055f8 	.word	0x200055f8
 800075c:	20004ae0 	.word	0x20004ae0
 8000760:	20004a1c 	.word	0x20004a1c

08000764 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <HAL_UART_TxCpltCallback+0x3c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d10f      	bne.n	8000796 <HAL_UART_TxCpltCallback+0x32>
	{
		osSemaphoreRelease(txdReadySemaHandle);
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <HAL_UART_TxCpltCallback+0x40>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f004 f826 	bl	80047cc <osSemaphoreRelease>
		uart2_tx_done = true;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_UART_TxCpltCallback+0x44>)
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
		__HAL_DMA_DISABLE_IT(&hdma_usart2_tx, DMA_IT_HT);
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_UART_TxCpltCallback+0x48>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <HAL_UART_TxCpltCallback+0x48>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f022 0208 	bic.w	r2, r2, #8
 8000794:	601a      	str	r2, [r3, #0]
	}
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40004400 	.word	0x40004400
 80007a4:	20004a18 	.word	0x20004a18
 80007a8:	200055b0 	.word	0x200055b0
 80007ac:	20004a7c 	.word	0x20004a7c

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b6:	f000 fdbb 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ba:	f000 f8b1 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007be:	f000 f9c9 	bl	8000b54 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c2:	f000 f989 	bl	8000ad8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007c6:	f000 f909 	bl	80009dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007ca:	f000 f931 	bl	8000a30 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80007ce:	f000 f959 	bl	8000a84 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  memset(&MsgBook,0x00,sizeof(MsgBook));
 80007d2:	f640 0244 	movw	r2, #2116	; 0x844
 80007d6:	2100      	movs	r1, #0
 80007d8:	483a      	ldr	r0, [pc, #232]	; (80008c4 <main+0x114>)
 80007da:	f007 f947 	bl	8007a6c <memset>

  HAL_UART_MspInit(&huart2);
 80007de:	483a      	ldr	r0, [pc, #232]	; (80008c8 <main+0x118>)
 80007e0:	f000 fb20 	bl	8000e24 <HAL_UART_MspInit>
  memset(TxBuf2, 0x00, TX_BUF_SIZE);
 80007e4:	2250      	movs	r2, #80	; 0x50
 80007e6:	2100      	movs	r1, #0
 80007e8:	4838      	ldr	r0, [pc, #224]	; (80008cc <main+0x11c>)
 80007ea:	f007 f93f 	bl	8007a6c <memset>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuf6, RX_BUF_SIZE);
 80007ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f2:	4937      	ldr	r1, [pc, #220]	; (80008d0 <main+0x120>)
 80007f4:	4837      	ldr	r0, [pc, #220]	; (80008d4 <main+0x124>)
 80007f6:	f002 fcd1 	bl	800319c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 80007fa:	4b37      	ldr	r3, [pc, #220]	; (80008d8 <main+0x128>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <main+0x128>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f022 0208 	bic.w	r2, r2, #8
 8000808:	601a      	str	r2, [r3, #0]


  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf1, RX_BUF_SIZE);
 800080a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080e:	4933      	ldr	r1, [pc, #204]	; (80008dc <main+0x12c>)
 8000810:	4833      	ldr	r0, [pc, #204]	; (80008e0 <main+0x130>)
 8000812:	f002 fcc3 	bl	800319c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000816:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <main+0x134>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <main+0x134>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f022 0208 	bic.w	r2, r2, #8
 8000824:	601a      	str	r2, [r3, #0]

  //HAL_UART_Transmit_DMA(&huart2, TxBuf2, TX_BUF_SIZE);

  //osRes = osSemaphoreRelease(newRowSemaHandle);
  sprintf(txt,"STM32Tx_Analyzer Blackpill \r\n");
 8000826:	463b      	mov	r3, r7
 8000828:	492f      	ldr	r1, [pc, #188]	; (80008e8 <main+0x138>)
 800082a:	4618      	mov	r0, r3
 800082c:	f007 f95a 	bl	8007ae4 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);
 8000830:	463b      	mov	r3, r7
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fcd4 	bl	80001e0 <strlen>
 8000838:	4603      	mov	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	4639      	mov	r1, r7
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	4821      	ldr	r0, [pc, #132]	; (80008c8 <main+0x118>)
 8000844:	f002 fb99 	bl	8002f7a <HAL_UART_Transmit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000848:	f003 fdee 	bl	8004428 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of txdReadySema */
  txdReadySemaHandle = osSemaphoreNew(1, 1, &txdReadySema_attributes);
 800084c:	4a27      	ldr	r2, [pc, #156]	; (80008ec <main+0x13c>)
 800084e:	2101      	movs	r1, #1
 8000850:	2001      	movs	r0, #1
 8000852:	f003 fee0 	bl	8004616 <osSemaphoreNew>
 8000856:	4603      	mov	r3, r0
 8000858:	4a25      	ldr	r2, [pc, #148]	; (80008f0 <main+0x140>)
 800085a:	6013      	str	r3, [r2, #0]

  /* creation of bufferAccessSema */
  bufferAccessSemaHandle = osSemaphoreNew(1, 1, &bufferAccessSema_attributes);
 800085c:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <main+0x144>)
 800085e:	2101      	movs	r1, #1
 8000860:	2001      	movs	r0, #1
 8000862:	f003 fed8 	bl	8004616 <osSemaphoreNew>
 8000866:	4603      	mov	r3, r0
 8000868:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <main+0x148>)
 800086a:	6013      	str	r3, [r2, #0]

  /* creation of availRowCntSema */
  availRowCntSemaHandle = osSemaphoreNew(2, 2, &availRowCntSema_attributes);
 800086c:	4a23      	ldr	r2, [pc, #140]	; (80008fc <main+0x14c>)
 800086e:	2102      	movs	r1, #2
 8000870:	2002      	movs	r0, #2
 8000872:	f003 fed0 	bl	8004616 <osSemaphoreNew>
 8000876:	4603      	mov	r3, r0
 8000878:	4a21      	ldr	r2, [pc, #132]	; (8000900 <main+0x150>)
 800087a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800087c:	4a21      	ldr	r2, [pc, #132]	; (8000904 <main+0x154>)
 800087e:	2100      	movs	r1, #0
 8000880:	4821      	ldr	r0, [pc, #132]	; (8000908 <main+0x158>)
 8000882:	f003 fe1b 	bl	80044bc <osThreadNew>
 8000886:	4603      	mov	r3, r0
 8000888:	4a20      	ldr	r2, [pc, #128]	; (800090c <main+0x15c>)
 800088a:	6013      	str	r3, [r2, #0]

  /* creation of parseNewMsgtask */
  parseNewMsgtaskHandle = osThreadNew(StartNewMsgTask, NULL, &parseNewMsgtask_attributes);
 800088c:	4a20      	ldr	r2, [pc, #128]	; (8000910 <main+0x160>)
 800088e:	2100      	movs	r1, #0
 8000890:	4820      	ldr	r0, [pc, #128]	; (8000914 <main+0x164>)
 8000892:	f003 fe13 	bl	80044bc <osThreadNew>
 8000896:	4603      	mov	r3, r0
 8000898:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <main+0x168>)
 800089a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800089c:	f003 fde8 	bl	8004470 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sprintf(txt,"STM32F411_Rx_Analyzer\r\n");
 80008a0:	463b      	mov	r3, r7
 80008a2:	491e      	ldr	r1, [pc, #120]	; (800091c <main+0x16c>)
 80008a4:	4618      	mov	r0, r3
 80008a6:	f007 f91d 	bl	8007ae4 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);
 80008aa:	463b      	mov	r3, r7
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fc97 	bl	80001e0 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4639      	mov	r1, r7
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <main+0x118>)
 80008be:	f002 fb5c 	bl	8002f7a <HAL_UART_Transmit>
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <main+0x112>
 80008c4:	20004b24 	.word	0x20004b24
 80008c8:	200055b4 	.word	0x200055b4
 80008cc:	200057f8 	.word	0x200057f8
 80008d0:	20005368 	.word	0x20005368
 80008d4:	20005568 	.word	0x20005568
 80008d8:	200049b4 	.word	0x200049b4
 80008dc:	200055f8 	.word	0x200055f8
 80008e0:	20004ae0 	.word	0x20004ae0
 80008e4:	20004a1c 	.word	0x20004a1c
 80008e8:	0800838c 	.word	0x0800838c
 80008ec:	08008448 	.word	0x08008448
 80008f0:	20004a18 	.word	0x20004a18
 80008f4:	08008458 	.word	0x08008458
 80008f8:	200055ac 	.word	0x200055ac
 80008fc:	08008468 	.word	0x08008468
 8000900:	20004a14 	.word	0x20004a14
 8000904:	08008400 	.word	0x08008400
 8000908:	08000c0d 	.word	0x08000c0d
 800090c:	200049b0 	.word	0x200049b0
 8000910:	08008424 	.word	0x08008424
 8000914:	08000c1d 	.word	0x08000c1d
 8000918:	20004adc 	.word	0x20004adc
 800091c:	080083ac 	.word	0x080083ac

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b094      	sub	sp, #80	; 0x50
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	2230      	movs	r2, #48	; 0x30
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f007 f89c 	bl	8007a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <SystemClock_Config+0xb4>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <SystemClock_Config+0xb4>)
 800094e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000952:	6413      	str	r3, [r2, #64]	; 0x40
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <SystemClock_Config+0xb4>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <SystemClock_Config+0xb8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <SystemClock_Config+0xb8>)
 800096a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <SystemClock_Config+0xb8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000984:	2310      	movs	r3, #16
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000988:	2300      	movs	r3, #0
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 0320 	add.w	r3, r7, #32
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fbab 	bl	80020ec <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800099c:	f000 fa10 	bl	8000dc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	230f      	movs	r3, #15
 80009a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 fe0e 	bl	80025dc <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009c6:	f000 f9fb 	bl	8000dc0 <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	; 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40007000 	.word	0x40007000

080009dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_USART1_UART_Init+0x50>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a14:	f002 fa64 	bl	8002ee0 <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a1e:	f000 f9cf 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20004ae0 	.word	0x20004ae0
 8000a2c:	40011000 	.word	0x40011000

08000a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <MX_USART2_UART_Init+0x50>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a68:	f002 fa3a 	bl	8002ee0 <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a72:	f000 f9a5 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200055b4 	.word	0x200055b4
 8000a80:	40004400 	.word	0x40004400

08000a84 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_USART6_UART_Init+0x4c>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MX_USART6_UART_Init+0x50>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_USART6_UART_Init+0x4c>)
 8000a90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a94:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_USART6_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_USART6_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_USART6_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_USART6_UART_Init+0x4c>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_USART6_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_USART6_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USART6_UART_Init+0x4c>)
 8000abc:	f002 fa10 	bl	8002ee0 <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ac6:	f000 f97b 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20005568 	.word	0x20005568
 8000ad4:	40011400 	.word	0x40011400

08000ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_DMA_Init+0x78>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a1a      	ldr	r2, [pc, #104]	; (8000b50 <MX_DMA_Init+0x78>)
 8000ae8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_DMA_Init+0x78>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_DMA_Init+0x78>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <MX_DMA_Init+0x78>)
 8000b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_DMA_Init+0x78>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2105      	movs	r1, #5
 8000b1a:	2011      	movs	r0, #17
 8000b1c:	f000 fd02 	bl	8001524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b20:	2011      	movs	r0, #17
 8000b22:	f000 fd1b 	bl	800155c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2105      	movs	r1, #5
 8000b2a:	2039      	movs	r0, #57	; 0x39
 8000b2c:	f000 fcfa 	bl	8001524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b30:	2039      	movs	r0, #57	; 0x39
 8000b32:	f000 fd13 	bl	800155c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2105      	movs	r1, #5
 8000b3a:	203a      	movs	r0, #58	; 0x3a
 8000b3c:	f000 fcf2 	bl	8001524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b40:	203a      	movs	r0, #58	; 0x3a
 8000b42:	f000 fd0b 	bl	800155c <HAL_NVIC_EnableIRQ>

}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <MX_GPIO_Init+0xac>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a23      	ldr	r2, [pc, #140]	; (8000c00 <MX_GPIO_Init+0xac>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_GPIO_Init+0xac>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_GPIO_Init+0xac>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <MX_GPIO_Init+0xac>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_GPIO_Init+0xac>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba8:	4816      	ldr	r0, [pc, #88]	; (8000c04 <MX_GPIO_Init+0xb0>)
 8000baa:	f001 fa6b 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb4:	4814      	ldr	r0, [pc, #80]	; (8000c08 <MX_GPIO_Init+0xb4>)
 8000bb6:	f001 fa65 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_WHITE_Pin */
  GPIO_InitStruct.Pin = LED_WHITE_Pin;
 8000bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_WHITE_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480c      	ldr	r0, [pc, #48]	; (8000c04 <MX_GPIO_Init+0xb0>)
 8000bd4:	f001 f8d2 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_GPIO_Init+0xb4>)
 8000bf2:	f001 f8c3 	bl	8001d7c <HAL_GPIO_Init>

}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020400 	.word	0x40020400
 8000c08:	40020000 	.word	0x40020000

08000c0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f003 fce3 	bl	80045e0 <osDelay>
 8000c1a:	e7fb      	b.n	8000c14 <StartDefaultTask+0x8>

08000c1c <StartNewMsgTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNewMsgTask */
void StartNewMsgTask(void *argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b090      	sub	sp, #64	; 0x40
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNewMsgTask */
	char txt[40];
	osStatus_t osRes;
	sprintf(txt,"Parse 1 \r\n");
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	4953      	ldr	r1, [pc, #332]	; (8000d78 <StartNewMsgTask+0x15c>)
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f006 ff5a 	bl	8007ae4 <siprintf>
	//HAL_UART_Transmit(&huart2, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);

	osRes = osSemaphoreAcquire(availRowCntSemaHandle, osWaitForever);  // Wait for new messages
 8000c30:	4b52      	ldr	r3, [pc, #328]	; (8000d7c <StartNewMsgTask+0x160>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 fd75 	bl	8004728 <osSemaphoreAcquire>
 8000c3e:	6378      	str	r0, [r7, #52]	; 0x34
	//osSemaphoreRelease(bufferAccessSemaHandle);
	osSemaphoreRelease(txdReadySemaHandle);
 8000c40:	4b4f      	ldr	r3, [pc, #316]	; (8000d80 <StartNewMsgTask+0x164>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 fdc1 	bl	80047cc <osSemaphoreRelease>

	//sprintf(txt,"Parse 2 \r\n");
	//HAL_UART_Transmit(&huart2, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);

	while( osSemaphoreGetCount(availRowCntSemaHandle) > 0)
 8000c4a:	e005      	b.n	8000c58 <StartNewMsgTask+0x3c>
	{
		osSemaphoreAcquire(availRowCntSemaHandle,0);
 8000c4c:	4b4b      	ldr	r3, [pc, #300]	; (8000d7c <StartNewMsgTask+0x160>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 fd68 	bl	8004728 <osSemaphoreAcquire>
	while( osSemaphoreGetCount(availRowCntSemaHandle) > 0)
 8000c58:	4b48      	ldr	r3, [pc, #288]	; (8000d7c <StartNewMsgTask+0x160>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 fdf9 	bl	8004854 <osSemaphoreGetCount>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f1      	bne.n	8000c4c <StartNewMsgTask+0x30>
	}

	sprintf(txt,"Parse 3 \r\n");
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	4945      	ldr	r1, [pc, #276]	; (8000d84 <StartNewMsgTask+0x168>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f006 ff38 	bl	8007ae4 <siprintf>
	//HAL_UART_Transmit(&huart2, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);

  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreGetCount(availRowCntSemaHandle) > 0)
 8000c74:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <StartNewMsgTask+0x160>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fdeb 	bl	8004854 <osSemaphoreGetCount>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f7      	beq.n	8000c74 <StartNewMsgTask+0x58>
	  //if (msg_tail_row != msg_head_row )
	  {
		  osRes = osSemaphoreAcquire(availRowCntSemaHandle, osWaitForever);
 8000c84:	4b3d      	ldr	r3, [pc, #244]	; (8000d7c <StartNewMsgTask+0x160>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 fd4b 	bl	8004728 <osSemaphoreAcquire>
 8000c92:	6378      	str	r0, [r7, #52]	; 0x34

		  //sprintf(txt,"Parse 4 \r\n");
		//HAL_UART_Transmit(&huart2, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);

		  osRes = osSemaphoreAcquire(txdReadySemaHandle, osWaitForever);
 8000c94:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <StartNewMsgTask+0x164>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 fd43 	bl	8004728 <osSemaphoreAcquire>
 8000ca2:	6378      	str	r0, [r7, #52]	; 0x34
		  if (osRes == osOK)
 8000ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1e4      	bne.n	8000c74 <StartNewMsgTask+0x58>
		  //if(MsgBook[msg_tail_row].DataLen > 0 )
		  {

			  snprintf(TxBuf2,254,"%lu [%d] %s",
					  MsgBook.Row[MsgBook.tail_indx].TimeStamp,
 8000caa:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <StartNewMsgTask+0x16c>)
 8000cac:	f893 3841 	ldrb.w	r3, [r3, #2113]	; 0x841
 8000cb0:	4619      	mov	r1, r3
			  snprintf(TxBuf2,254,"%lu [%d] %s",
 8000cb2:	4a35      	ldr	r2, [pc, #212]	; (8000d88 <StartNewMsgTask+0x16c>)
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	015b      	lsls	r3, r3, #5
 8000cb8:	440b      	add	r3, r1
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4413      	add	r3, r2
 8000cbe:	681a      	ldr	r2, [r3, #0]
					  MsgBook.Row[MsgBook.tail_indx].Source,
 8000cc0:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <StartNewMsgTask+0x16c>)
 8000cc2:	f893 3841 	ldrb.w	r3, [r3, #2113]	; 0x841
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	492f      	ldr	r1, [pc, #188]	; (8000d88 <StartNewMsgTask+0x16c>)
 8000cca:	4603      	mov	r3, r0
 8000ccc:	015b      	lsls	r3, r3, #5
 8000cce:	4403      	add	r3, r0
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3306      	adds	r3, #6
 8000cd6:	781b      	ldrb	r3, [r3, #0]
			  snprintf(TxBuf2,254,"%lu [%d] %s",
 8000cd8:	4618      	mov	r0, r3
					  MsgBook.Row[MsgBook.tail_indx].Data);
 8000cda:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <StartNewMsgTask+0x16c>)
 8000cdc:	f893 3841 	ldrb.w	r3, [r3, #2113]	; 0x841
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	015b      	lsls	r3, r3, #5
 8000ce6:	440b      	add	r3, r1
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	4927      	ldr	r1, [pc, #156]	; (8000d88 <StartNewMsgTask+0x16c>)
 8000cec:	440b      	add	r3, r1
 8000cee:	3307      	adds	r3, #7
			  snprintf(TxBuf2,254,"%lu [%d] %s",
 8000cf0:	9301      	str	r3, [sp, #4]
 8000cf2:	9000      	str	r0, [sp, #0]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <StartNewMsgTask+0x170>)
 8000cf8:	21fe      	movs	r1, #254	; 0xfe
 8000cfa:	4825      	ldr	r0, [pc, #148]	; (8000d90 <StartNewMsgTask+0x174>)
 8000cfc:	f006 febe 	bl	8007a7c <sniprintf>
			  //snprintf(TxBuf2,16,"ABCDEGH %d\r\n",msg_cntr++);

			  uart2_tx_done = false;
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <StartNewMsgTask+0x178>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)TxBuf2, strlen(TxBuf2));
 8000d06:	4822      	ldr	r0, [pc, #136]	; (8000d90 <StartNewMsgTask+0x174>)
 8000d08:	f7ff fa6a 	bl	80001e0 <strlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	461a      	mov	r2, r3
 8000d12:	491f      	ldr	r1, [pc, #124]	; (8000d90 <StartNewMsgTask+0x174>)
 8000d14:	4820      	ldr	r0, [pc, #128]	; (8000d98 <StartNewMsgTask+0x17c>)
 8000d16:	f002 f9c3 	bl	80030a0 <HAL_UART_Transmit_DMA>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1a:	b672      	cpsid	i
}
 8000d1c:	bf00      	nop
			  //HAL_UART_Transmit_DMA(&huart2, (uint8_t *)MsgBook[msg_tail_row].Data, MsgBook[msg_tail_row].DataLen);
			  __disable_irq();
			  MsgBook.Row[MsgBook.tail_indx].DataLen = 0;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <StartNewMsgTask+0x16c>)
 8000d20:	f893 3841 	ldrb.w	r3, [r3, #2113]	; 0x841
 8000d24:	4619      	mov	r1, r3
 8000d26:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <StartNewMsgTask+0x16c>)
 8000d28:	460b      	mov	r3, r1
 8000d2a:	015b      	lsls	r3, r3, #5
 8000d2c:	440b      	add	r3, r1
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	4413      	add	r3, r2
 8000d32:	3304      	adds	r3, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	801a      	strh	r2, [r3, #0]
			  if (++MsgBook.tail_indx >= MSG_ROWS)  MsgBook.tail_indx = 0;
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <StartNewMsgTask+0x16c>)
 8000d3a:	f893 3841 	ldrb.w	r3, [r3, #2113]	; 0x841
 8000d3e:	3301      	adds	r3, #1
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <StartNewMsgTask+0x16c>)
 8000d44:	f883 2841 	strb.w	r2, [r3, #2113]	; 0x841
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <StartNewMsgTask+0x16c>)
 8000d4a:	f893 3841 	ldrb.w	r3, [r3, #2113]	; 0x841
 8000d4e:	2b07      	cmp	r3, #7
 8000d50:	d903      	bls.n	8000d5a <StartNewMsgTask+0x13e>
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <StartNewMsgTask+0x16c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2841 	strb.w	r2, [r3, #2113]	; 0x841
  __ASM volatile ("cpsie i" : : : "memory");
 8000d5a:	b662      	cpsie	i
}
 8000d5c:	bf00      	nop
			  __enable_irq();


			  while ( !uart2_tx_done )
 8000d5e:	e002      	b.n	8000d66 <StartNewMsgTask+0x14a>
			  {
				  osDelay(10);
 8000d60:	200a      	movs	r0, #10
 8000d62:	f003 fc3d 	bl	80045e0 <osDelay>
			  while ( !uart2_tx_done )
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <StartNewMsgTask+0x178>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	f083 0301 	eor.w	r3, r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1f5      	bne.n	8000d60 <StartNewMsgTask+0x144>
	  if (osSemaphoreGetCount(availRowCntSemaHandle) > 0)
 8000d74:	e77e      	b.n	8000c74 <StartNewMsgTask+0x58>
 8000d76:	bf00      	nop
 8000d78:	080083c4 	.word	0x080083c4
 8000d7c:	20004a14 	.word	0x20004a14
 8000d80:	20004a18 	.word	0x20004a18
 8000d84:	080083d0 	.word	0x080083d0
 8000d88:	20004b24 	.word	0x20004b24
 8000d8c:	080083dc 	.word	0x080083dc
 8000d90:	200057f8 	.word	0x200057f8
 8000d94:	200055b0 	.word	0x200055b0
 8000d98:	200055b4 	.word	0x200055b4

08000d9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dae:	f000 fae1 	bl	8001374 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40000c00 	.word	0x40000c00

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <Error_Handler+0x8>
	...

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_MspInit+0x54>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <HAL_MspInit+0x54>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_MspInit+0x54>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_MspInit+0x54>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_MspInit+0x54>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_MspInit+0x54>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	f06f 0001 	mvn.w	r0, #1
 8000e12:	f000 fb87 	bl	8001524 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08e      	sub	sp, #56	; 0x38
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <HAL_UART_MspInit+0x294>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d163      	bne.n	8000f0e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
 8000e4a:	4b9c      	ldr	r3, [pc, #624]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a9b      	ldr	r2, [pc, #620]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b99      	ldr	r3, [pc, #612]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	623b      	str	r3, [r7, #32]
 8000e60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	4b95      	ldr	r3, [pc, #596]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a94      	ldr	r2, [pc, #592]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b92      	ldr	r3, [pc, #584]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e90:	2307      	movs	r3, #7
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4889      	ldr	r0, [pc, #548]	; (80010c0 <HAL_UART_MspInit+0x29c>)
 8000e9c:	f000 ff6e 	bl	8001d7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000ea0:	4b88      	ldr	r3, [pc, #544]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000ea2:	4a89      	ldr	r2, [pc, #548]	; (80010c8 <HAL_UART_MspInit+0x2a4>)
 8000ea4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000ea6:	4b87      	ldr	r3, [pc, #540]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000ea8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eae:	4b85      	ldr	r3, [pc, #532]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb4:	4b83      	ldr	r3, [pc, #524]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eba:	4b82      	ldr	r3, [pc, #520]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000ebc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec2:	4b80      	ldr	r3, [pc, #512]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec8:	4b7e      	ldr	r3, [pc, #504]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ece:	4b7d      	ldr	r3, [pc, #500]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ed4:	4b7b      	ldr	r3, [pc, #492]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eda:	4b7a      	ldr	r3, [pc, #488]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ee0:	4878      	ldr	r0, [pc, #480]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000ee2:	f000 fb49 	bl	8001578 <HAL_DMA_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000eec:	f7ff ff68 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a74      	ldr	r2, [pc, #464]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000ef4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ef6:	4a73      	ldr	r2, [pc, #460]	; (80010c4 <HAL_UART_MspInit+0x2a0>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2105      	movs	r1, #5
 8000f00:	2025      	movs	r0, #37	; 0x25
 8000f02:	f000 fb0f 	bl	8001524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f06:	2025      	movs	r0, #37	; 0x25
 8000f08:	f000 fb28 	bl	800155c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f0c:	e0cf      	b.n	80010ae <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==USART2)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a6e      	ldr	r2, [pc, #440]	; (80010cc <HAL_UART_MspInit+0x2a8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d162      	bne.n	8000fde <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	4b67      	ldr	r3, [pc, #412]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	4a66      	ldr	r2, [pc, #408]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f26:	6413      	str	r3, [r2, #64]	; 0x40
 8000f28:	4b64      	ldr	r3, [pc, #400]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	4b60      	ldr	r3, [pc, #384]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4a5f      	ldr	r2, [pc, #380]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6313      	str	r3, [r2, #48]	; 0x30
 8000f44:	4b5d      	ldr	r3, [pc, #372]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f50:	230c      	movs	r3, #12
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f60:	2307      	movs	r3, #7
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4855      	ldr	r0, [pc, #340]	; (80010c0 <HAL_UART_MspInit+0x29c>)
 8000f6c:	f000 ff06 	bl	8001d7c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000f70:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000f72:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <HAL_UART_MspInit+0x2b0>)
 8000f74:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000f76:	4b56      	ldr	r3, [pc, #344]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000f78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f7e:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000f80:	2240      	movs	r2, #64	; 0x40
 8000f82:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f84:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f8a:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f90:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f92:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f98:	4b4d      	ldr	r3, [pc, #308]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f9e:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa4:	4b4a      	ldr	r3, [pc, #296]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000faa:	4b49      	ldr	r3, [pc, #292]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000fb0:	4847      	ldr	r0, [pc, #284]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000fb2:	f000 fae1 	bl	8001578 <HAL_DMA_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8000fbc:	f7ff ff00 	bl	8000dc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a43      	ldr	r2, [pc, #268]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fc6:	4a42      	ldr	r2, [pc, #264]	; (80010d0 <HAL_UART_MspInit+0x2ac>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2105      	movs	r1, #5
 8000fd0:	2026      	movs	r0, #38	; 0x26
 8000fd2:	f000 faa7 	bl	8001524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fd6:	2026      	movs	r0, #38	; 0x26
 8000fd8:	f000 fac0 	bl	800155c <HAL_NVIC_EnableIRQ>
}
 8000fdc:	e067      	b.n	80010ae <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==USART6)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a3d      	ldr	r2, [pc, #244]	; (80010d8 <HAL_UART_MspInit+0x2b4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d162      	bne.n	80010ae <HAL_UART_MspInit+0x28a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	4b33      	ldr	r3, [pc, #204]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff0:	4a32      	ldr	r2, [pc, #200]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000ff2:	f043 0320 	orr.w	r3, r3, #32
 8000ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <HAL_UART_MspInit+0x298>)
 8000ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <HAL_UART_MspInit+0x298>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a2b      	ldr	r2, [pc, #172]	; (80010bc <HAL_UART_MspInit+0x298>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <HAL_UART_MspInit+0x298>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001020:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001032:	2308      	movs	r3, #8
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	4820      	ldr	r0, [pc, #128]	; (80010c0 <HAL_UART_MspInit+0x29c>)
 800103e:	f000 fe9d 	bl	8001d7c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 8001044:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <HAL_UART_MspInit+0x2bc>)
 8001046:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 800104a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800104e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 800105e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001062:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001082:	4816      	ldr	r0, [pc, #88]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 8001084:	f000 fa78 	bl	8001578 <HAL_DMA_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 800108e:	f7ff fe97 	bl	8000dc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 8001096:	639a      	str	r2, [r3, #56]	; 0x38
 8001098:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_UART_MspInit+0x2b8>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2105      	movs	r1, #5
 80010a2:	2047      	movs	r0, #71	; 0x47
 80010a4:	f000 fa3e 	bl	8001524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80010a8:	2047      	movs	r0, #71	; 0x47
 80010aa:	f000 fa57 	bl	800155c <HAL_NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3738      	adds	r7, #56	; 0x38
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40011000 	.word	0x40011000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000
 80010c4:	20004a1c 	.word	0x20004a1c
 80010c8:	40026440 	.word	0x40026440
 80010cc:	40004400 	.word	0x40004400
 80010d0:	20004a7c 	.word	0x20004a7c
 80010d4:	400260a0 	.word	0x400260a0
 80010d8:	40011400 	.word	0x40011400
 80010dc:	200049b4 	.word	0x200049b4
 80010e0:	40026428 	.word	0x40026428

080010e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08c      	sub	sp, #48	; 0x30
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	2032      	movs	r0, #50	; 0x32
 80010fa:	f000 fa13 	bl	8001524 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80010fe:	2032      	movs	r0, #50	; 0x32
 8001100:	f000 fa2c 	bl	800155c <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <HAL_InitTick+0xa0>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a1d      	ldr	r2, [pc, #116]	; (8001184 <HAL_InitTick+0xa0>)
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	6413      	str	r3, [r2, #64]	; 0x40
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_InitTick+0xa0>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001120:	f107 0210 	add.w	r2, r7, #16
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fc26 	bl	800297c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001130:	f001 fbfc 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8001134:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	4a13      	ldr	r2, [pc, #76]	; (8001188 <HAL_InitTick+0xa4>)
 800113a:	fba2 2303 	umull	r2, r3, r2, r3
 800113e:	0c9b      	lsrs	r3, r3, #18
 8001140:	3b01      	subs	r3, #1
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_InitTick+0xa8>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <HAL_InitTick+0xac>)
 8001148:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_InitTick+0xa8>)
 800114c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001150:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001152:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_InitTick+0xa8>)
 8001154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001156:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_InitTick+0xa8>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_InitTick+0xa8>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <HAL_InitTick+0xa8>)
 8001166:	f001 fc3b 	bl	80029e0 <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d104      	bne.n	800117a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001170:	4806      	ldr	r0, [pc, #24]	; (800118c <HAL_InitTick+0xa8>)
 8001172:	f001 fc8f 	bl	8002a94 <HAL_TIM_Base_Start_IT>
 8001176:	4603      	mov	r3, r0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3730      	adds	r7, #48	; 0x30
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	431bde83 	.word	0x431bde83
 800118c:	20005848 	.word	0x20005848
 8001190:	40000c00 	.word	0x40000c00

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <DMA1_Stream6_IRQHandler+0x10>)
 80011c6:	f000 fb6f 	bl	80018a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20004a7c 	.word	0x20004a7c

080011d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <USART1_IRQHandler+0x10>)
 80011da:	f002 f845 	bl	8003268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20004ae0 	.word	0x20004ae0

080011e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <USART2_IRQHandler+0x10>)
 80011ee:	f002 f83b 	bl	8003268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200055b4 	.word	0x200055b4

080011fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <TIM5_IRQHandler+0x10>)
 8001202:	f001 fca9 	bl	8002b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20005848 	.word	0x20005848

08001210 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <DMA2_Stream1_IRQHandler+0x10>)
 8001216:	f000 fb47 	bl	80018a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200049b4 	.word	0x200049b4

08001224 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <DMA2_Stream2_IRQHandler+0x10>)
 800122a:	f000 fb3d 	bl	80018a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20004a1c 	.word	0x20004a1c

08001238 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <USART6_IRQHandler+0x10>)
 800123e:	f002 f813 	bl	8003268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20005568 	.word	0x20005568

0800124c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <_sbrk+0x5c>)
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <_sbrk+0x60>)
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <_sbrk+0x64>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <_sbrk+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	429a      	cmp	r2, r3
 800127a:	d207      	bcs.n	800128c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800127c:	f006 fbbe 	bl	80079fc <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e009      	b.n	80012a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <_sbrk+0x64>)
 800129c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20020000 	.word	0x20020000
 80012ac:	00000400 	.word	0x00000400
 80012b0:	20000094 	.word	0x20000094
 80012b4:	200058e8 	.word	0x200058e8

080012b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <SystemInit+0x20>)
 80012be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <SystemInit+0x20>)
 80012c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012e2:	490e      	ldr	r1, [pc, #56]	; (800131c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012f8:	4c0b      	ldr	r4, [pc, #44]	; (8001328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001306:	f7ff ffd7 	bl	80012b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130a:	f006 fb7d 	bl	8007a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130e:	f7ff fa4f 	bl	80007b0 <main>
  bx  lr    
 8001312:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001320:	080084dc 	.word	0x080084dc
  ldr r2, =_sbss
 8001324:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001328:	200058e4 	.word	0x200058e4

0800132c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC_IRQHandler>
	...

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <HAL_Init+0x40>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <HAL_Init+0x40>)
 8001346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800134a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <HAL_Init+0x40>)
 8001352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 f8d8 	bl	800150e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135e:	200f      	movs	r0, #15
 8001360:	f7ff fec0 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001364:	f7ff fd32 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023c00 	.word	0x40023c00

08001374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008
 8001398:	20005890 	.word	0x20005890

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20005890 	.word	0x20005890

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <__NVIC_EnableIRQ+0x38>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ff4c 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001536:	f7ff ff61 	bl	80013fc <__NVIC_GetPriorityGrouping>
 800153a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	6978      	ldr	r0, [r7, #20]
 8001542:	f7ff ffb1 	bl	80014a8 <NVIC_EncodePriority>
 8001546:	4602      	mov	r2, r0
 8001548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff80 	bl	8001454 <__NVIC_SetPriority>
}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff54 	bl	8001418 <__NVIC_EnableIRQ>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ff0a 	bl	800139c <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e099      	b.n	80016c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2202      	movs	r2, #2
 8001598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0201 	bic.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b4:	e00f      	b.n	80015d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015b6:	f7ff fef1 	bl	800139c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d908      	bls.n	80015d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2220      	movs	r2, #32
 80015c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2203      	movs	r2, #3
 80015ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e078      	b.n	80016c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e8      	bne.n	80015b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_DMA_Init+0x158>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4313      	orrs	r3, r2
 8001626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	2b04      	cmp	r3, #4
 800162e:	d107      	bne.n	8001640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	4313      	orrs	r3, r2
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f023 0307 	bic.w	r3, r3, #7
 8001656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	4313      	orrs	r3, r2
 8001660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	2b04      	cmp	r3, #4
 8001668:	d117      	bne.n	800169a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4313      	orrs	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00e      	beq.n	800169a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 fb01 	bl	8001c84 <DMA_CheckFifoParam>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2240      	movs	r2, #64	; 0x40
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001696:	2301      	movs	r3, #1
 8001698:	e016      	b.n	80016c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 fab8 	bl	8001c18 <DMA_CalcBaseAndBitshift>
 80016a8:	4603      	mov	r3, r0
 80016aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	223f      	movs	r2, #63	; 0x3f
 80016b2:	409a      	lsls	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	f010803f 	.word	0xf010803f

080016d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_DMA_Start_IT+0x26>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e040      	b.n	800177c <HAL_DMA_Start_IT+0xa8>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d12f      	bne.n	800176e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2202      	movs	r2, #2
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 fa4a 	bl	8001bbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172c:	223f      	movs	r2, #63	; 0x3f
 800172e:	409a      	lsls	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0216 	orr.w	r2, r2, #22
 8001742:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0208 	orr.w	r2, r2, #8
 800175a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e005      	b.n	800177a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001776:	2302      	movs	r3, #2
 8001778:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001792:	f7ff fe03 	bl	800139c <HAL_GetTick>
 8001796:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d008      	beq.n	80017b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e052      	b.n	800185c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0216 	bic.w	r2, r2, #22
 80017c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d103      	bne.n	80017e6 <HAL_DMA_Abort+0x62>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0208 	bic.w	r2, r2, #8
 80017f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001806:	e013      	b.n	8001830 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001808:	f7ff fdc8 	bl	800139c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b05      	cmp	r3, #5
 8001814:	d90c      	bls.n	8001830 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2220      	movs	r2, #32
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e015      	b.n	800185c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1e4      	bne.n	8001808 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	223f      	movs	r2, #63	; 0x3f
 8001844:	409a      	lsls	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d004      	beq.n	8001882 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00c      	b.n	800189c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2205      	movs	r2, #5
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018b4:	4b92      	ldr	r3, [pc, #584]	; (8001b00 <HAL_DMA_IRQHandler+0x258>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a92      	ldr	r2, [pc, #584]	; (8001b04 <HAL_DMA_IRQHandler+0x25c>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0a9b      	lsrs	r3, r3, #10
 80018c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d2:	2208      	movs	r2, #8
 80018d4:	409a      	lsls	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d01a      	beq.n	8001914 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0204 	bic.w	r2, r2, #4
 80018fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	2208      	movs	r2, #8
 8001902:	409a      	lsls	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	2201      	movs	r2, #1
 800191a:	409a      	lsls	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d012      	beq.n	800194a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	2201      	movs	r2, #1
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	f043 0202 	orr.w	r2, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194e:	2204      	movs	r2, #4
 8001950:	409a      	lsls	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d012      	beq.n	8001980 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00b      	beq.n	8001980 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196c:	2204      	movs	r2, #4
 800196e:	409a      	lsls	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001978:	f043 0204 	orr.w	r2, r3, #4
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001984:	2210      	movs	r2, #16
 8001986:	409a      	lsls	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d043      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d03c      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	2210      	movs	r2, #16
 80019a4:	409a      	lsls	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d018      	beq.n	80019ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d108      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d024      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
 80019d6:	e01f      	b.n	8001a18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d01b      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
 80019e8:	e016      	b.n	8001a18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d107      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0208 	bic.w	r2, r2, #8
 8001a06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 808e 	beq.w	8001b46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8086 	beq.w	8001b46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3e:	2220      	movs	r2, #32
 8001a40:	409a      	lsls	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d136      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0216 	bic.w	r2, r2, #22
 8001a60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <HAL_DMA_IRQHandler+0x1da>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0208 	bic.w	r2, r2, #8
 8001a90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	223f      	movs	r2, #63	; 0x3f
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d07d      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	4798      	blx	r3
        }
        return;
 8001abe:	e078      	b.n	8001bb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01c      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d108      	bne.n	8001aee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d030      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
 8001aec:	e02b      	b.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d027      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
 8001afe:	e022      	b.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
 8001b00:	20000000 	.word	0x20000000
 8001b04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0210 	bic.w	r2, r2, #16
 8001b24:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d032      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d022      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	3301      	adds	r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d307      	bcc.n	8001b8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f2      	bne.n	8001b72 <HAL_DMA_IRQHandler+0x2ca>
 8001b8c:	e000      	b.n	8001b90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b8e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4798      	blx	r3
 8001bb0:	e000      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bb2:	bf00      	nop
    }
  }
}
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop

08001bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b40      	cmp	r3, #64	; 0x40
 8001be8:	d108      	bne.n	8001bfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bfa:	e007      	b.n	8001c0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	3b10      	subs	r3, #16
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <DMA_CalcBaseAndBitshift+0x64>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <DMA_CalcBaseAndBitshift+0x68>)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d909      	bls.n	8001c5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	1d1a      	adds	r2, r3, #4
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	659a      	str	r2, [r3, #88]	; 0x58
 8001c58:	e007      	b.n	8001c6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c62:	f023 0303 	bic.w	r3, r3, #3
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	aaaaaaab 	.word	0xaaaaaaab
 8001c80:	08008490 	.word	0x08008490

08001c84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11f      	bne.n	8001cde <DMA_CheckFifoParam+0x5a>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d856      	bhi.n	8001d52 <DMA_CheckFifoParam+0xce>
 8001ca4:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <DMA_CheckFifoParam+0x28>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001cbd 	.word	0x08001cbd
 8001cb0:	08001ccf 	.word	0x08001ccf
 8001cb4:	08001cbd 	.word	0x08001cbd
 8001cb8:	08001d53 	.word	0x08001d53
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d046      	beq.n	8001d56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ccc:	e043      	b.n	8001d56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cd6:	d140      	bne.n	8001d5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cdc:	e03d      	b.n	8001d5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ce6:	d121      	bne.n	8001d2c <DMA_CheckFifoParam+0xa8>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d837      	bhi.n	8001d5e <DMA_CheckFifoParam+0xda>
 8001cee:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <DMA_CheckFifoParam+0x70>)
 8001cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001d0b 	.word	0x08001d0b
 8001cfc:	08001d05 	.word	0x08001d05
 8001d00:	08001d1d 	.word	0x08001d1d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
      break;
 8001d08:	e030      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d025      	beq.n	8001d62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d1a:	e022      	b.n	8001d62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d24:	d11f      	bne.n	8001d66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d2a:	e01c      	b.n	8001d66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d903      	bls.n	8001d3a <DMA_CheckFifoParam+0xb6>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d003      	beq.n	8001d40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d38:	e018      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d3e:	e015      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00e      	beq.n	8001d6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d50:	e00b      	b.n	8001d6a <DMA_CheckFifoParam+0xe6>
      break;
 8001d52:	bf00      	nop
 8001d54:	e00a      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d56:	bf00      	nop
 8001d58:	e008      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d5a:	bf00      	nop
 8001d5c:	e006      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d5e:	bf00      	nop
 8001d60:	e004      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d62:	bf00      	nop
 8001d64:	e002      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d66:	bf00      	nop
 8001d68:	e000      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d6a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e159      	b.n	800204c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 8148 	bne.w	8002046 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d005      	beq.n	8001dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d130      	bne.n	8001e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 0201 	and.w	r2, r3, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d017      	beq.n	8001e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d123      	bne.n	8001ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80a2 	beq.w	8002046 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b57      	ldr	r3, [pc, #348]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a56      	ldr	r2, [pc, #344]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b54      	ldr	r3, [pc, #336]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1e:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_GPIO_Init+0x2ec>)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	220f      	movs	r2, #15
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a49      	ldr	r2, [pc, #292]	; (800206c <HAL_GPIO_Init+0x2f0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x202>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a48      	ldr	r2, [pc, #288]	; (8002070 <HAL_GPIO_Init+0x2f4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x1fe>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a47      	ldr	r2, [pc, #284]	; (8002074 <HAL_GPIO_Init+0x2f8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x1fa>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a46      	ldr	r2, [pc, #280]	; (8002078 <HAL_GPIO_Init+0x2fc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x1f6>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a45      	ldr	r2, [pc, #276]	; (800207c <HAL_GPIO_Init+0x300>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x1f2>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e008      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f6e:	2307      	movs	r3, #7
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e004      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	f002 0203 	and.w	r2, r2, #3
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f90:	4935      	ldr	r1, [pc, #212]	; (8002068 <HAL_GPIO_Init+0x2ec>)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f9e:	4b38      	ldr	r3, [pc, #224]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc2:	4a2f      	ldr	r2, [pc, #188]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fec:	4a24      	ldr	r2, [pc, #144]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff2:	4b23      	ldr	r3, [pc, #140]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002016:	4a1a      	ldr	r2, [pc, #104]	; (8002080 <HAL_GPIO_Init+0x304>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_GPIO_Init+0x304>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002040:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <HAL_GPIO_Init+0x304>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3301      	adds	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	f67f aea2 	bls.w	8001d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800
 8002068:	40013800 	.word	0x40013800
 800206c:	40020000 	.word	0x40020000
 8002070:	40020400 	.word	0x40020400
 8002074:	40020800 	.word	0x40020800
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40021000 	.word	0x40021000
 8002080:	40013c00 	.word	0x40013c00

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020c8:	887a      	ldrh	r2, [r7, #2]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	041a      	lsls	r2, r3, #16
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	887b      	ldrh	r3, [r7, #2]
 80020d6:	400b      	ands	r3, r1
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	619a      	str	r2, [r3, #24]
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e264      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d075      	beq.n	80021f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800210a:	4ba3      	ldr	r3, [pc, #652]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b04      	cmp	r3, #4
 8002114:	d00c      	beq.n	8002130 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002116:	4ba0      	ldr	r3, [pc, #640]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211e:	2b08      	cmp	r3, #8
 8002120:	d112      	bne.n	8002148 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002122:	4b9d      	ldr	r3, [pc, #628]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800212e:	d10b      	bne.n	8002148 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	4b99      	ldr	r3, [pc, #612]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d05b      	beq.n	80021f4 <HAL_RCC_OscConfig+0x108>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d157      	bne.n	80021f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e23f      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002150:	d106      	bne.n	8002160 <HAL_RCC_OscConfig+0x74>
 8002152:	4b91      	ldr	r3, [pc, #580]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a90      	ldr	r2, [pc, #576]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e01d      	b.n	800219c <HAL_RCC_OscConfig+0xb0>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x98>
 800216a:	4b8b      	ldr	r3, [pc, #556]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a8a      	ldr	r2, [pc, #552]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b88      	ldr	r3, [pc, #544]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a87      	ldr	r2, [pc, #540]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0xb0>
 8002184:	4b84      	ldr	r3, [pc, #528]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a83      	ldr	r2, [pc, #524]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800218a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b81      	ldr	r3, [pc, #516]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a80      	ldr	r2, [pc, #512]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d013      	beq.n	80021cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff f8fa 	bl	800139c <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff f8f6 	bl	800139c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e204      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b76      	ldr	r3, [pc, #472]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0xc0>
 80021ca:	e014      	b.n	80021f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff f8e6 	bl	800139c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d4:	f7ff f8e2 	bl	800139c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e1f0      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0xe8>
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d063      	beq.n	80022ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00b      	beq.n	8002226 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220e:	4b62      	ldr	r3, [pc, #392]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002216:	2b08      	cmp	r3, #8
 8002218:	d11c      	bne.n	8002254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800221a:	4b5f      	ldr	r3, [pc, #380]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d116      	bne.n	8002254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002226:	4b5c      	ldr	r3, [pc, #368]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_RCC_OscConfig+0x152>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e1c4      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223e:	4b56      	ldr	r3, [pc, #344]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4952      	ldr	r1, [pc, #328]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	e03a      	b.n	80022ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800225c:	4b4f      	ldr	r3, [pc, #316]	; (800239c <HAL_RCC_OscConfig+0x2b0>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7ff f89b 	bl	800139c <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226a:	f7ff f897 	bl	800139c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e1a5      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002288:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4940      	ldr	r1, [pc, #256]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
 800229c:	e015      	b.n	80022ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <HAL_RCC_OscConfig+0x2b0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a4:	f7ff f87a 	bl	800139c <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ac:	f7ff f876 	bl	800139c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e184      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d030      	beq.n	8002338 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d016      	beq.n	800230c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022de:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <HAL_RCC_OscConfig+0x2b4>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7ff f85a 	bl	800139c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ec:	f7ff f856 	bl	800139c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e164      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x200>
 800230a:	e015      	b.n	8002338 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_RCC_OscConfig+0x2b4>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002312:	f7ff f843 	bl	800139c <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231a:	f7ff f83f 	bl	800139c <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e14d      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800232e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a0 	beq.w	8002486 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10f      	bne.n	8002376 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_OscConfig+0x2b8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d121      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_RCC_OscConfig+0x2b8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <HAL_RCC_OscConfig+0x2b8>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7ff f805 	bl	800139c <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	e011      	b.n	80023ba <HAL_RCC_OscConfig+0x2ce>
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	42470000 	.word	0x42470000
 80023a0:	42470e80 	.word	0x42470e80
 80023a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a8:	f7fe fff8 	bl	800139c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e106      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b85      	ldr	r3, [pc, #532]	; (80025d0 <HAL_RCC_OscConfig+0x4e4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x2f0>
 80023ce:	4b81      	ldr	r3, [pc, #516]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a80      	ldr	r2, [pc, #512]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70
 80023da:	e01c      	b.n	8002416 <HAL_RCC_OscConfig+0x32a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0x312>
 80023e4:	4b7b      	ldr	r3, [pc, #492]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a7a      	ldr	r2, [pc, #488]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
 80023f0:	4b78      	ldr	r3, [pc, #480]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a77      	ldr	r2, [pc, #476]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
 80023fc:	e00b      	b.n	8002416 <HAL_RCC_OscConfig+0x32a>
 80023fe:	4b75      	ldr	r3, [pc, #468]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	4a74      	ldr	r2, [pc, #464]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6713      	str	r3, [r2, #112]	; 0x70
 800240a:	4b72      	ldr	r3, [pc, #456]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a71      	ldr	r2, [pc, #452]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d015      	beq.n	800244a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241e:	f7fe ffbd 	bl	800139c <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe ffb9 	bl	800139c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0c5      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	4b65      	ldr	r3, [pc, #404]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ee      	beq.n	8002426 <HAL_RCC_OscConfig+0x33a>
 8002448:	e014      	b.n	8002474 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7fe ffa7 	bl	800139c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe ffa3 	bl	800139c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0af      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	4b5a      	ldr	r3, [pc, #360]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ee      	bne.n	8002452 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247a:	4b56      	ldr	r3, [pc, #344]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a55      	ldr	r2, [pc, #340]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 8002480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 809b 	beq.w	80025c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002490:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d05c      	beq.n	8002556 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d141      	bne.n	8002528 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a4:	4b4c      	ldr	r3, [pc, #304]	; (80025d8 <HAL_RCC_OscConfig+0x4ec>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe ff77 	bl	800139c <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b2:	f7fe ff73 	bl	800139c <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e081      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c4:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	019b      	lsls	r3, r3, #6
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	085b      	lsrs	r3, r3, #1
 80024e8:	3b01      	subs	r3, #1
 80024ea:	041b      	lsls	r3, r3, #16
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	061b      	lsls	r3, r3, #24
 80024f4:	4937      	ldr	r1, [pc, #220]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <HAL_RCC_OscConfig+0x4ec>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe ff4c 	bl	800139c <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe ff48 	bl	800139c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e056      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	4b2e      	ldr	r3, [pc, #184]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x41c>
 8002526:	e04e      	b.n	80025c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_OscConfig+0x4ec>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe ff35 	bl	800139c <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe ff31 	bl	800139c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e03f      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002548:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x44a>
 8002554:	e037      	b.n	80025c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e032      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002562:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <HAL_RCC_OscConfig+0x4e8>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d028      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d121      	bne.n	80025c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d11a      	bne.n	80025c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002592:	4013      	ands	r3, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002598:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800259a:	4293      	cmp	r3, r2
 800259c:	d111      	bne.n	80025c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	085b      	lsrs	r3, r3, #1
 80025aa:	3b01      	subs	r3, #1
 80025ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40007000 	.word	0x40007000
 80025d4:	40023800 	.word	0x40023800
 80025d8:	42470060 	.word	0x42470060

080025dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0cc      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025f0:	4b68      	ldr	r3, [pc, #416]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d90c      	bls.n	8002618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b65      	ldr	r3, [pc, #404]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b63      	ldr	r3, [pc, #396]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0b8      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002630:	4b59      	ldr	r3, [pc, #356]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a58      	ldr	r2, [pc, #352]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800263a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4a52      	ldr	r2, [pc, #328]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002654:	4b50      	ldr	r3, [pc, #320]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	494d      	ldr	r1, [pc, #308]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d044      	beq.n	80026fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d119      	bne.n	80026ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e07f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d003      	beq.n	800269a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002696:	2b03      	cmp	r3, #3
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269a:	4b3f      	ldr	r3, [pc, #252]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e06f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e067      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ba:	4b37      	ldr	r3, [pc, #220]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f023 0203 	bic.w	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4934      	ldr	r1, [pc, #208]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026cc:	f7fe fe66 	bl	800139c <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d4:	f7fe fe62 	bl	800139c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e04f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 020c 	and.w	r2, r3, #12
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d1eb      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026fc:	4b25      	ldr	r3, [pc, #148]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d20c      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b22      	ldr	r3, [pc, #136]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e032      	b.n	800278a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4916      	ldr	r1, [pc, #88]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	490e      	ldr	r1, [pc, #56]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002762:	f000 f821 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8002766:	4602      	mov	r2, r0
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	490a      	ldr	r1, [pc, #40]	; (800279c <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	5ccb      	ldrb	r3, [r1, r3]
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fcae 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023c00 	.word	0x40023c00
 8002798:	40023800 	.word	0x40023800
 800279c:	08008478 	.word	0x08008478
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000004 	.word	0x20000004

080027a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	b5b0      	push	{r4, r5, r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ae:	2100      	movs	r1, #0
 80027b0:	6079      	str	r1, [r7, #4]
 80027b2:	2100      	movs	r1, #0
 80027b4:	60f9      	str	r1, [r7, #12]
 80027b6:	2100      	movs	r1, #0
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027ba:	2100      	movs	r1, #0
 80027bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027be:	4952      	ldr	r1, [pc, #328]	; (8002908 <HAL_RCC_GetSysClockFreq+0x160>)
 80027c0:	6889      	ldr	r1, [r1, #8]
 80027c2:	f001 010c 	and.w	r1, r1, #12
 80027c6:	2908      	cmp	r1, #8
 80027c8:	d00d      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80027ca:	2908      	cmp	r1, #8
 80027cc:	f200 8094 	bhi.w	80028f8 <HAL_RCC_GetSysClockFreq+0x150>
 80027d0:	2900      	cmp	r1, #0
 80027d2:	d002      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x32>
 80027d4:	2904      	cmp	r1, #4
 80027d6:	d003      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x38>
 80027d8:	e08e      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027da:	4b4c      	ldr	r3, [pc, #304]	; (800290c <HAL_RCC_GetSysClockFreq+0x164>)
 80027dc:	60bb      	str	r3, [r7, #8]
       break;
 80027de:	e08e      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027e0:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <HAL_RCC_GetSysClockFreq+0x168>)
 80027e2:	60bb      	str	r3, [r7, #8]
      break;
 80027e4:	e08b      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e6:	4948      	ldr	r1, [pc, #288]	; (8002908 <HAL_RCC_GetSysClockFreq+0x160>)
 80027e8:	6849      	ldr	r1, [r1, #4]
 80027ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80027ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027f0:	4945      	ldr	r1, [pc, #276]	; (8002908 <HAL_RCC_GetSysClockFreq+0x160>)
 80027f2:	6849      	ldr	r1, [r1, #4]
 80027f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80027f8:	2900      	cmp	r1, #0
 80027fa:	d024      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fc:	4942      	ldr	r1, [pc, #264]	; (8002908 <HAL_RCC_GetSysClockFreq+0x160>)
 80027fe:	6849      	ldr	r1, [r1, #4]
 8002800:	0989      	lsrs	r1, r1, #6
 8002802:	4608      	mov	r0, r1
 8002804:	f04f 0100 	mov.w	r1, #0
 8002808:	f240 14ff 	movw	r4, #511	; 0x1ff
 800280c:	f04f 0500 	mov.w	r5, #0
 8002810:	ea00 0204 	and.w	r2, r0, r4
 8002814:	ea01 0305 	and.w	r3, r1, r5
 8002818:	493d      	ldr	r1, [pc, #244]	; (8002910 <HAL_RCC_GetSysClockFreq+0x168>)
 800281a:	fb01 f003 	mul.w	r0, r1, r3
 800281e:	2100      	movs	r1, #0
 8002820:	fb01 f102 	mul.w	r1, r1, r2
 8002824:	1844      	adds	r4, r0, r1
 8002826:	493a      	ldr	r1, [pc, #232]	; (8002910 <HAL_RCC_GetSysClockFreq+0x168>)
 8002828:	fba2 0101 	umull	r0, r1, r2, r1
 800282c:	1863      	adds	r3, r4, r1
 800282e:	4619      	mov	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	461a      	mov	r2, r3
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	f7fd fd2a 	bl	8000290 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4613      	mov	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e04a      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002846:	4b30      	ldr	r3, [pc, #192]	; (8002908 <HAL_RCC_GetSysClockFreq+0x160>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	099b      	lsrs	r3, r3, #6
 800284c:	461a      	mov	r2, r3
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	ea02 0400 	and.w	r4, r2, r0
 800285e:	ea03 0501 	and.w	r5, r3, r1
 8002862:	4620      	mov	r0, r4
 8002864:	4629      	mov	r1, r5
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	014b      	lsls	r3, r1, #5
 8002870:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002874:	0142      	lsls	r2, r0, #5
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	1b00      	subs	r0, r0, r4
 800287c:	eb61 0105 	sbc.w	r1, r1, r5
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	018b      	lsls	r3, r1, #6
 800288a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800288e:	0182      	lsls	r2, r0, #6
 8002890:	1a12      	subs	r2, r2, r0
 8002892:	eb63 0301 	sbc.w	r3, r3, r1
 8002896:	f04f 0000 	mov.w	r0, #0
 800289a:	f04f 0100 	mov.w	r1, #0
 800289e:	00d9      	lsls	r1, r3, #3
 80028a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028a4:	00d0      	lsls	r0, r2, #3
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	1912      	adds	r2, r2, r4
 80028ac:	eb45 0303 	adc.w	r3, r5, r3
 80028b0:	f04f 0000 	mov.w	r0, #0
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	0299      	lsls	r1, r3, #10
 80028ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028be:	0290      	lsls	r0, r2, #10
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	f7fd fcde 	bl	8000290 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_RCC_GetSysClockFreq+0x160>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	0c1b      	lsrs	r3, r3, #16
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	3301      	adds	r3, #1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	60bb      	str	r3, [r7, #8]
      break;
 80028f6:	e002      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <HAL_RCC_GetSysClockFreq+0x164>)
 80028fa:	60bb      	str	r3, [r7, #8]
      break;
 80028fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fe:	68bb      	ldr	r3, [r7, #8]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bdb0      	pop	{r4, r5, r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	00f42400 	.word	0x00f42400
 8002910:	017d7840 	.word	0x017d7840

08002914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_RCC_GetHCLKFreq+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000000 	.word	0x20000000

0800292c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002930:	f7ff fff0 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0a9b      	lsrs	r3, r3, #10
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4903      	ldr	r1, [pc, #12]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40023800 	.word	0x40023800
 8002950:	08008488 	.word	0x08008488

08002954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002958:	f7ff ffdc 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	0b5b      	lsrs	r3, r3, #13
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4903      	ldr	r1, [pc, #12]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40023800 	.word	0x40023800
 8002978:	08008488 	.word	0x08008488

0800297c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	220f      	movs	r2, #15
 800298a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_GetClockConfig+0x5c>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0203 	and.w	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <HAL_RCC_GetClockConfig+0x5c>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <HAL_RCC_GetClockConfig+0x5c>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_RCC_GetClockConfig+0x5c>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	08db      	lsrs	r3, r3, #3
 80029b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <HAL_RCC_GetClockConfig+0x60>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0207 	and.w	r2, r3, #7
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	601a      	str	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40023c00 	.word	0x40023c00

080029e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e041      	b.n	8002a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f839 	bl	8002a7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f000 f9ca 	bl	8002db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d001      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e044      	b.n	8002b36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_TIM_Base_Start_IT+0xb0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d018      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x6c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad6:	d013      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x6c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a19      	ldr	r2, [pc, #100]	; (8002b4c <HAL_TIM_Base_Start_IT+0xb8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d009      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x6c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a17      	ldr	r2, [pc, #92]	; (8002b50 <HAL_TIM_Base_Start_IT+0xbc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x6c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a16      	ldr	r2, [pc, #88]	; (8002b54 <HAL_TIM_Base_Start_IT+0xc0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d111      	bne.n	8002b24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d010      	beq.n	8002b34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	e007      	b.n	8002b34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40010000 	.word	0x40010000
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800
 8002b50:	40000c00 	.word	0x40000c00
 8002b54:	40014000 	.word	0x40014000

08002b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d122      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0202 	mvn.w	r2, #2
 8002b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8ee 	bl	8002d7c <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f8e0 	bl	8002d68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f8f1 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0204 	mvn.w	r2, #4
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8c4 	bl	8002d7c <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8b6 	bl	8002d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f8c7 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d122      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d11b      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0208 	mvn.w	r2, #8
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2204      	movs	r2, #4
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f89a 	bl	8002d7c <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f88c 	bl	8002d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f89d 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d122      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0210 	mvn.w	r2, #16
 8002c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2208      	movs	r2, #8
 8002c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f870 	bl	8002d7c <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f862 	bl	8002d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f873 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d10e      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d107      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0201 	mvn.w	r2, #1
 8002cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe f860 	bl	8000d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	2b80      	cmp	r3, #128	; 0x80
 8002ce8:	d10e      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d107      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f8e2 	bl	8002ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d10e      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d107      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f838 	bl	8002da4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d10e      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d107      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0220 	mvn.w	r2, #32
 8002d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8ac 	bl	8002eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a34      	ldr	r2, [pc, #208]	; (8002e9c <TIM_Base_SetConfig+0xe4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00f      	beq.n	8002df0 <TIM_Base_SetConfig+0x38>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd6:	d00b      	beq.n	8002df0 <TIM_Base_SetConfig+0x38>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a31      	ldr	r2, [pc, #196]	; (8002ea0 <TIM_Base_SetConfig+0xe8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d007      	beq.n	8002df0 <TIM_Base_SetConfig+0x38>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a30      	ldr	r2, [pc, #192]	; (8002ea4 <TIM_Base_SetConfig+0xec>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_Base_SetConfig+0x38>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a2f      	ldr	r2, [pc, #188]	; (8002ea8 <TIM_Base_SetConfig+0xf0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d108      	bne.n	8002e02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a25      	ldr	r2, [pc, #148]	; (8002e9c <TIM_Base_SetConfig+0xe4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01b      	beq.n	8002e42 <TIM_Base_SetConfig+0x8a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e10:	d017      	beq.n	8002e42 <TIM_Base_SetConfig+0x8a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <TIM_Base_SetConfig+0xe8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <TIM_Base_SetConfig+0x8a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a21      	ldr	r2, [pc, #132]	; (8002ea4 <TIM_Base_SetConfig+0xec>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00f      	beq.n	8002e42 <TIM_Base_SetConfig+0x8a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a20      	ldr	r2, [pc, #128]	; (8002ea8 <TIM_Base_SetConfig+0xf0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00b      	beq.n	8002e42 <TIM_Base_SetConfig+0x8a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <TIM_Base_SetConfig+0xf4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d007      	beq.n	8002e42 <TIM_Base_SetConfig+0x8a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <TIM_Base_SetConfig+0xf8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d003      	beq.n	8002e42 <TIM_Base_SetConfig+0x8a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <TIM_Base_SetConfig+0xfc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d108      	bne.n	8002e54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <TIM_Base_SetConfig+0xe4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d103      	bne.n	8002e88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	615a      	str	r2, [r3, #20]
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800
 8002ea8:	40000c00 	.word	0x40000c00
 8002eac:	40014000 	.word	0x40014000
 8002eb0:	40014400 	.word	0x40014400
 8002eb4:	40014800 	.word	0x40014800

08002eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e03f      	b.n	8002f72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fd ff8c 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2224      	movs	r2, #36	; 0x24
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f001 f873 	bl	8004010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b08a      	sub	sp, #40	; 0x28
 8002f7e:	af02      	add	r7, sp, #8
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d17c      	bne.n	8003094 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_UART_Transmit+0x2c>
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e075      	b.n	8003096 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_UART_Transmit+0x3e>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e06e      	b.n	8003096 <HAL_UART_Transmit+0x11c>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2221      	movs	r2, #33	; 0x21
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fce:	f7fe f9e5 	bl	800139c <HAL_GetTick>
 8002fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	88fa      	ldrh	r2, [r7, #6]
 8002fd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	88fa      	ldrh	r2, [r7, #6]
 8002fde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe8:	d108      	bne.n	8002ffc <HAL_UART_Transmit+0x82>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d104      	bne.n	8002ffc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	e003      	b.n	8003004 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800300c:	e02a      	b.n	8003064 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2200      	movs	r2, #0
 8003016:	2180      	movs	r1, #128	; 0x80
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 fd2e 	bl	8003a7a <UART_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e036      	b.n	8003096 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800303c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	3302      	adds	r3, #2
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	e007      	b.n	8003056 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	781a      	ldrb	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	3301      	adds	r3, #1
 8003054:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1cf      	bne.n	800300e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2200      	movs	r2, #0
 8003076:	2140      	movs	r1, #64	; 0x40
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 fcfe 	bl	8003a7a <UART_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e006      	b.n	8003096 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	; 0x30
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d165      	bne.n	8003186 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_UART_Transmit_DMA+0x26>
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e05e      	b.n	8003188 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Transmit_DMA+0x38>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e057      	b.n	8003188 <HAL_UART_Transmit_DMA+0xe8>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2221      	movs	r2, #33	; 0x21
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003104:	4a22      	ldr	r2, [pc, #136]	; (8003190 <HAL_UART_Transmit_DMA+0xf0>)
 8003106:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	4a21      	ldr	r2, [pc, #132]	; (8003194 <HAL_UART_Transmit_DMA+0xf4>)
 800310e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	4a20      	ldr	r2, [pc, #128]	; (8003198 <HAL_UART_Transmit_DMA+0xf8>)
 8003116:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311c:	2200      	movs	r2, #0
 800311e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003120:	f107 0308 	add.w	r3, r7, #8
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	6819      	ldr	r1, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3304      	adds	r3, #4
 8003134:	461a      	mov	r2, r3
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	f7fe facc 	bl	80016d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003144:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3314      	adds	r3, #20
 8003154:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	617b      	str	r3, [r7, #20]
   return(result);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3314      	adds	r3, #20
 800316c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316e:	627a      	str	r2, [r7, #36]	; 0x24
 8003170:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	6a39      	ldr	r1, [r7, #32]
 8003174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	61fb      	str	r3, [r7, #28]
   return(result);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e5      	bne.n	800314e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3730      	adds	r7, #48	; 0x30
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	080037d5 	.word	0x080037d5
 8003194:	0800386f 	.word	0x0800386f
 8003198:	080039e7 	.word	0x080039e7

0800319c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08c      	sub	sp, #48	; 0x30
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d152      	bne.n	800325c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e04b      	b.n	800325e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e044      	b.n	800325e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	461a      	mov	r2, r3
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fcb5 	bl	8003b58 <UART_Start_Receive_DMA>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80031f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d12c      	bne.n	8003256 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	2b01      	cmp	r3, #1
 8003202:	d125      	bne.n	8003250 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	617b      	str	r3, [r7, #20]
   return(result);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f043 0310 	orr.w	r3, r3, #16
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	330c      	adds	r3, #12
 8003238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800323a:	627a      	str	r2, [r7, #36]	; 0x24
 800323c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	6a39      	ldr	r1, [r7, #32]
 8003240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	61fb      	str	r3, [r7, #28]
   return(result);
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e5      	bne.n	800321a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800324e:	e002      	b.n	8003256 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800325a:	e000      	b.n	800325e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800325c:	2302      	movs	r3, #2
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	3730      	adds	r7, #48	; 0x30
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b0ba      	sub	sp, #232	; 0xe8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800328e:	2300      	movs	r3, #0
 8003290:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003294:	2300      	movs	r3, #0
 8003296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800329a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80032a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10f      	bne.n	80032ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <HAL_UART_IRQHandler+0x66>
 80032ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fde7 	bl	8003e9a <UART_Receive_IT>
      return;
 80032cc:	e256      	b.n	800377c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80de 	beq.w	8003494 <HAL_UART_IRQHandler+0x22c>
 80032d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d106      	bne.n	80032f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80d1 	beq.w	8003494 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_UART_IRQHandler+0xae>
 80032fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f043 0201 	orr.w	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_UART_IRQHandler+0xd2>
 8003322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f043 0202 	orr.w	r2, r3, #2
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800333a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00b      	beq.n	800335e <HAL_UART_IRQHandler+0xf6>
 8003346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f043 0204 	orr.w	r2, r3, #4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800335e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d011      	beq.n	800338e <HAL_UART_IRQHandler+0x126>
 800336a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	d105      	bne.n	8003382 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f043 0208 	orr.w	r2, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 81ed 	beq.w	8003772 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_UART_IRQHandler+0x14e>
 80033a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fd72 	bl	8003e9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <HAL_UART_IRQHandler+0x17a>
 80033da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d04f      	beq.n	8003482 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fc7a 	bl	8003cdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	d141      	bne.n	800347a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3314      	adds	r3, #20
 80033fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800340c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3314      	adds	r3, #20
 800341e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003422:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800342e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003432:	e841 2300 	strex	r3, r2, [r1]
 8003436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800343a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1d9      	bne.n	80033f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	2b00      	cmp	r3, #0
 8003448:	d013      	beq.n	8003472 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	4a7d      	ldr	r2, [pc, #500]	; (8003644 <HAL_UART_IRQHandler+0x3dc>)
 8003450:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fa04 	bl	8001864 <HAL_DMA_Abort_IT>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d016      	beq.n	8003490 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800346c:	4610      	mov	r0, r2
 800346e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003470:	e00e      	b.n	8003490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f9a4 	bl	80037c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003478:	e00a      	b.n	8003490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f9a0 	bl	80037c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003480:	e006      	b.n	8003490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f99c 	bl	80037c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800348e:	e170      	b.n	8003772 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003490:	bf00      	nop
    return;
 8003492:	e16e      	b.n	8003772 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	2b01      	cmp	r3, #1
 800349a:	f040 814a 	bne.w	8003732 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 8143 	beq.w	8003732 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 813c 	beq.w	8003732 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	f040 80b4 	bne.w	8003648 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8140 	beq.w	8003776 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034fe:	429a      	cmp	r2, r3
 8003500:	f080 8139 	bcs.w	8003776 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800350a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003516:	f000 8088 	beq.w	800362a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	330c      	adds	r3, #12
 8003520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003530:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003546:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800354a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003552:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800355e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1d9      	bne.n	800351a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3314      	adds	r3, #20
 800356c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3314      	adds	r3, #20
 8003586:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800358a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800358e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003592:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800359c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e1      	bne.n	8003566 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3314      	adds	r3, #20
 80035c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e3      	bne.n	80035a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	330c      	adds	r3, #12
 80035ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fa:	f023 0310 	bic.w	r3, r3, #16
 80035fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800360c:	65ba      	str	r2, [r7, #88]	; 0x58
 800360e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003612:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800361a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e3      	bne.n	80035e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe f8ad 	bl	8001784 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003632:	b29b      	uxth	r3, r3
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	b29b      	uxth	r3, r3
 8003638:	4619      	mov	r1, r3
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fc ffa4 	bl	8000588 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003640:	e099      	b.n	8003776 <HAL_UART_IRQHandler+0x50e>
 8003642:	bf00      	nop
 8003644:	08003da3 	.word	0x08003da3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003650:	b29b      	uxth	r3, r3
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 808b 	beq.w	800377a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8086 	beq.w	800377a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003684:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003692:	647a      	str	r2, [r7, #68]	; 0x44
 8003694:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e3      	bne.n	800366e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3314      	adds	r3, #20
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	623b      	str	r3, [r7, #32]
   return(result);
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3314      	adds	r3, #20
 80036c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036ca:	633a      	str	r2, [r7, #48]	; 0x30
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e3      	bne.n	80036a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	330c      	adds	r3, #12
 80036f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0310 	bic.w	r3, r3, #16
 8003702:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003710:	61fa      	str	r2, [r7, #28]
 8003712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	69b9      	ldr	r1, [r7, #24]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	e841 2300 	strex	r3, r2, [r1]
 800371c:	617b      	str	r3, [r7, #20]
   return(result);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e3      	bne.n	80036ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003728:	4619      	mov	r1, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fc ff2c 	bl	8000588 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003730:	e023      	b.n	800377a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_UART_IRQHandler+0x4ea>
 800373e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fb3d 	bl	8003dca <UART_Transmit_IT>
    return;
 8003750:	e014      	b.n	800377c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00e      	beq.n	800377c <HAL_UART_IRQHandler+0x514>
 800375e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fb7d 	bl	8003e6a <UART_EndTransmit_IT>
    return;
 8003770:	e004      	b.n	800377c <HAL_UART_IRQHandler+0x514>
    return;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <HAL_UART_IRQHandler+0x514>
      return;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <HAL_UART_IRQHandler+0x514>
      return;
 800377a:	bf00      	nop
  }
}
 800377c:	37e8      	adds	r7, #232	; 0xe8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop

08003784 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b090      	sub	sp, #64	; 0x40
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d137      	bne.n	8003860 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80037f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f2:	2200      	movs	r2, #0
 80037f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3314      	adds	r3, #20
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	e853 3f00 	ldrex	r3, [r3]
 8003804:	623b      	str	r3, [r7, #32]
   return(result);
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
 800380e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3314      	adds	r3, #20
 8003814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003816:	633a      	str	r2, [r7, #48]	; 0x30
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800381c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e5      	bne.n	80037f6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800382a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	60fb      	str	r3, [r7, #12]
   return(result);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003840:	637b      	str	r3, [r7, #52]	; 0x34
 8003842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800384a:	61fa      	str	r2, [r7, #28]
 800384c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	69b9      	ldr	r1, [r7, #24]
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	617b      	str	r3, [r7, #20]
   return(result);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e5      	bne.n	800382a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800385e:	e002      	b.n	8003866 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003860:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003862:	f7fc ff7f 	bl	8000764 <HAL_UART_TxCpltCallback>
}
 8003866:	bf00      	nop
 8003868:	3740      	adds	r7, #64	; 0x40
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f7ff ff81 	bl	8003784 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b09c      	sub	sp, #112	; 0x70
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d172      	bne.n	800398c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80038a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a8:	2200      	movs	r2, #0
 80038aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80038c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80038ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e5      	bne.n	80038ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3314      	adds	r3, #20
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	667b      	str	r3, [r7, #100]	; 0x64
 80038f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3314      	adds	r3, #20
 80038fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003900:	647a      	str	r2, [r7, #68]	; 0x44
 8003902:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800390e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e5      	bne.n	80038e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3314      	adds	r3, #20
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	623b      	str	r3, [r7, #32]
   return(result);
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800392a:	663b      	str	r3, [r7, #96]	; 0x60
 800392c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3314      	adds	r3, #20
 8003932:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003934:	633a      	str	r2, [r7, #48]	; 0x30
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800393a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e5      	bne.n	8003914 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	2b01      	cmp	r3, #1
 8003956:	d119      	bne.n	800398c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	60fb      	str	r3, [r7, #12]
   return(result);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0310 	bic.w	r3, r3, #16
 800396e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003978:	61fa      	str	r2, [r7, #28]
 800397a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	69b9      	ldr	r1, [r7, #24]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	617b      	str	r3, [r7, #20]
   return(result);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e5      	bne.n	8003958 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	2b01      	cmp	r3, #1
 8003992:	d106      	bne.n	80039a2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003996:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003998:	4619      	mov	r1, r3
 800399a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800399c:	f7fc fdf4 	bl	8000588 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039a0:	e002      	b.n	80039a8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80039a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80039a4:	f7ff fef8 	bl	8003798 <HAL_UART_RxCpltCallback>
}
 80039a8:	bf00      	nop
 80039aa:	3770      	adds	r7, #112	; 0x70
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d108      	bne.n	80039d8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	4619      	mov	r1, r3
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f7fc fdd9 	bl	8000588 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039d6:	e002      	b.n	80039de <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff fee7 	bl	80037ac <HAL_UART_RxHalfCpltCallback>
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b21      	cmp	r3, #33	; 0x21
 8003a18:	d108      	bne.n	8003a2c <UART_DMAError+0x46>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2200      	movs	r2, #0
 8003a24:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003a26:	68b8      	ldr	r0, [r7, #8]
 8003a28:	f000 f930 	bl	8003c8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	bf0c      	ite	eq
 8003a3a:	2301      	moveq	r3, #1
 8003a3c:	2300      	movne	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b22      	cmp	r3, #34	; 0x22
 8003a4c:	d108      	bne.n	8003a60 <UART_DMAError+0x7a>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2200      	movs	r2, #0
 8003a58:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003a5a:	68b8      	ldr	r0, [r7, #8]
 8003a5c:	f000 f93e 	bl	8003cdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	f043 0210 	orr.w	r2, r3, #16
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a6c:	68b8      	ldr	r0, [r7, #8]
 8003a6e:	f7ff fea7 	bl	80037c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b090      	sub	sp, #64	; 0x40
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4613      	mov	r3, r2
 8003a88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a8a:	e050      	b.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d04c      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x30>
 8003a9a:	f7fd fc7f 	bl	800139c <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d241      	bcs.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aca:	637a      	str	r2, [r7, #52]	; 0x34
 8003acc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e5      	bne.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3314      	adds	r3, #20
 8003ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	613b      	str	r3, [r7, #16]
   return(result);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3314      	adds	r3, #20
 8003afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003afe:	623a      	str	r2, [r7, #32]
 8003b00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	69f9      	ldr	r1, [r7, #28]
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e5      	bne.n	8003ade <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e00f      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4013      	ands	r3, r2
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	bf0c      	ite	eq
 8003b3e:	2301      	moveq	r3, #1
 8003b40:	2300      	movne	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d09f      	beq.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3740      	adds	r7, #64	; 0x40
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b098      	sub	sp, #96	; 0x60
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2222      	movs	r2, #34	; 0x22
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	4a3e      	ldr	r2, [pc, #248]	; (8003c80 <UART_Start_Receive_DMA+0x128>)
 8003b86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	4a3d      	ldr	r2, [pc, #244]	; (8003c84 <UART_Start_Receive_DMA+0x12c>)
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	4a3c      	ldr	r2, [pc, #240]	; (8003c88 <UART_Start_Receive_DMA+0x130>)
 8003b96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ba0:	f107 0308 	add.w	r3, r7, #8
 8003ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	f7fd fd8c 	bl	80016d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	330c      	adds	r3, #12
 8003be0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bfa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003bfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e5      	bne.n	8003bda <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3314      	adds	r3, #20
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	657b      	str	r3, [r7, #84]	; 0x54
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e5      	bne.n	8003c0e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	617b      	str	r3, [r7, #20]
   return(result);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c58:	653b      	str	r3, [r7, #80]	; 0x50
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3314      	adds	r3, #20
 8003c60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c62:	627a      	str	r2, [r7, #36]	; 0x24
 8003c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6a39      	ldr	r1, [r7, #32]
 8003c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e5      	bne.n	8003c42 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3760      	adds	r7, #96	; 0x60
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	0800388b 	.word	0x0800388b
 8003c84:	080039b1 	.word	0x080039b1
 8003c88:	080039e7 	.word	0x080039e7

08003c8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	; 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	61ba      	str	r2, [r7, #24]
 8003cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6979      	ldr	r1, [r7, #20]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e5      	bne.n	8003c94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003cd0:	bf00      	nop
 8003cd2:	3724      	adds	r7, #36	; 0x24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b095      	sub	sp, #84	; 0x54
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	330c      	adds	r3, #12
 8003d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d04:	643a      	str	r2, [r7, #64]	; 0x40
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e5      	bne.n	8003ce4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3314      	adds	r3, #20
 8003d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3314      	adds	r3, #20
 8003d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e5      	bne.n	8003d18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d119      	bne.n	8003d88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f023 0310 	bic.w	r3, r3, #16
 8003d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d74:	61ba      	str	r2, [r7, #24]
 8003d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6979      	ldr	r1, [r7, #20]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	613b      	str	r3, [r7, #16]
   return(result);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e5      	bne.n	8003d54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d96:	bf00      	nop
 8003d98:	3754      	adds	r7, #84	; 0x54
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f7ff fcff 	bl	80037c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b21      	cmp	r3, #33	; 0x21
 8003ddc:	d13e      	bne.n	8003e5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de6:	d114      	bne.n	8003e12 <UART_Transmit_IT+0x48>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d110      	bne.n	8003e12 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	1c9a      	adds	r2, r3, #2
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	621a      	str	r2, [r3, #32]
 8003e10:	e008      	b.n	8003e24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	1c59      	adds	r1, r3, #1
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6211      	str	r1, [r2, #32]
 8003e1c:	781a      	ldrb	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4619      	mov	r1, r3
 8003e32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10f      	bne.n	8003e58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fc fc6a 	bl	8000764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b08c      	sub	sp, #48	; 0x30
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b22      	cmp	r3, #34	; 0x22
 8003eac:	f040 80ab 	bne.w	8004006 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb8:	d117      	bne.n	8003eea <UART_Receive_IT+0x50>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d113      	bne.n	8003eea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	1c9a      	adds	r2, r3, #2
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee8:	e026      	b.n	8003f38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efc:	d007      	beq.n	8003f0e <UART_Receive_IT+0x74>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <UART_Receive_IT+0x82>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	e008      	b.n	8003f2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4619      	mov	r1, r3
 8003f46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d15a      	bne.n	8004002 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0220 	bic.w	r2, r2, #32
 8003f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0201 	bic.w	r2, r2, #1
 8003f7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d135      	bne.n	8003ff8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f023 0310 	bic.w	r3, r3, #16
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	623a      	str	r2, [r7, #32]
 8003fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	69f9      	ldr	r1, [r7, #28]
 8003fb8:	6a3a      	ldr	r2, [r7, #32]
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e5      	bne.n	8003f92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b10      	cmp	r3, #16
 8003fd2:	d10a      	bne.n	8003fea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fc fac9 	bl	8000588 <HAL_UARTEx_RxEventCallback>
 8003ff6:	e002      	b.n	8003ffe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff fbcd 	bl	8003798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e002      	b.n	8004008 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e000      	b.n	8004008 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
  }
}
 8004008:	4618      	mov	r0, r3
 800400a:	3730      	adds	r7, #48	; 0x30
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004014:	b09f      	sub	sp, #124	; 0x7c
 8004016:	af00      	add	r7, sp, #0
 8004018:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800401a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004026:	68d9      	ldr	r1, [r3, #12]
 8004028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	ea40 0301 	orr.w	r3, r0, r1
 8004030:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	431a      	orrs	r2, r3
 800403c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	431a      	orrs	r2, r3
 8004042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	4313      	orrs	r3, r2
 8004048:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800404a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004054:	f021 010c 	bic.w	r1, r1, #12
 8004058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800405e:	430b      	orrs	r3, r1
 8004060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800406c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406e:	6999      	ldr	r1, [r3, #24]
 8004070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	ea40 0301 	orr.w	r3, r0, r1
 8004078:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800407a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4bc5      	ldr	r3, [pc, #788]	; (8004394 <UART_SetConfig+0x384>)
 8004080:	429a      	cmp	r2, r3
 8004082:	d004      	beq.n	800408e <UART_SetConfig+0x7e>
 8004084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4bc3      	ldr	r3, [pc, #780]	; (8004398 <UART_SetConfig+0x388>)
 800408a:	429a      	cmp	r2, r3
 800408c:	d103      	bne.n	8004096 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800408e:	f7fe fc61 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 8004092:	6778      	str	r0, [r7, #116]	; 0x74
 8004094:	e002      	b.n	800409c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004096:	f7fe fc49 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 800409a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800409c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a4:	f040 80b6 	bne.w	8004214 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040aa:	461c      	mov	r4, r3
 80040ac:	f04f 0500 	mov.w	r5, #0
 80040b0:	4622      	mov	r2, r4
 80040b2:	462b      	mov	r3, r5
 80040b4:	1891      	adds	r1, r2, r2
 80040b6:	6439      	str	r1, [r7, #64]	; 0x40
 80040b8:	415b      	adcs	r3, r3
 80040ba:	647b      	str	r3, [r7, #68]	; 0x44
 80040bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040c0:	1912      	adds	r2, r2, r4
 80040c2:	eb45 0303 	adc.w	r3, r5, r3
 80040c6:	f04f 0000 	mov.w	r0, #0
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	00d9      	lsls	r1, r3, #3
 80040d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d4:	00d0      	lsls	r0, r2, #3
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	1911      	adds	r1, r2, r4
 80040dc:	6639      	str	r1, [r7, #96]	; 0x60
 80040de:	416b      	adcs	r3, r5
 80040e0:	667b      	str	r3, [r7, #100]	; 0x64
 80040e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	1891      	adds	r1, r2, r2
 80040ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80040f0:	415b      	adcs	r3, r3
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80040fc:	f7fc f8c8 	bl	8000290 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4ba5      	ldr	r3, [pc, #660]	; (800439c <UART_SetConfig+0x38c>)
 8004106:	fba3 2302 	umull	r2, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	011e      	lsls	r6, r3, #4
 800410e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004110:	461c      	mov	r4, r3
 8004112:	f04f 0500 	mov.w	r5, #0
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	1891      	adds	r1, r2, r2
 800411c:	6339      	str	r1, [r7, #48]	; 0x30
 800411e:	415b      	adcs	r3, r3
 8004120:	637b      	str	r3, [r7, #52]	; 0x34
 8004122:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004126:	1912      	adds	r2, r2, r4
 8004128:	eb45 0303 	adc.w	r3, r5, r3
 800412c:	f04f 0000 	mov.w	r0, #0
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	00d9      	lsls	r1, r3, #3
 8004136:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800413a:	00d0      	lsls	r0, r2, #3
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	1911      	adds	r1, r2, r4
 8004142:	65b9      	str	r1, [r7, #88]	; 0x58
 8004144:	416b      	adcs	r3, r5
 8004146:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	461a      	mov	r2, r3
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	1891      	adds	r1, r2, r2
 8004154:	62b9      	str	r1, [r7, #40]	; 0x28
 8004156:	415b      	adcs	r3, r3
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800415a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800415e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004162:	f7fc f895 	bl	8000290 <__aeabi_uldivmod>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4b8c      	ldr	r3, [pc, #560]	; (800439c <UART_SetConfig+0x38c>)
 800416c:	fba3 1302 	umull	r1, r3, r3, r2
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	2164      	movs	r1, #100	; 0x64
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	3332      	adds	r3, #50	; 0x32
 800417e:	4a87      	ldr	r2, [pc, #540]	; (800439c <UART_SetConfig+0x38c>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800418c:	441e      	add	r6, r3
 800418e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004190:	4618      	mov	r0, r3
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	1894      	adds	r4, r2, r2
 800419c:	623c      	str	r4, [r7, #32]
 800419e:	415b      	adcs	r3, r3
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
 80041a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041a6:	1812      	adds	r2, r2, r0
 80041a8:	eb41 0303 	adc.w	r3, r1, r3
 80041ac:	f04f 0400 	mov.w	r4, #0
 80041b0:	f04f 0500 	mov.w	r5, #0
 80041b4:	00dd      	lsls	r5, r3, #3
 80041b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041ba:	00d4      	lsls	r4, r2, #3
 80041bc:	4622      	mov	r2, r4
 80041be:	462b      	mov	r3, r5
 80041c0:	1814      	adds	r4, r2, r0
 80041c2:	653c      	str	r4, [r7, #80]	; 0x50
 80041c4:	414b      	adcs	r3, r1
 80041c6:	657b      	str	r3, [r7, #84]	; 0x54
 80041c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	461a      	mov	r2, r3
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	1891      	adds	r1, r2, r2
 80041d4:	61b9      	str	r1, [r7, #24]
 80041d6:	415b      	adcs	r3, r3
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80041e2:	f7fc f855 	bl	8000290 <__aeabi_uldivmod>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4b6c      	ldr	r3, [pc, #432]	; (800439c <UART_SetConfig+0x38c>)
 80041ec:	fba3 1302 	umull	r1, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	2164      	movs	r1, #100	; 0x64
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	3332      	adds	r3, #50	; 0x32
 80041fe:	4a67      	ldr	r2, [pc, #412]	; (800439c <UART_SetConfig+0x38c>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	f003 0207 	and.w	r2, r3, #7
 800420a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4432      	add	r2, r6
 8004210:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004212:	e0b9      	b.n	8004388 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004216:	461c      	mov	r4, r3
 8004218:	f04f 0500 	mov.w	r5, #0
 800421c:	4622      	mov	r2, r4
 800421e:	462b      	mov	r3, r5
 8004220:	1891      	adds	r1, r2, r2
 8004222:	6139      	str	r1, [r7, #16]
 8004224:	415b      	adcs	r3, r3
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800422c:	1912      	adds	r2, r2, r4
 800422e:	eb45 0303 	adc.w	r3, r5, r3
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	00d9      	lsls	r1, r3, #3
 800423c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004240:	00d0      	lsls	r0, r2, #3
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	eb12 0804 	adds.w	r8, r2, r4
 800424a:	eb43 0905 	adc.w	r9, r3, r5
 800424e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4618      	mov	r0, r3
 8004254:	f04f 0100 	mov.w	r1, #0
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	008b      	lsls	r3, r1, #2
 8004262:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004266:	0082      	lsls	r2, r0, #2
 8004268:	4640      	mov	r0, r8
 800426a:	4649      	mov	r1, r9
 800426c:	f7fc f810 	bl	8000290 <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4b49      	ldr	r3, [pc, #292]	; (800439c <UART_SetConfig+0x38c>)
 8004276:	fba3 2302 	umull	r2, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	011e      	lsls	r6, r3, #4
 800427e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004280:	4618      	mov	r0, r3
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	1894      	adds	r4, r2, r2
 800428c:	60bc      	str	r4, [r7, #8]
 800428e:	415b      	adcs	r3, r3
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004296:	1812      	adds	r2, r2, r0
 8004298:	eb41 0303 	adc.w	r3, r1, r3
 800429c:	f04f 0400 	mov.w	r4, #0
 80042a0:	f04f 0500 	mov.w	r5, #0
 80042a4:	00dd      	lsls	r5, r3, #3
 80042a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042aa:	00d4      	lsls	r4, r2, #3
 80042ac:	4622      	mov	r2, r4
 80042ae:	462b      	mov	r3, r5
 80042b0:	1814      	adds	r4, r2, r0
 80042b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80042b4:	414b      	adcs	r3, r1
 80042b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	f04f 0100 	mov.w	r1, #0
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	008b      	lsls	r3, r1, #2
 80042cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042d0:	0082      	lsls	r2, r0, #2
 80042d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80042d6:	f7fb ffdb 	bl	8000290 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4b2f      	ldr	r3, [pc, #188]	; (800439c <UART_SetConfig+0x38c>)
 80042e0:	fba3 1302 	umull	r1, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	2164      	movs	r1, #100	; 0x64
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	3332      	adds	r3, #50	; 0x32
 80042f2:	4a2a      	ldr	r2, [pc, #168]	; (800439c <UART_SetConfig+0x38c>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fe:	441e      	add	r6, r3
 8004300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004302:	4618      	mov	r0, r3
 8004304:	f04f 0100 	mov.w	r1, #0
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	1894      	adds	r4, r2, r2
 800430e:	603c      	str	r4, [r7, #0]
 8004310:	415b      	adcs	r3, r3
 8004312:	607b      	str	r3, [r7, #4]
 8004314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004318:	1812      	adds	r2, r2, r0
 800431a:	eb41 0303 	adc.w	r3, r1, r3
 800431e:	f04f 0400 	mov.w	r4, #0
 8004322:	f04f 0500 	mov.w	r5, #0
 8004326:	00dd      	lsls	r5, r3, #3
 8004328:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800432c:	00d4      	lsls	r4, r2, #3
 800432e:	4622      	mov	r2, r4
 8004330:	462b      	mov	r3, r5
 8004332:	eb12 0a00 	adds.w	sl, r2, r0
 8004336:	eb43 0b01 	adc.w	fp, r3, r1
 800433a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4618      	mov	r0, r3
 8004340:	f04f 0100 	mov.w	r1, #0
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	008b      	lsls	r3, r1, #2
 800434e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004352:	0082      	lsls	r2, r0, #2
 8004354:	4650      	mov	r0, sl
 8004356:	4659      	mov	r1, fp
 8004358:	f7fb ff9a 	bl	8000290 <__aeabi_uldivmod>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <UART_SetConfig+0x38c>)
 8004362:	fba3 1302 	umull	r1, r3, r3, r2
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	2164      	movs	r1, #100	; 0x64
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	3332      	adds	r3, #50	; 0x32
 8004374:	4a09      	ldr	r2, [pc, #36]	; (800439c <UART_SetConfig+0x38c>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	f003 020f 	and.w	r2, r3, #15
 8004380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4432      	add	r2, r6
 8004386:	609a      	str	r2, [r3, #8]
}
 8004388:	bf00      	nop
 800438a:	377c      	adds	r7, #124	; 0x7c
 800438c:	46bd      	mov	sp, r7
 800438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004392:	bf00      	nop
 8004394:	40011000 	.word	0x40011000
 8004398:	40011400 	.word	0x40011400
 800439c:	51eb851f 	.word	0x51eb851f

080043a0 <__NVIC_SetPriority>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	6039      	str	r1, [r7, #0]
 80043aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	db0a      	blt.n	80043ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	490c      	ldr	r1, [pc, #48]	; (80043ec <__NVIC_SetPriority+0x4c>)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	0112      	lsls	r2, r2, #4
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	440b      	add	r3, r1
 80043c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043c8:	e00a      	b.n	80043e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	4908      	ldr	r1, [pc, #32]	; (80043f0 <__NVIC_SetPriority+0x50>)
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	3b04      	subs	r3, #4
 80043d8:	0112      	lsls	r2, r2, #4
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	440b      	add	r3, r1
 80043de:	761a      	strb	r2, [r3, #24]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000e100 	.word	0xe000e100
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <SysTick_Handler+0x1c>)
 80043fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80043fc:	f002 f99a 	bl	8006734 <xTaskGetSchedulerState>
 8004400:	4603      	mov	r3, r0
 8004402:	2b01      	cmp	r3, #1
 8004404:	d001      	beq.n	800440a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004406:	f003 f87f 	bl	8007508 <xPortSysTickHandler>
  }
}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	e000e010 	.word	0xe000e010

08004414 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004418:	2100      	movs	r1, #0
 800441a:	f06f 0004 	mvn.w	r0, #4
 800441e:	f7ff ffbf 	bl	80043a0 <__NVIC_SetPriority>
#endif
}
 8004422:	bf00      	nop
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800442e:	f3ef 8305 	mrs	r3, IPSR
 8004432:	603b      	str	r3, [r7, #0]
  return(result);
 8004434:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800443a:	f06f 0305 	mvn.w	r3, #5
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	e00c      	b.n	800445c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <osKernelInitialize+0x44>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d105      	bne.n	8004456 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <osKernelInitialize+0x44>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004450:	2300      	movs	r3, #0
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	e002      	b.n	800445c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004456:	f04f 33ff 	mov.w	r3, #4294967295
 800445a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800445c:	687b      	ldr	r3, [r7, #4]
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000098 	.word	0x20000098

08004470 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004476:	f3ef 8305 	mrs	r3, IPSR
 800447a:	603b      	str	r3, [r7, #0]
  return(result);
 800447c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004482:	f06f 0305 	mvn.w	r3, #5
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	e010      	b.n	80044ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <osKernelStart+0x48>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d109      	bne.n	80044a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004492:	f7ff ffbf 	bl	8004414 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <osKernelStart+0x48>)
 8004498:	2202      	movs	r2, #2
 800449a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800449c:	f001 fd02 	bl	8005ea4 <vTaskStartScheduler>
      stat = osOK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	e002      	b.n	80044ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044ac:	687b      	ldr	r3, [r7, #4]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000098 	.word	0x20000098

080044bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08e      	sub	sp, #56	; 0x38
 80044c0:	af04      	add	r7, sp, #16
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044cc:	f3ef 8305 	mrs	r3, IPSR
 80044d0:	617b      	str	r3, [r7, #20]
  return(result);
 80044d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d17e      	bne.n	80045d6 <osThreadNew+0x11a>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d07b      	beq.n	80045d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044e2:	2318      	movs	r3, #24
 80044e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80044ea:	f04f 33ff 	mov.w	r3, #4294967295
 80044ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d045      	beq.n	8004582 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <osThreadNew+0x48>
        name = attr->name;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <osThreadNew+0x6e>
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b38      	cmp	r3, #56	; 0x38
 800451c:	d805      	bhi.n	800452a <osThreadNew+0x6e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <osThreadNew+0x72>
        return (NULL);
 800452a:	2300      	movs	r3, #0
 800452c:	e054      	b.n	80045d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00e      	beq.n	8004564 <osThreadNew+0xa8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b5b      	cmp	r3, #91	; 0x5b
 800454c:	d90a      	bls.n	8004564 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004552:	2b00      	cmp	r3, #0
 8004554:	d006      	beq.n	8004564 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <osThreadNew+0xa8>
        mem = 1;
 800455e:	2301      	movs	r3, #1
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	e010      	b.n	8004586 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10c      	bne.n	8004586 <osThreadNew+0xca>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d108      	bne.n	8004586 <osThreadNew+0xca>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d104      	bne.n	8004586 <osThreadNew+0xca>
          mem = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	e001      	b.n	8004586 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d110      	bne.n	80045ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004594:	9202      	str	r2, [sp, #8]
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	6a3a      	ldr	r2, [r7, #32]
 80045a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f001 faa8 	bl	8005af8 <xTaskCreateStatic>
 80045a8:	4603      	mov	r3, r0
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	e013      	b.n	80045d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d110      	bne.n	80045d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	f107 0310 	add.w	r3, r7, #16
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f001 faf3 	bl	8005bb2 <xTaskCreate>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d001      	beq.n	80045d6 <osThreadNew+0x11a>
            hTask = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045d6:	693b      	ldr	r3, [r7, #16]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3728      	adds	r7, #40	; 0x28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e8:	f3ef 8305 	mrs	r3, IPSR
 80045ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <osDelay+0x1c>
    stat = osErrorISR;
 80045f4:	f06f 0305 	mvn.w	r3, #5
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	e007      	b.n	800460c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f001 fc18 	bl	8005e3c <vTaskDelay>
    }
  }

  return (stat);
 800460c:	68fb      	ldr	r3, [r7, #12]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004616:	b580      	push	{r7, lr}
 8004618:	b08a      	sub	sp, #40	; 0x28
 800461a:	af02      	add	r7, sp, #8
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004626:	f3ef 8305 	mrs	r3, IPSR
 800462a:	613b      	str	r3, [r7, #16]
  return(result);
 800462c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800462e:	2b00      	cmp	r3, #0
 8004630:	d175      	bne.n	800471e <osSemaphoreNew+0x108>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d072      	beq.n	800471e <osSemaphoreNew+0x108>
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	429a      	cmp	r2, r3
 800463e:	d86e      	bhi.n	800471e <osSemaphoreNew+0x108>
    mem = -1;
 8004640:	f04f 33ff 	mov.w	r3, #4294967295
 8004644:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d015      	beq.n	8004678 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d006      	beq.n	8004662 <osSemaphoreNew+0x4c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2b4f      	cmp	r3, #79	; 0x4f
 800465a:	d902      	bls.n	8004662 <osSemaphoreNew+0x4c>
        mem = 1;
 800465c:	2301      	movs	r3, #1
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	e00c      	b.n	800467c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d108      	bne.n	800467c <osSemaphoreNew+0x66>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <osSemaphoreNew+0x66>
          mem = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e001      	b.n	800467c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d04c      	beq.n	800471e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d128      	bne.n	80046dc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10a      	bne.n	80046a6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2203      	movs	r2, #3
 8004696:	9200      	str	r2, [sp, #0]
 8004698:	2200      	movs	r2, #0
 800469a:	2100      	movs	r1, #0
 800469c:	2001      	movs	r0, #1
 800469e:	f000 fa49 	bl	8004b34 <xQueueGenericCreateStatic>
 80046a2:	61f8      	str	r0, [r7, #28]
 80046a4:	e005      	b.n	80046b2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80046a6:	2203      	movs	r2, #3
 80046a8:	2100      	movs	r1, #0
 80046aa:	2001      	movs	r0, #1
 80046ac:	f000 faba 	bl	8004c24 <xQueueGenericCreate>
 80046b0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d022      	beq.n	80046fe <osSemaphoreNew+0xe8>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d01f      	beq.n	80046fe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80046be:	2300      	movs	r3, #0
 80046c0:	2200      	movs	r2, #0
 80046c2:	2100      	movs	r1, #0
 80046c4:	69f8      	ldr	r0, [r7, #28]
 80046c6:	f000 fb75 	bl	8004db4 <xQueueGenericSend>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d016      	beq.n	80046fe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80046d0:	69f8      	ldr	r0, [r7, #28]
 80046d2:	f001 f83d 	bl	8005750 <vQueueDelete>
            hSemaphore = NULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e010      	b.n	80046fe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d108      	bne.n	80046f4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	461a      	mov	r2, r3
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 faf7 	bl	8004cde <xQueueCreateCountingSemaphoreStatic>
 80046f0:	61f8      	str	r0, [r7, #28]
 80046f2:	e004      	b.n	80046fe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80046f4:	68b9      	ldr	r1, [r7, #8]
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 fb28 	bl	8004d4c <xQueueCreateCountingSemaphore>
 80046fc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00c      	beq.n	800471e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <osSemaphoreNew+0xfc>
          name = attr->name;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	e001      	b.n	8004716 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	69f8      	ldr	r0, [r7, #28]
 800471a:	f001 f965 	bl	80059e8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800471e:	69fb      	ldr	r3, [r7, #28]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004740:	f06f 0303 	mvn.w	r3, #3
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	e039      	b.n	80047bc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004748:	f3ef 8305 	mrs	r3, IPSR
 800474c:	60fb      	str	r3, [r7, #12]
  return(result);
 800474e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004750:	2b00      	cmp	r3, #0
 8004752:	d022      	beq.n	800479a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800475a:	f06f 0303 	mvn.w	r3, #3
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e02c      	b.n	80047bc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004766:	f107 0308 	add.w	r3, r7, #8
 800476a:	461a      	mov	r2, r3
 800476c:	2100      	movs	r1, #0
 800476e:	6938      	ldr	r0, [r7, #16]
 8004770:	f000 ff32 	bl	80055d8 <xQueueReceiveFromISR>
 8004774:	4603      	mov	r3, r0
 8004776:	2b01      	cmp	r3, #1
 8004778:	d003      	beq.n	8004782 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800477a:	f06f 0302 	mvn.w	r3, #2
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e01c      	b.n	80047bc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d019      	beq.n	80047bc <osSemaphoreAcquire+0x94>
 8004788:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <osSemaphoreAcquire+0xa0>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	e010      	b.n	80047bc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	6938      	ldr	r0, [r7, #16]
 800479e:	f000 fe0f 	bl	80053c0 <xQueueSemaphoreTake>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d009      	beq.n	80047bc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80047ae:	f06f 0301 	mvn.w	r3, #1
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	e002      	b.n	80047bc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80047b6:	f06f 0302 	mvn.w	r3, #2
 80047ba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80047bc:	697b      	ldr	r3, [r7, #20]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80047e2:	f06f 0303 	mvn.w	r3, #3
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e02c      	b.n	8004844 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ea:	f3ef 8305 	mrs	r3, IPSR
 80047ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80047f0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01a      	beq.n	800482c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80047fa:	f107 0308 	add.w	r3, r7, #8
 80047fe:	4619      	mov	r1, r3
 8004800:	6938      	ldr	r0, [r7, #16]
 8004802:	f000 fc70 	bl	80050e6 <xQueueGiveFromISR>
 8004806:	4603      	mov	r3, r0
 8004808:	2b01      	cmp	r3, #1
 800480a:	d003      	beq.n	8004814 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800480c:	f06f 0302 	mvn.w	r3, #2
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e017      	b.n	8004844 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d014      	beq.n	8004844 <osSemaphoreRelease+0x78>
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <osSemaphoreRelease+0x84>)
 800481c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	e00b      	b.n	8004844 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800482c:	2300      	movs	r3, #0
 800482e:	2200      	movs	r2, #0
 8004830:	2100      	movs	r1, #0
 8004832:	6938      	ldr	r0, [r7, #16]
 8004834:	f000 fabe 	bl	8004db4 <xQueueGenericSend>
 8004838:	4603      	mov	r3, r0
 800483a:	2b01      	cmp	r3, #1
 800483c:	d002      	beq.n	8004844 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800483e:	f06f 0302 	mvn.w	r3, #2
 8004842:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004844:	697b      	ldr	r3, [r7, #20]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	e000ed04 	.word	0xe000ed04

08004854 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d102      	bne.n	800486c <osSemaphoreGetCount+0x18>
    count = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e00e      	b.n	800488a <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800486c:	f3ef 8305 	mrs	r3, IPSR
 8004870:	60fb      	str	r3, [r7, #12]
  return(result);
 8004872:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8004878:	6938      	ldr	r0, [r7, #16]
 800487a:	f000 ff4b 	bl	8005714 <uxQueueMessagesWaitingFromISR>
 800487e:	6178      	str	r0, [r7, #20]
 8004880:	e003      	b.n	800488a <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8004882:	6938      	ldr	r0, [r7, #16]
 8004884:	f000 ff28 	bl	80056d8 <uxQueueMessagesWaiting>
 8004888:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800488a:	697b      	ldr	r3, [r7, #20]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a07      	ldr	r2, [pc, #28]	; (80048c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80048a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4a06      	ldr	r2, [pc, #24]	; (80048c4 <vApplicationGetIdleTaskMemory+0x30>)
 80048aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2280      	movs	r2, #128	; 0x80
 80048b0:	601a      	str	r2, [r3, #0]
}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	2000009c 	.word	0x2000009c
 80048c4:	200000f8 	.word	0x200000f8

080048c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a07      	ldr	r2, [pc, #28]	; (80048f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80048d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4a06      	ldr	r2, [pc, #24]	; (80048f8 <vApplicationGetTimerTaskMemory+0x30>)
 80048de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048e6:	601a      	str	r2, [r3, #0]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	200002f8 	.word	0x200002f8
 80048f8:	20000354 	.word	0x20000354

080048fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f103 0208 	add.w	r2, r3, #8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f04f 32ff 	mov.w	r2, #4294967295
 8004914:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f103 0208 	add.w	r2, r3, #8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f103 0208 	add.w	r2, r3, #8
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	601a      	str	r2, [r3, #0]
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b4:	d103      	bne.n	80049be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e00c      	b.n	80049d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3308      	adds	r3, #8
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	e002      	b.n	80049cc <vListInsert+0x2e>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d2f6      	bcs.n	80049c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6892      	ldr	r2, [r2, #8]
 8004a26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6852      	ldr	r2, [r2, #4]
 8004a30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d103      	bne.n	8004a44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	1e5a      	subs	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a8e:	f002 fca9 	bl	80073e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	68f9      	ldr	r1, [r7, #12]
 8004a9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	441a      	add	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	68f9      	ldr	r1, [r7, #12]
 8004ac2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	441a      	add	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	22ff      	movs	r2, #255	; 0xff
 8004ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	22ff      	movs	r2, #255	; 0xff
 8004ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d114      	bne.n	8004b0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01a      	beq.n	8004b22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3310      	adds	r3, #16
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fc61 	bl	80063b8 <xTaskRemoveFromEventList>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d012      	beq.n	8004b22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004afc:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <xQueueGenericReset+0xcc>)
 8004afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	e009      	b.n	8004b22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3310      	adds	r3, #16
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fef2 	bl	80048fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3324      	adds	r3, #36	; 0x24
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff feed 	bl	80048fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b22:	f002 fc8f 	bl	8007444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b26:	2301      	movs	r3, #1
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	e000ed04 	.word	0xe000ed04

08004b34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08e      	sub	sp, #56	; 0x38
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10a      	bne.n	8004b5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b5a:	bf00      	nop
 8004b5c:	e7fe      	b.n	8004b5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <xQueueGenericCreateStatic+0x52>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <xQueueGenericCreateStatic+0x56>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <xQueueGenericCreateStatic+0x58>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	623b      	str	r3, [r7, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <xQueueGenericCreateStatic+0x7e>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <xQueueGenericCreateStatic+0x82>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <xQueueGenericCreateStatic+0x84>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	61fb      	str	r3, [r7, #28]
}
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bd2:	2350      	movs	r3, #80	; 0x50
 8004bd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b50      	cmp	r3, #80	; 0x50
 8004bda:	d00a      	beq.n	8004bf2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	61bb      	str	r3, [r7, #24]
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bf2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00d      	beq.n	8004c1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f83f 	bl	8004c98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3730      	adds	r7, #48	; 0x30
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	; 0x28
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	613b      	str	r3, [r7, #16]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	3350      	adds	r3, #80	; 0x50
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f002 fce3 	bl	8007628 <pvPortMalloc>
 8004c62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d011      	beq.n	8004c8e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	3350      	adds	r3, #80	; 0x50
 8004c72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c7c:	79fa      	ldrb	r2, [r7, #7]
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f805 	bl	8004c98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
	}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d103      	bne.n	8004cb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	e002      	b.n	8004cba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	69b8      	ldr	r0, [r7, #24]
 8004cca:	f7ff fecb 	bl	8004a64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b08a      	sub	sp, #40	; 0x28
 8004ce2:	af02      	add	r7, sp, #8
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10a      	bne.n	8004d06 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	61bb      	str	r3, [r7, #24]
}
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d90a      	bls.n	8004d24 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	617b      	str	r3, [r7, #20]
}
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004d24:	2302      	movs	r3, #2
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f7ff ff00 	bl	8004b34 <xQueueGenericCreateStatic>
 8004d34:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004d42:	69fb      	ldr	r3, [r7, #28]
	}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3720      	adds	r7, #32
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	613b      	str	r3, [r7, #16]
}
 8004d6e:	bf00      	nop
 8004d70:	e7fe      	b.n	8004d70 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d90a      	bls.n	8004d90 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	60fb      	str	r3, [r7, #12]
}
 8004d8c:	bf00      	nop
 8004d8e:	e7fe      	b.n	8004d8e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004d90:	2202      	movs	r2, #2
 8004d92:	2100      	movs	r1, #0
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff ff45 	bl	8004c24 <xQueueGenericCreate>
 8004d9a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004da8:	697b      	ldr	r3, [r7, #20]
	}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08e      	sub	sp, #56	; 0x38
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <xQueueGenericSend+0x32>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d103      	bne.n	8004df4 <xQueueGenericSend+0x40>
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <xQueueGenericSend+0x44>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <xQueueGenericSend+0x46>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <xQueueGenericSend+0x60>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e10:	bf00      	nop
 8004e12:	e7fe      	b.n	8004e12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d103      	bne.n	8004e22 <xQueueGenericSend+0x6e>
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <xQueueGenericSend+0x72>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <xQueueGenericSend+0x74>
 8004e26:	2300      	movs	r3, #0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <xQueueGenericSend+0x8e>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	623b      	str	r3, [r7, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e42:	f001 fc77 	bl	8006734 <xTaskGetSchedulerState>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <xQueueGenericSend+0x9e>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <xQueueGenericSend+0xa2>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <xQueueGenericSend+0xa4>
 8004e56:	2300      	movs	r3, #0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <xQueueGenericSend+0xbe>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	61fb      	str	r3, [r7, #28]
}
 8004e6e:	bf00      	nop
 8004e70:	e7fe      	b.n	8004e70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e72:	f002 fab7 	bl	80073e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d302      	bcc.n	8004e88 <xQueueGenericSend+0xd4>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d129      	bne.n	8004edc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e8e:	f000 fc9a 	bl	80057c6 <prvCopyDataToQueue>
 8004e92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d010      	beq.n	8004ebe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	3324      	adds	r3, #36	; 0x24
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 fa89 	bl	80063b8 <xTaskRemoveFromEventList>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d013      	beq.n	8004ed4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004eac:	4b3f      	ldr	r3, [pc, #252]	; (8004fac <xQueueGenericSend+0x1f8>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	e00a      	b.n	8004ed4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ec4:	4b39      	ldr	r3, [pc, #228]	; (8004fac <xQueueGenericSend+0x1f8>)
 8004ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ed4:	f002 fab6 	bl	8007444 <vPortExitCritical>
				return pdPASS;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e063      	b.n	8004fa4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ee2:	f002 faaf 	bl	8007444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e05c      	b.n	8004fa4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ef0:	f107 0314 	add.w	r3, r7, #20
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f001 fac3 	bl	8006480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004efa:	2301      	movs	r3, #1
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004efe:	f002 faa1 	bl	8007444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f02:	f001 f835 	bl	8005f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f06:	f002 fa6d 	bl	80073e4 <vPortEnterCritical>
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f10:	b25b      	sxtb	r3, r3
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f16:	d103      	bne.n	8004f20 <xQueueGenericSend+0x16c>
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f26:	b25b      	sxtb	r3, r3
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d103      	bne.n	8004f36 <xQueueGenericSend+0x182>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f36:	f002 fa85 	bl	8007444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f3a:	1d3a      	adds	r2, r7, #4
 8004f3c:	f107 0314 	add.w	r3, r7, #20
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 fab2 	bl	80064ac <xTaskCheckForTimeOut>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d124      	bne.n	8004f98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f50:	f000 fd31 	bl	80059b6 <prvIsQueueFull>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d018      	beq.n	8004f8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	3310      	adds	r3, #16
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4611      	mov	r1, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f001 f9d8 	bl	8006318 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f6a:	f000 fcbc 	bl	80058e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f6e:	f001 f80d 	bl	8005f8c <xTaskResumeAll>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f47f af7c 	bne.w	8004e72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <xQueueGenericSend+0x1f8>)
 8004f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	e772      	b.n	8004e72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f8e:	f000 fcaa 	bl	80058e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f92:	f000 fffb 	bl	8005f8c <xTaskResumeAll>
 8004f96:	e76c      	b.n	8004e72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f9a:	f000 fca4 	bl	80058e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f9e:	f000 fff5 	bl	8005f8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3738      	adds	r7, #56	; 0x38
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	e000ed04 	.word	0xe000ed04

08004fb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b090      	sub	sp, #64	; 0x40
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d103      	bne.n	8004fec <xQueueGenericSendFromISR+0x3c>
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <xQueueGenericSendFromISR+0x40>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e000      	b.n	8004ff2 <xQueueGenericSendFromISR+0x42>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d103      	bne.n	800501a <xQueueGenericSendFromISR+0x6a>
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <xQueueGenericSendFromISR+0x6e>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <xQueueGenericSendFromISR+0x70>
 800501e:	2300      	movs	r3, #0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	623b      	str	r3, [r7, #32]
}
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800503a:	f002 fab5 	bl	80075a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800503e:	f3ef 8211 	mrs	r2, BASEPRI
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	61fa      	str	r2, [r7, #28]
 8005054:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005056:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005058:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	429a      	cmp	r2, r3
 8005064:	d302      	bcc.n	800506c <xQueueGenericSendFromISR+0xbc>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d12f      	bne.n	80050cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005082:	f000 fba0 	bl	80057c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005086:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d112      	bne.n	80050b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	2b00      	cmp	r3, #0
 8005096:	d016      	beq.n	80050c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	3324      	adds	r3, #36	; 0x24
 800509c:	4618      	mov	r0, r3
 800509e:	f001 f98b 	bl	80063b8 <xTaskRemoveFromEventList>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00e      	beq.n	80050c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e007      	b.n	80050c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050ba:	3301      	adds	r3, #1
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	b25a      	sxtb	r2, r3
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050c6:	2301      	movs	r3, #1
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80050ca:	e001      	b.n	80050d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3740      	adds	r7, #64	; 0x40
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b08e      	sub	sp, #56	; 0x38
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	623b      	str	r3, [r7, #32]
}
 800510c:	bf00      	nop
 800510e:	e7fe      	b.n	800510e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <xQueueGiveFromISR+0x48>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	61fb      	str	r3, [r7, #28]
}
 800512a:	bf00      	nop
 800512c:	e7fe      	b.n	800512c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d103      	bne.n	800513e <xQueueGiveFromISR+0x58>
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <xQueueGiveFromISR+0x5c>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <xQueueGiveFromISR+0x5e>
 8005142:	2300      	movs	r3, #0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <xQueueGiveFromISR+0x78>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	61bb      	str	r3, [r7, #24]
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800515e:	f002 fa23 	bl	80075a8 <vPortValidateInterruptPriority>
	__asm volatile
 8005162:	f3ef 8211 	mrs	r2, BASEPRI
 8005166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	617a      	str	r2, [r7, #20]
 8005178:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800517a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800518a:	429a      	cmp	r2, r3
 800518c:	d22b      	bcs.n	80051e6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a8:	d112      	bne.n	80051d0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d016      	beq.n	80051e0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	3324      	adds	r3, #36	; 0x24
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 f8fe 	bl	80063b8 <xTaskRemoveFromEventList>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00e      	beq.n	80051e0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00b      	beq.n	80051e0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e007      	b.n	80051e0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051d4:	3301      	adds	r3, #1
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	b25a      	sxtb	r2, r3
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051e0:	2301      	movs	r3, #1
 80051e2:	637b      	str	r3, [r7, #52]	; 0x34
 80051e4:	e001      	b.n	80051ea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	637b      	str	r3, [r7, #52]	; 0x34
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f383 8811 	msr	BASEPRI, r3
}
 80051f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3738      	adds	r7, #56	; 0x38
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08c      	sub	sp, #48	; 0x30
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800520c:	2300      	movs	r3, #0
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <xQueueReceive+0x30>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	623b      	str	r3, [r7, #32]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d103      	bne.n	800523e <xQueueReceive+0x3e>
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <xQueueReceive+0x42>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <xQueueReceive+0x44>
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <xQueueReceive+0x5e>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	61fb      	str	r3, [r7, #28]
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800525e:	f001 fa69 	bl	8006734 <xTaskGetSchedulerState>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <xQueueReceive+0x6e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <xQueueReceive+0x72>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <xQueueReceive+0x74>
 8005272:	2300      	movs	r3, #0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <xQueueReceive+0x8e>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	61bb      	str	r3, [r7, #24]
}
 800528a:	bf00      	nop
 800528c:	e7fe      	b.n	800528c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800528e:	f002 f8a9 	bl	80073e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01f      	beq.n	80052de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a2:	f000 fafa 	bl	800589a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	1e5a      	subs	r2, r3, #1
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00f      	beq.n	80052d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	3310      	adds	r3, #16
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 f87c 	bl	80063b8 <xTaskRemoveFromEventList>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052c6:	4b3d      	ldr	r3, [pc, #244]	; (80053bc <xQueueReceive+0x1bc>)
 80052c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052d6:	f002 f8b5 	bl	8007444 <vPortExitCritical>
				return pdPASS;
 80052da:	2301      	movs	r3, #1
 80052dc:	e069      	b.n	80053b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d103      	bne.n	80052ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052e4:	f002 f8ae 	bl	8007444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e062      	b.n	80053b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052f2:	f107 0310 	add.w	r3, r7, #16
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 f8c2 	bl	8006480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005300:	f002 f8a0 	bl	8007444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005304:	f000 fe34 	bl	8005f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005308:	f002 f86c 	bl	80073e4 <vPortEnterCritical>
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005312:	b25b      	sxtb	r3, r3
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d103      	bne.n	8005322 <xQueueReceive+0x122>
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005328:	b25b      	sxtb	r3, r3
 800532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532e:	d103      	bne.n	8005338 <xQueueReceive+0x138>
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005338:	f002 f884 	bl	8007444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800533c:	1d3a      	adds	r2, r7, #4
 800533e:	f107 0310 	add.w	r3, r7, #16
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f001 f8b1 	bl	80064ac <xTaskCheckForTimeOut>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d123      	bne.n	8005398 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005352:	f000 fb1a 	bl	800598a <prvIsQueueEmpty>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d017      	beq.n	800538c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	3324      	adds	r3, #36	; 0x24
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4611      	mov	r1, r2
 8005364:	4618      	mov	r0, r3
 8005366:	f000 ffd7 	bl	8006318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800536a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800536c:	f000 fabb 	bl	80058e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005370:	f000 fe0c 	bl	8005f8c <xTaskResumeAll>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d189      	bne.n	800528e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800537a:	4b10      	ldr	r3, [pc, #64]	; (80053bc <xQueueReceive+0x1bc>)
 800537c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	e780      	b.n	800528e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800538c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800538e:	f000 faaa 	bl	80058e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005392:	f000 fdfb 	bl	8005f8c <xTaskResumeAll>
 8005396:	e77a      	b.n	800528e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800539a:	f000 faa4 	bl	80058e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800539e:	f000 fdf5 	bl	8005f8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053a4:	f000 faf1 	bl	800598a <prvIsQueueEmpty>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f43f af6f 	beq.w	800528e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3730      	adds	r7, #48	; 0x30
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08e      	sub	sp, #56	; 0x38
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	623b      	str	r3, [r7, #32]
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	61fb      	str	r3, [r7, #28]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005410:	f001 f990 	bl	8006734 <xTaskGetSchedulerState>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d102      	bne.n	8005420 <xQueueSemaphoreTake+0x60>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <xQueueSemaphoreTake+0x64>
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <xQueueSemaphoreTake+0x66>
 8005424:	2300      	movs	r3, #0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	61bb      	str	r3, [r7, #24]
}
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005440:	f001 ffd0 	bl	80073e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	2b00      	cmp	r3, #0
 800544e:	d024      	beq.n	800549a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	1e5a      	subs	r2, r3, #1
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d104      	bne.n	800546a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005460:	f001 fade 	bl	8006a20 <pvTaskIncrementMutexHeldCount>
 8005464:	4602      	mov	r2, r0
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00f      	beq.n	8005492 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	3310      	adds	r3, #16
 8005476:	4618      	mov	r0, r3
 8005478:	f000 ff9e 	bl	80063b8 <xTaskRemoveFromEventList>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005482:	4b54      	ldr	r3, [pc, #336]	; (80055d4 <xQueueSemaphoreTake+0x214>)
 8005484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005492:	f001 ffd7 	bl	8007444 <vPortExitCritical>
				return pdPASS;
 8005496:	2301      	movs	r3, #1
 8005498:	e097      	b.n	80055ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d111      	bne.n	80054c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	617b      	str	r3, [r7, #20]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80054bc:	f001 ffc2 	bl	8007444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e082      	b.n	80055ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054ca:	f107 030c 	add.w	r3, r7, #12
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 ffd6 	bl	8006480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054d4:	2301      	movs	r3, #1
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054d8:	f001 ffb4 	bl	8007444 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054dc:	f000 fd48 	bl	8005f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054e0:	f001 ff80 	bl	80073e4 <vPortEnterCritical>
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054ea:	b25b      	sxtb	r3, r3
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f0:	d103      	bne.n	80054fa <xQueueSemaphoreTake+0x13a>
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005500:	b25b      	sxtb	r3, r3
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d103      	bne.n	8005510 <xQueueSemaphoreTake+0x150>
 8005508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005510:	f001 ff98 	bl	8007444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005514:	463a      	mov	r2, r7
 8005516:	f107 030c 	add.w	r3, r7, #12
 800551a:	4611      	mov	r1, r2
 800551c:	4618      	mov	r0, r3
 800551e:	f000 ffc5 	bl	80064ac <xTaskCheckForTimeOut>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d132      	bne.n	800558e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800552a:	f000 fa2e 	bl	800598a <prvIsQueueEmpty>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d026      	beq.n	8005582 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d109      	bne.n	8005550 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800553c:	f001 ff52 	bl	80073e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4618      	mov	r0, r3
 8005546:	f001 f913 	bl	8006770 <xTaskPriorityInherit>
 800554a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800554c:	f001 ff7a 	bl	8007444 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	3324      	adds	r3, #36	; 0x24
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	4611      	mov	r1, r2
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fedd 	bl	8006318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800555e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005560:	f000 f9c1 	bl	80058e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005564:	f000 fd12 	bl	8005f8c <xTaskResumeAll>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	f47f af68 	bne.w	8005440 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005570:	4b18      	ldr	r3, [pc, #96]	; (80055d4 <xQueueSemaphoreTake+0x214>)
 8005572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	e75e      	b.n	8005440 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005584:	f000 f9af 	bl	80058e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005588:	f000 fd00 	bl	8005f8c <xTaskResumeAll>
 800558c:	e758      	b.n	8005440 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800558e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005590:	f000 f9a9 	bl	80058e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005594:	f000 fcfa 	bl	8005f8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800559a:	f000 f9f6 	bl	800598a <prvIsQueueEmpty>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f43f af4d 	beq.w	8005440 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00d      	beq.n	80055c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80055ac:	f001 ff1a 	bl	80073e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80055b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055b2:	f000 f8f0 	bl	8005796 <prvGetDisinheritPriorityAfterTimeout>
 80055b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 f9ac 	bl	800691c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80055c4:	f001 ff3e 	bl	8007444 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3738      	adds	r7, #56	; 0x38
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	e000ed04 	.word	0xe000ed04

080055d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08e      	sub	sp, #56	; 0x38
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	623b      	str	r3, [r7, #32]
}
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <xQueueReceiveFromISR+0x3a>
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <xQueueReceiveFromISR+0x3e>
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <xQueueReceiveFromISR+0x40>
 8005616:	2300      	movs	r3, #0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	61fb      	str	r3, [r7, #28]
}
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005632:	f001 ffb9 	bl	80075a8 <vPortValidateInterruptPriority>
	__asm volatile
 8005636:	f3ef 8211 	mrs	r2, BASEPRI
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	61ba      	str	r2, [r7, #24]
 800564c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800564e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005650:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	2b00      	cmp	r3, #0
 800565c:	d02f      	beq.n	80056be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800566c:	f000 f915 	bl	800589a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	1e5a      	subs	r2, r3, #1
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005678:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d112      	bne.n	80056a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d016      	beq.n	80056b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	3310      	adds	r3, #16
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fe92 	bl	80063b8 <xTaskRemoveFromEventList>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00e      	beq.n	80056b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	e007      	b.n	80056b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80056a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056ac:	3301      	adds	r3, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	b25a      	sxtb	r2, r3
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80056b8:	2301      	movs	r3, #1
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
 80056bc:	e001      	b.n	80056c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80056be:	2300      	movs	r3, #0
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f383 8811 	msr	BASEPRI, r3
}
 80056cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3738      	adds	r7, #56	; 0x38
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60bb      	str	r3, [r7, #8]
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80056fc:	f001 fe72 	bl	80073e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005706:	f001 fe9d 	bl	8007444 <vPortExitCritical>

	return uxReturn;
 800570a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	60fb      	str	r3, [r7, #12]
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005742:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005744:	4618      	mov	r0, r3
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <vQueueDelete+0x28>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	60bb      	str	r3, [r7, #8]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f95f 	bl	8005a3c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005784:	2b00      	cmp	r3, #0
 8005786:	d102      	bne.n	800578e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f002 f819 	bl	80077c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d006      	beq.n	80057b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	e001      	b.n	80057b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80057b8:	68fb      	ldr	r3, [r7, #12]
	}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b086      	sub	sp, #24
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10d      	bne.n	8005800 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d14d      	bne.n	8005888 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 f825 	bl	8006840 <xTaskPriorityDisinherit>
 80057f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]
 80057fe:	e043      	b.n	8005888 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d119      	bne.n	800583a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6858      	ldr	r0, [r3, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	461a      	mov	r2, r3
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	f002 f91d 	bl	8007a50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	441a      	add	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	d32b      	bcc.n	8005888 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	605a      	str	r2, [r3, #4]
 8005838:	e026      	b.n	8005888 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	68d8      	ldr	r0, [r3, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	461a      	mov	r2, r3
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	f002 f903 	bl	8007a50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	425b      	negs	r3, r3
 8005854:	441a      	add	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d207      	bcs.n	8005876 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	425b      	negs	r3, r3
 8005870:	441a      	add	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b02      	cmp	r3, #2
 800587a:	d105      	bne.n	8005888 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	3b01      	subs	r3, #1
 8005886:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005890:	697b      	ldr	r3, [r7, #20]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d018      	beq.n	80058de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	441a      	add	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d303      	bcc.n	80058ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68d9      	ldr	r1, [r3, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	461a      	mov	r2, r3
 80058d8:	6838      	ldr	r0, [r7, #0]
 80058da:	f002 f8b9 	bl	8007a50 <memcpy>
	}
}
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058ee:	f001 fd79 	bl	80073e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058fa:	e011      	b.n	8005920 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d012      	beq.n	800592a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3324      	adds	r3, #36	; 0x24
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fd55 	bl	80063b8 <xTaskRemoveFromEventList>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005914:	f000 fe2c 	bl	8006570 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	3b01      	subs	r3, #1
 800591c:	b2db      	uxtb	r3, r3
 800591e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005924:	2b00      	cmp	r3, #0
 8005926:	dce9      	bgt.n	80058fc <prvUnlockQueue+0x16>
 8005928:	e000      	b.n	800592c <prvUnlockQueue+0x46>
					break;
 800592a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	22ff      	movs	r2, #255	; 0xff
 8005930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005934:	f001 fd86 	bl	8007444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005938:	f001 fd54 	bl	80073e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005942:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005944:	e011      	b.n	800596a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d012      	beq.n	8005974 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3310      	adds	r3, #16
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fd30 	bl	80063b8 <xTaskRemoveFromEventList>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800595e:	f000 fe07 	bl	8006570 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005962:	7bbb      	ldrb	r3, [r7, #14]
 8005964:	3b01      	subs	r3, #1
 8005966:	b2db      	uxtb	r3, r3
 8005968:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800596a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800596e:	2b00      	cmp	r3, #0
 8005970:	dce9      	bgt.n	8005946 <prvUnlockQueue+0x60>
 8005972:	e000      	b.n	8005976 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005974:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	22ff      	movs	r2, #255	; 0xff
 800597a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800597e:	f001 fd61 	bl	8007444 <vPortExitCritical>
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005992:	f001 fd27 	bl	80073e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800599e:	2301      	movs	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	e001      	b.n	80059a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059a8:	f001 fd4c 	bl	8007444 <vPortExitCritical>

	return xReturn;
 80059ac:	68fb      	ldr	r3, [r7, #12]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059be:	f001 fd11 	bl	80073e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d102      	bne.n	80059d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059ce:	2301      	movs	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	e001      	b.n	80059d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059d8:	f001 fd34 	bl	8007444 <vPortExitCritical>

	return xReturn;
 80059dc:	68fb      	ldr	r3, [r7, #12]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	e014      	b.n	8005a22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059f8:	4a0f      	ldr	r2, [pc, #60]	; (8005a38 <vQueueAddToRegistry+0x50>)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10b      	bne.n	8005a1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a04:	490c      	ldr	r1, [pc, #48]	; (8005a38 <vQueueAddToRegistry+0x50>)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a0e:	4a0a      	ldr	r2, [pc, #40]	; (8005a38 <vQueueAddToRegistry+0x50>)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	4413      	add	r3, r2
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a1a:	e006      	b.n	8005a2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b07      	cmp	r3, #7
 8005a26:	d9e7      	bls.n	80059f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20005894 	.word	0x20005894

08005a3c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	e016      	b.n	8005a78 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005a4a:	4a10      	ldr	r2, [pc, #64]	; (8005a8c <vQueueUnregisterQueue+0x50>)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	4413      	add	r3, r2
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d10b      	bne.n	8005a72 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005a5a:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <vQueueUnregisterQueue+0x50>)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2100      	movs	r1, #0
 8005a60:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005a64:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <vQueueUnregisterQueue+0x50>)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	605a      	str	r2, [r3, #4]
				break;
 8005a70:	e006      	b.n	8005a80 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3301      	adds	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b07      	cmp	r3, #7
 8005a7c:	d9e5      	bls.n	8005a4a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	20005894 	.word	0x20005894

08005a90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005aa0:	f001 fca0 	bl	80073e4 <vPortEnterCritical>
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aaa:	b25b      	sxtb	r3, r3
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d103      	bne.n	8005aba <vQueueWaitForMessageRestricted+0x2a>
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac0:	b25b      	sxtb	r3, r3
 8005ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac6:	d103      	bne.n	8005ad0 <vQueueWaitForMessageRestricted+0x40>
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad0:	f001 fcb8 	bl	8007444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	3324      	adds	r3, #36	; 0x24
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fc3b 	bl	8006360 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005aea:	6978      	ldr	r0, [r7, #20]
 8005aec:	f7ff fefb 	bl	80058e6 <prvUnlockQueue>
	}
 8005af0:	bf00      	nop
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08e      	sub	sp, #56	; 0x38
 8005afc:	af04      	add	r7, sp, #16
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	623b      	str	r3, [r7, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <xTaskCreateStatic+0x46>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	61fb      	str	r3, [r7, #28]
}
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b3e:	235c      	movs	r3, #92	; 0x5c
 8005b40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b5c      	cmp	r3, #92	; 0x5c
 8005b46:	d00a      	beq.n	8005b5e <xTaskCreateStatic+0x66>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	61bb      	str	r3, [r7, #24]
}
 8005b5a:	bf00      	nop
 8005b5c:	e7fe      	b.n	8005b5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01e      	beq.n	8005ba4 <xTaskCreateStatic+0xac>
 8005b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01b      	beq.n	8005ba4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	2202      	movs	r2, #2
 8005b7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b7e:	2300      	movs	r3, #0
 8005b80:	9303      	str	r3, [sp, #12]
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	9302      	str	r3, [sp, #8]
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f850 	bl	8005c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b9e:	f000 f8dd 	bl	8005d5c <prvAddNewTaskToReadyList>
 8005ba2:	e001      	b.n	8005ba8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ba8:	697b      	ldr	r3, [r7, #20]
	}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3728      	adds	r7, #40	; 0x28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b08c      	sub	sp, #48	; 0x30
 8005bb6:	af04      	add	r7, sp, #16
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 fd2e 	bl	8007628 <pvPortMalloc>
 8005bcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00e      	beq.n	8005bf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bd4:	205c      	movs	r0, #92	; 0x5c
 8005bd6:	f001 fd27 	bl	8007628 <pvPortMalloc>
 8005bda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
 8005be8:	e005      	b.n	8005bf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bea:	6978      	ldr	r0, [r7, #20]
 8005bec:	f001 fde8 	bl	80077c0 <vPortFree>
 8005bf0:	e001      	b.n	8005bf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d017      	beq.n	8005c2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9303      	str	r3, [sp, #12]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	9302      	str	r3, [sp, #8]
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f80e 	bl	8005c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c20:	69f8      	ldr	r0, [r7, #28]
 8005c22:	f000 f89b 	bl	8005d5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c26:	2301      	movs	r3, #1
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	e002      	b.n	8005c32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c32:	69bb      	ldr	r3, [r7, #24]
	}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	461a      	mov	r2, r3
 8005c54:	21a5      	movs	r1, #165	; 0xa5
 8005c56:	f001 ff09 	bl	8007a6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c64:	3b01      	subs	r3, #1
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f023 0307 	bic.w	r3, r3, #7
 8005c72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	617b      	str	r3, [r7, #20]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d01f      	beq.n	8005cda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	e012      	b.n	8005cc6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	7819      	ldrb	r1, [r3, #0]
 8005ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	3334      	adds	r3, #52	; 0x34
 8005cb0:	460a      	mov	r2, r1
 8005cb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d006      	beq.n	8005cce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	2b0f      	cmp	r3, #15
 8005cca:	d9e9      	bls.n	8005ca0 <prvInitialiseNewTask+0x64>
 8005ccc:	e000      	b.n	8005cd0 <prvInitialiseNewTask+0x94>
			{
				break;
 8005cce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cd8:	e003      	b.n	8005ce2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	2b37      	cmp	r3, #55	; 0x37
 8005ce6:	d901      	bls.n	8005cec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ce8:	2337      	movs	r3, #55	; 0x37
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	3304      	adds	r3, #4
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe fe1a 	bl	800493c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	3318      	adds	r3, #24
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fe fe15 	bl	800493c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	68f9      	ldr	r1, [r7, #12]
 8005d3a:	69b8      	ldr	r0, [r7, #24]
 8005d3c:	f001 fa26 	bl	800718c <pxPortInitialiseStack>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d52:	bf00      	nop
 8005d54:	3720      	adds	r7, #32
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d64:	f001 fb3e 	bl	80073e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d68:	4b2d      	ldr	r3, [pc, #180]	; (8005e20 <prvAddNewTaskToReadyList+0xc4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	4a2c      	ldr	r2, [pc, #176]	; (8005e20 <prvAddNewTaskToReadyList+0xc4>)
 8005d70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d72:	4b2c      	ldr	r3, [pc, #176]	; (8005e24 <prvAddNewTaskToReadyList+0xc8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d7a:	4a2a      	ldr	r2, [pc, #168]	; (8005e24 <prvAddNewTaskToReadyList+0xc8>)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d80:	4b27      	ldr	r3, [pc, #156]	; (8005e20 <prvAddNewTaskToReadyList+0xc4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d110      	bne.n	8005daa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d88:	f000 fc16 	bl	80065b8 <prvInitialiseTaskLists>
 8005d8c:	e00d      	b.n	8005daa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d8e:	4b26      	ldr	r3, [pc, #152]	; (8005e28 <prvAddNewTaskToReadyList+0xcc>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d96:	4b23      	ldr	r3, [pc, #140]	; (8005e24 <prvAddNewTaskToReadyList+0xc8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d802      	bhi.n	8005daa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005da4:	4a1f      	ldr	r2, [pc, #124]	; (8005e24 <prvAddNewTaskToReadyList+0xc8>)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005daa:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <prvAddNewTaskToReadyList+0xd0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3301      	adds	r3, #1
 8005db0:	4a1e      	ldr	r2, [pc, #120]	; (8005e2c <prvAddNewTaskToReadyList+0xd0>)
 8005db2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005db4:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <prvAddNewTaskToReadyList+0xd0>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc0:	4b1b      	ldr	r3, [pc, #108]	; (8005e30 <prvAddNewTaskToReadyList+0xd4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d903      	bls.n	8005dd0 <prvAddNewTaskToReadyList+0x74>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	4a18      	ldr	r2, [pc, #96]	; (8005e30 <prvAddNewTaskToReadyList+0xd4>)
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <prvAddNewTaskToReadyList+0xd8>)
 8005dde:	441a      	add	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f7fe fdb5 	bl	8004956 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005dec:	f001 fb2a 	bl	8007444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005df0:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <prvAddNewTaskToReadyList+0xcc>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00e      	beq.n	8005e16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <prvAddNewTaskToReadyList+0xc8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d207      	bcs.n	8005e16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e06:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <prvAddNewTaskToReadyList+0xdc>)
 8005e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e16:	bf00      	nop
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000c28 	.word	0x20000c28
 8005e24:	20000754 	.word	0x20000754
 8005e28:	20000c34 	.word	0x20000c34
 8005e2c:	20000c44 	.word	0x20000c44
 8005e30:	20000c30 	.word	0x20000c30
 8005e34:	20000758 	.word	0x20000758
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d017      	beq.n	8005e7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e4e:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <vTaskDelay+0x60>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <vTaskDelay+0x30>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	60bb      	str	r3, [r7, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e6c:	f000 f880 	bl	8005f70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e70:	2100      	movs	r1, #0
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fde8 	bl	8006a48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e78:	f000 f888 	bl	8005f8c <xTaskResumeAll>
 8005e7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d107      	bne.n	8005e94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e84:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <vTaskDelay+0x64>)
 8005e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e94:	bf00      	nop
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000c50 	.word	0x20000c50
 8005ea0:	e000ed04 	.word	0xe000ed04

08005ea4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08a      	sub	sp, #40	; 0x28
 8005ea8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005eb2:	463a      	mov	r2, r7
 8005eb4:	1d39      	adds	r1, r7, #4
 8005eb6:	f107 0308 	add.w	r3, r7, #8
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe fcea 	bl	8004894 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	9202      	str	r2, [sp, #8]
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	460a      	mov	r2, r1
 8005ed2:	4921      	ldr	r1, [pc, #132]	; (8005f58 <vTaskStartScheduler+0xb4>)
 8005ed4:	4821      	ldr	r0, [pc, #132]	; (8005f5c <vTaskStartScheduler+0xb8>)
 8005ed6:	f7ff fe0f 	bl	8005af8 <xTaskCreateStatic>
 8005eda:	4603      	mov	r3, r0
 8005edc:	4a20      	ldr	r2, [pc, #128]	; (8005f60 <vTaskStartScheduler+0xbc>)
 8005ede:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ee0:	4b1f      	ldr	r3, [pc, #124]	; (8005f60 <vTaskStartScheduler+0xbc>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	e001      	b.n	8005ef2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d102      	bne.n	8005efe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ef8:	f000 fdfa 	bl	8006af0 <xTimerCreateTimerTask>
 8005efc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d116      	bne.n	8005f32 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	613b      	str	r3, [r7, #16]
}
 8005f16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f18:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <vTaskStartScheduler+0xc0>)
 8005f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f20:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <vTaskStartScheduler+0xc4>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f26:	4b11      	ldr	r3, [pc, #68]	; (8005f6c <vTaskStartScheduler+0xc8>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f2c:	f001 f9b8 	bl	80072a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f30:	e00e      	b.n	8005f50 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f38:	d10a      	bne.n	8005f50 <vTaskStartScheduler+0xac>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	60fb      	str	r3, [r7, #12]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <vTaskStartScheduler+0xaa>
}
 8005f50:	bf00      	nop
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	080083e8 	.word	0x080083e8
 8005f5c:	08006589 	.word	0x08006589
 8005f60:	20000c4c 	.word	0x20000c4c
 8005f64:	20000c48 	.word	0x20000c48
 8005f68:	20000c34 	.word	0x20000c34
 8005f6c:	20000c2c 	.word	0x20000c2c

08005f70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f74:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <vTaskSuspendAll+0x18>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	4a03      	ldr	r2, [pc, #12]	; (8005f88 <vTaskSuspendAll+0x18>)
 8005f7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f7e:	bf00      	nop
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	20000c50 	.word	0x20000c50

08005f8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f9a:	4b42      	ldr	r3, [pc, #264]	; (80060a4 <xTaskResumeAll+0x118>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	603b      	str	r3, [r7, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fb8:	f001 fa14 	bl	80073e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fbc:	4b39      	ldr	r3, [pc, #228]	; (80060a4 <xTaskResumeAll+0x118>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	4a38      	ldr	r2, [pc, #224]	; (80060a4 <xTaskResumeAll+0x118>)
 8005fc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc6:	4b37      	ldr	r3, [pc, #220]	; (80060a4 <xTaskResumeAll+0x118>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d162      	bne.n	8006094 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fce:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <xTaskResumeAll+0x11c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d05e      	beq.n	8006094 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fd6:	e02f      	b.n	8006038 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd8:	4b34      	ldr	r3, [pc, #208]	; (80060ac <xTaskResumeAll+0x120>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3318      	adds	r3, #24
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fe fd13 	bl	8004a10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fd0e 	bl	8004a10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <xTaskResumeAll+0x124>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d903      	bls.n	8006008 <xTaskResumeAll+0x7c>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	4a2a      	ldr	r2, [pc, #168]	; (80060b0 <xTaskResumeAll+0x124>)
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4a27      	ldr	r2, [pc, #156]	; (80060b4 <xTaskResumeAll+0x128>)
 8006016:	441a      	add	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3304      	adds	r3, #4
 800601c:	4619      	mov	r1, r3
 800601e:	4610      	mov	r0, r2
 8006020:	f7fe fc99 	bl	8004956 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006028:	4b23      	ldr	r3, [pc, #140]	; (80060b8 <xTaskResumeAll+0x12c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	429a      	cmp	r2, r3
 8006030:	d302      	bcc.n	8006038 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006032:	4b22      	ldr	r3, [pc, #136]	; (80060bc <xTaskResumeAll+0x130>)
 8006034:	2201      	movs	r2, #1
 8006036:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006038:	4b1c      	ldr	r3, [pc, #112]	; (80060ac <xTaskResumeAll+0x120>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1cb      	bne.n	8005fd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006046:	f000 fb55 	bl	80066f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800604a:	4b1d      	ldr	r3, [pc, #116]	; (80060c0 <xTaskResumeAll+0x134>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d010      	beq.n	8006078 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006056:	f000 f847 	bl	80060e8 <xTaskIncrementTick>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006060:	4b16      	ldr	r3, [pc, #88]	; (80060bc <xTaskResumeAll+0x130>)
 8006062:	2201      	movs	r2, #1
 8006064:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3b01      	subs	r3, #1
 800606a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f1      	bne.n	8006056 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006072:	4b13      	ldr	r3, [pc, #76]	; (80060c0 <xTaskResumeAll+0x134>)
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006078:	4b10      	ldr	r3, [pc, #64]	; (80060bc <xTaskResumeAll+0x130>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d009      	beq.n	8006094 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006080:	2301      	movs	r3, #1
 8006082:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <xTaskResumeAll+0x138>)
 8006086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006094:	f001 f9d6 	bl	8007444 <vPortExitCritical>

	return xAlreadyYielded;
 8006098:	68bb      	ldr	r3, [r7, #8]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000c50 	.word	0x20000c50
 80060a8:	20000c28 	.word	0x20000c28
 80060ac:	20000be8 	.word	0x20000be8
 80060b0:	20000c30 	.word	0x20000c30
 80060b4:	20000758 	.word	0x20000758
 80060b8:	20000754 	.word	0x20000754
 80060bc:	20000c3c 	.word	0x20000c3c
 80060c0:	20000c38 	.word	0x20000c38
 80060c4:	e000ed04 	.word	0xe000ed04

080060c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <xTaskGetTickCount+0x1c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060d4:	687b      	ldr	r3, [r7, #4]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000c2c 	.word	0x20000c2c

080060e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060f2:	4b4f      	ldr	r3, [pc, #316]	; (8006230 <xTaskIncrementTick+0x148>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f040 808f 	bne.w	800621a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060fc:	4b4d      	ldr	r3, [pc, #308]	; (8006234 <xTaskIncrementTick+0x14c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3301      	adds	r3, #1
 8006102:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006104:	4a4b      	ldr	r2, [pc, #300]	; (8006234 <xTaskIncrementTick+0x14c>)
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d120      	bne.n	8006152 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006110:	4b49      	ldr	r3, [pc, #292]	; (8006238 <xTaskIncrementTick+0x150>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <xTaskIncrementTick+0x48>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	603b      	str	r3, [r7, #0]
}
 800612c:	bf00      	nop
 800612e:	e7fe      	b.n	800612e <xTaskIncrementTick+0x46>
 8006130:	4b41      	ldr	r3, [pc, #260]	; (8006238 <xTaskIncrementTick+0x150>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	4b41      	ldr	r3, [pc, #260]	; (800623c <xTaskIncrementTick+0x154>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a3f      	ldr	r2, [pc, #252]	; (8006238 <xTaskIncrementTick+0x150>)
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	4a3f      	ldr	r2, [pc, #252]	; (800623c <xTaskIncrementTick+0x154>)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	4b3e      	ldr	r3, [pc, #248]	; (8006240 <xTaskIncrementTick+0x158>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3301      	adds	r3, #1
 800614a:	4a3d      	ldr	r2, [pc, #244]	; (8006240 <xTaskIncrementTick+0x158>)
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	f000 fad1 	bl	80066f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006152:	4b3c      	ldr	r3, [pc, #240]	; (8006244 <xTaskIncrementTick+0x15c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	429a      	cmp	r2, r3
 800615a:	d349      	bcc.n	80061f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800615c:	4b36      	ldr	r3, [pc, #216]	; (8006238 <xTaskIncrementTick+0x150>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006166:	4b37      	ldr	r3, [pc, #220]	; (8006244 <xTaskIncrementTick+0x15c>)
 8006168:	f04f 32ff 	mov.w	r2, #4294967295
 800616c:	601a      	str	r2, [r3, #0]
					break;
 800616e:	e03f      	b.n	80061f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006170:	4b31      	ldr	r3, [pc, #196]	; (8006238 <xTaskIncrementTick+0x150>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	429a      	cmp	r2, r3
 8006186:	d203      	bcs.n	8006190 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006188:	4a2e      	ldr	r2, [pc, #184]	; (8006244 <xTaskIncrementTick+0x15c>)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800618e:	e02f      	b.n	80061f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	3304      	adds	r3, #4
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe fc3b 	bl	8004a10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	3318      	adds	r3, #24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fc32 	bl	8004a10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b0:	4b25      	ldr	r3, [pc, #148]	; (8006248 <xTaskIncrementTick+0x160>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d903      	bls.n	80061c0 <xTaskIncrementTick+0xd8>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	4a22      	ldr	r2, [pc, #136]	; (8006248 <xTaskIncrementTick+0x160>)
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4a1f      	ldr	r2, [pc, #124]	; (800624c <xTaskIncrementTick+0x164>)
 80061ce:	441a      	add	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4619      	mov	r1, r3
 80061d6:	4610      	mov	r0, r2
 80061d8:	f7fe fbbd 	bl	8004956 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e0:	4b1b      	ldr	r3, [pc, #108]	; (8006250 <xTaskIncrementTick+0x168>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d3b8      	bcc.n	800615c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80061ea:	2301      	movs	r3, #1
 80061ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ee:	e7b5      	b.n	800615c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061f0:	4b17      	ldr	r3, [pc, #92]	; (8006250 <xTaskIncrementTick+0x168>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f6:	4915      	ldr	r1, [pc, #84]	; (800624c <xTaskIncrementTick+0x164>)
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d901      	bls.n	800620c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006208:	2301      	movs	r3, #1
 800620a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800620c:	4b11      	ldr	r3, [pc, #68]	; (8006254 <xTaskIncrementTick+0x16c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	e004      	b.n	8006224 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800621a:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <xTaskIncrementTick+0x170>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3301      	adds	r3, #1
 8006220:	4a0d      	ldr	r2, [pc, #52]	; (8006258 <xTaskIncrementTick+0x170>)
 8006222:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006224:	697b      	ldr	r3, [r7, #20]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000c50 	.word	0x20000c50
 8006234:	20000c2c 	.word	0x20000c2c
 8006238:	20000be0 	.word	0x20000be0
 800623c:	20000be4 	.word	0x20000be4
 8006240:	20000c40 	.word	0x20000c40
 8006244:	20000c48 	.word	0x20000c48
 8006248:	20000c30 	.word	0x20000c30
 800624c:	20000758 	.word	0x20000758
 8006250:	20000754 	.word	0x20000754
 8006254:	20000c3c 	.word	0x20000c3c
 8006258:	20000c38 	.word	0x20000c38

0800625c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006262:	4b28      	ldr	r3, [pc, #160]	; (8006304 <vTaskSwitchContext+0xa8>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800626a:	4b27      	ldr	r3, [pc, #156]	; (8006308 <vTaskSwitchContext+0xac>)
 800626c:	2201      	movs	r2, #1
 800626e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006270:	e041      	b.n	80062f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006272:	4b25      	ldr	r3, [pc, #148]	; (8006308 <vTaskSwitchContext+0xac>)
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006278:	4b24      	ldr	r3, [pc, #144]	; (800630c <vTaskSwitchContext+0xb0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e010      	b.n	80062a2 <vTaskSwitchContext+0x46>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <vTaskSwitchContext+0x40>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	607b      	str	r3, [r7, #4]
}
 8006298:	bf00      	nop
 800629a:	e7fe      	b.n	800629a <vTaskSwitchContext+0x3e>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3b01      	subs	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	491b      	ldr	r1, [pc, #108]	; (8006310 <vTaskSwitchContext+0xb4>)
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	440b      	add	r3, r1
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0e4      	beq.n	8006280 <vTaskSwitchContext+0x24>
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4a13      	ldr	r2, [pc, #76]	; (8006310 <vTaskSwitchContext+0xb4>)
 80062c2:	4413      	add	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	605a      	str	r2, [r3, #4]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	3308      	adds	r3, #8
 80062d8:	429a      	cmp	r2, r3
 80062da:	d104      	bne.n	80062e6 <vTaskSwitchContext+0x8a>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	605a      	str	r2, [r3, #4]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	4a09      	ldr	r2, [pc, #36]	; (8006314 <vTaskSwitchContext+0xb8>)
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	4a06      	ldr	r2, [pc, #24]	; (800630c <vTaskSwitchContext+0xb0>)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6013      	str	r3, [r2, #0]
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000c50 	.word	0x20000c50
 8006308:	20000c3c 	.word	0x20000c3c
 800630c:	20000c30 	.word	0x20000c30
 8006310:	20000758 	.word	0x20000758
 8006314:	20000754 	.word	0x20000754

08006318 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	60fb      	str	r3, [r7, #12]
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800633e:	4b07      	ldr	r3, [pc, #28]	; (800635c <vTaskPlaceOnEventList+0x44>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3318      	adds	r3, #24
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fe fb29 	bl	800499e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800634c:	2101      	movs	r1, #1
 800634e:	6838      	ldr	r0, [r7, #0]
 8006350:	f000 fb7a 	bl	8006a48 <prvAddCurrentTaskToDelayedList>
}
 8006354:	bf00      	nop
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000754 	.word	0x20000754

08006360 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	617b      	str	r3, [r7, #20]
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3318      	adds	r3, #24
 800638e:	4619      	mov	r1, r3
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7fe fae0 	bl	8004956 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800639c:	f04f 33ff 	mov.w	r3, #4294967295
 80063a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	68b8      	ldr	r0, [r7, #8]
 80063a6:	f000 fb4f 	bl	8006a48 <prvAddCurrentTaskToDelayedList>
	}
 80063aa:	bf00      	nop
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000754 	.word	0x20000754

080063b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	60fb      	str	r3, [r7, #12]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	3318      	adds	r3, #24
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fe fb11 	bl	8004a10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ee:	4b1e      	ldr	r3, [pc, #120]	; (8006468 <xTaskRemoveFromEventList+0xb0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d11d      	bne.n	8006432 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fb08 	bl	8004a10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006404:	4b19      	ldr	r3, [pc, #100]	; (800646c <xTaskRemoveFromEventList+0xb4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d903      	bls.n	8006414 <xTaskRemoveFromEventList+0x5c>
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	4a16      	ldr	r2, [pc, #88]	; (800646c <xTaskRemoveFromEventList+0xb4>)
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006418:	4613      	mov	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4a13      	ldr	r2, [pc, #76]	; (8006470 <xTaskRemoveFromEventList+0xb8>)
 8006422:	441a      	add	r2, r3
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	3304      	adds	r3, #4
 8006428:	4619      	mov	r1, r3
 800642a:	4610      	mov	r0, r2
 800642c:	f7fe fa93 	bl	8004956 <vListInsertEnd>
 8006430:	e005      	b.n	800643e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	3318      	adds	r3, #24
 8006436:	4619      	mov	r1, r3
 8006438:	480e      	ldr	r0, [pc, #56]	; (8006474 <xTaskRemoveFromEventList+0xbc>)
 800643a:	f7fe fa8c 	bl	8004956 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006442:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <xTaskRemoveFromEventList+0xc0>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	429a      	cmp	r2, r3
 800644a:	d905      	bls.n	8006458 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <xTaskRemoveFromEventList+0xc4>)
 8006452:	2201      	movs	r2, #1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e001      	b.n	800645c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006458:	2300      	movs	r3, #0
 800645a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800645c:	697b      	ldr	r3, [r7, #20]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000c50 	.word	0x20000c50
 800646c:	20000c30 	.word	0x20000c30
 8006470:	20000758 	.word	0x20000758
 8006474:	20000be8 	.word	0x20000be8
 8006478:	20000754 	.word	0x20000754
 800647c:	20000c3c 	.word	0x20000c3c

08006480 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006488:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <vTaskInternalSetTimeOutState+0x24>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <vTaskInternalSetTimeOutState+0x28>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	605a      	str	r2, [r3, #4]
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	20000c40 	.word	0x20000c40
 80064a8:	20000c2c 	.word	0x20000c2c

080064ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	613b      	str	r3, [r7, #16]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	60fb      	str	r3, [r7, #12]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80064ee:	f000 ff79 	bl	80073e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064f2:	4b1d      	ldr	r3, [pc, #116]	; (8006568 <xTaskCheckForTimeOut+0xbc>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650a:	d102      	bne.n	8006512 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	e023      	b.n	800655a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b15      	ldr	r3, [pc, #84]	; (800656c <xTaskCheckForTimeOut+0xc0>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d007      	beq.n	800652e <xTaskCheckForTimeOut+0x82>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	429a      	cmp	r2, r3
 8006526:	d302      	bcc.n	800652e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	e015      	b.n	800655a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	429a      	cmp	r2, r3
 8006536:	d20b      	bcs.n	8006550 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff ff9b 	bl	8006480 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800654a:	2300      	movs	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	e004      	b.n	800655a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006556:	2301      	movs	r3, #1
 8006558:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800655a:	f000 ff73 	bl	8007444 <vPortExitCritical>

	return xReturn;
 800655e:	69fb      	ldr	r3, [r7, #28]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3720      	adds	r7, #32
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20000c2c 	.word	0x20000c2c
 800656c:	20000c40 	.word	0x20000c40

08006570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006574:	4b03      	ldr	r3, [pc, #12]	; (8006584 <vTaskMissedYield+0x14>)
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
}
 800657a:	bf00      	nop
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	20000c3c 	.word	0x20000c3c

08006588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006590:	f000 f852 	bl	8006638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <prvIdleTask+0x28>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d9f9      	bls.n	8006590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <prvIdleTask+0x2c>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065ac:	e7f0      	b.n	8006590 <prvIdleTask+0x8>
 80065ae:	bf00      	nop
 80065b0:	20000758 	.word	0x20000758
 80065b4:	e000ed04 	.word	0xe000ed04

080065b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065be:	2300      	movs	r3, #0
 80065c0:	607b      	str	r3, [r7, #4]
 80065c2:	e00c      	b.n	80065de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4a12      	ldr	r2, [pc, #72]	; (8006618 <prvInitialiseTaskLists+0x60>)
 80065d0:	4413      	add	r3, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe f992 	bl	80048fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3301      	adds	r3, #1
 80065dc:	607b      	str	r3, [r7, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b37      	cmp	r3, #55	; 0x37
 80065e2:	d9ef      	bls.n	80065c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065e4:	480d      	ldr	r0, [pc, #52]	; (800661c <prvInitialiseTaskLists+0x64>)
 80065e6:	f7fe f989 	bl	80048fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065ea:	480d      	ldr	r0, [pc, #52]	; (8006620 <prvInitialiseTaskLists+0x68>)
 80065ec:	f7fe f986 	bl	80048fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065f0:	480c      	ldr	r0, [pc, #48]	; (8006624 <prvInitialiseTaskLists+0x6c>)
 80065f2:	f7fe f983 	bl	80048fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065f6:	480c      	ldr	r0, [pc, #48]	; (8006628 <prvInitialiseTaskLists+0x70>)
 80065f8:	f7fe f980 	bl	80048fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065fc:	480b      	ldr	r0, [pc, #44]	; (800662c <prvInitialiseTaskLists+0x74>)
 80065fe:	f7fe f97d 	bl	80048fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <prvInitialiseTaskLists+0x78>)
 8006604:	4a05      	ldr	r2, [pc, #20]	; (800661c <prvInitialiseTaskLists+0x64>)
 8006606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <prvInitialiseTaskLists+0x7c>)
 800660a:	4a05      	ldr	r2, [pc, #20]	; (8006620 <prvInitialiseTaskLists+0x68>)
 800660c:	601a      	str	r2, [r3, #0]
}
 800660e:	bf00      	nop
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000758 	.word	0x20000758
 800661c:	20000bb8 	.word	0x20000bb8
 8006620:	20000bcc 	.word	0x20000bcc
 8006624:	20000be8 	.word	0x20000be8
 8006628:	20000bfc 	.word	0x20000bfc
 800662c:	20000c14 	.word	0x20000c14
 8006630:	20000be0 	.word	0x20000be0
 8006634:	20000be4 	.word	0x20000be4

08006638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800663e:	e019      	b.n	8006674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006640:	f000 fed0 	bl	80073e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006644:	4b10      	ldr	r3, [pc, #64]	; (8006688 <prvCheckTasksWaitingTermination+0x50>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe f9dd 	bl	8004a10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006656:	4b0d      	ldr	r3, [pc, #52]	; (800668c <prvCheckTasksWaitingTermination+0x54>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3b01      	subs	r3, #1
 800665c:	4a0b      	ldr	r2, [pc, #44]	; (800668c <prvCheckTasksWaitingTermination+0x54>)
 800665e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <prvCheckTasksWaitingTermination+0x58>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3b01      	subs	r3, #1
 8006666:	4a0a      	ldr	r2, [pc, #40]	; (8006690 <prvCheckTasksWaitingTermination+0x58>)
 8006668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800666a:	f000 feeb 	bl	8007444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f810 	bl	8006694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <prvCheckTasksWaitingTermination+0x58>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e1      	bne.n	8006640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800667c:	bf00      	nop
 800667e:	bf00      	nop
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000bfc 	.word	0x20000bfc
 800668c:	20000c28 	.word	0x20000c28
 8006690:	20000c10 	.word	0x20000c10

08006694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d108      	bne.n	80066b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 f888 	bl	80077c0 <vPortFree>
				vPortFree( pxTCB );
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 f885 	bl	80077c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066b6:	e018      	b.n	80066ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d103      	bne.n	80066ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 f87c 	bl	80077c0 <vPortFree>
	}
 80066c8:	e00f      	b.n	80066ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d00a      	beq.n	80066ea <prvDeleteTCB+0x56>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	60fb      	str	r3, [r7, #12]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <prvDeleteTCB+0x54>
	}
 80066ea:	bf00      	nop
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066fa:	4b0c      	ldr	r3, [pc, #48]	; (800672c <prvResetNextTaskUnblockTime+0x38>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d104      	bne.n	800670e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <prvResetNextTaskUnblockTime+0x3c>)
 8006706:	f04f 32ff 	mov.w	r2, #4294967295
 800670a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800670c:	e008      	b.n	8006720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800670e:	4b07      	ldr	r3, [pc, #28]	; (800672c <prvResetNextTaskUnblockTime+0x38>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	4a04      	ldr	r2, [pc, #16]	; (8006730 <prvResetNextTaskUnblockTime+0x3c>)
 800671e:	6013      	str	r3, [r2, #0]
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	20000be0 	.word	0x20000be0
 8006730:	20000c48 	.word	0x20000c48

08006734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800673a:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <xTaskGetSchedulerState+0x34>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d102      	bne.n	8006748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006742:	2301      	movs	r3, #1
 8006744:	607b      	str	r3, [r7, #4]
 8006746:	e008      	b.n	800675a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006748:	4b08      	ldr	r3, [pc, #32]	; (800676c <xTaskGetSchedulerState+0x38>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006750:	2302      	movs	r3, #2
 8006752:	607b      	str	r3, [r7, #4]
 8006754:	e001      	b.n	800675a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006756:	2300      	movs	r3, #0
 8006758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800675a:	687b      	ldr	r3, [r7, #4]
	}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	20000c34 	.word	0x20000c34
 800676c:	20000c50 	.word	0x20000c50

08006770 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d051      	beq.n	800682a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678a:	4b2a      	ldr	r3, [pc, #168]	; (8006834 <xTaskPriorityInherit+0xc4>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	429a      	cmp	r2, r3
 8006792:	d241      	bcs.n	8006818 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	db06      	blt.n	80067aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800679c:	4b25      	ldr	r3, [pc, #148]	; (8006834 <xTaskPriorityInherit+0xc4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	6959      	ldr	r1, [r3, #20]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4a1f      	ldr	r2, [pc, #124]	; (8006838 <xTaskPriorityInherit+0xc8>)
 80067bc:	4413      	add	r3, r2
 80067be:	4299      	cmp	r1, r3
 80067c0:	d122      	bne.n	8006808 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe f922 	bl	8004a10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067cc:	4b19      	ldr	r3, [pc, #100]	; (8006834 <xTaskPriorityInherit+0xc4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067da:	4b18      	ldr	r3, [pc, #96]	; (800683c <xTaskPriorityInherit+0xcc>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d903      	bls.n	80067ea <xTaskPriorityInherit+0x7a>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	4a15      	ldr	r2, [pc, #84]	; (800683c <xTaskPriorityInherit+0xcc>)
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4a10      	ldr	r2, [pc, #64]	; (8006838 <xTaskPriorityInherit+0xc8>)
 80067f8:	441a      	add	r2, r3
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	3304      	adds	r3, #4
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f7fe f8a8 	bl	8004956 <vListInsertEnd>
 8006806:	e004      	b.n	8006812 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <xTaskPriorityInherit+0xc4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006812:	2301      	movs	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	e008      	b.n	800682a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <xTaskPriorityInherit+0xc4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	429a      	cmp	r2, r3
 8006824:	d201      	bcs.n	800682a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006826:	2301      	movs	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800682a:	68fb      	ldr	r3, [r7, #12]
	}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20000754 	.word	0x20000754
 8006838:	20000758 	.word	0x20000758
 800683c:	20000c30 	.word	0x20000c30

08006840 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800684c:	2300      	movs	r3, #0
 800684e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d056      	beq.n	8006904 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006856:	4b2e      	ldr	r3, [pc, #184]	; (8006910 <xTaskPriorityDisinherit+0xd0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	429a      	cmp	r2, r3
 800685e:	d00a      	beq.n	8006876 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	60fb      	str	r3, [r7, #12]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10a      	bne.n	8006894 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	60bb      	str	r3, [r7, #8]
}
 8006890:	bf00      	nop
 8006892:	e7fe      	b.n	8006892 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006898:	1e5a      	subs	r2, r3, #1
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d02c      	beq.n	8006904 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d128      	bne.n	8006904 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	3304      	adds	r3, #4
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fe f8aa 	bl	8004a10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d4:	4b0f      	ldr	r3, [pc, #60]	; (8006914 <xTaskPriorityDisinherit+0xd4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d903      	bls.n	80068e4 <xTaskPriorityDisinherit+0xa4>
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	4a0c      	ldr	r2, [pc, #48]	; (8006914 <xTaskPriorityDisinherit+0xd4>)
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4a09      	ldr	r2, [pc, #36]	; (8006918 <xTaskPriorityDisinherit+0xd8>)
 80068f2:	441a      	add	r2, r3
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	3304      	adds	r3, #4
 80068f8:	4619      	mov	r1, r3
 80068fa:	4610      	mov	r0, r2
 80068fc:	f7fe f82b 	bl	8004956 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006900:	2301      	movs	r3, #1
 8006902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006904:	697b      	ldr	r3, [r7, #20]
	}
 8006906:	4618      	mov	r0, r3
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20000754 	.word	0x20000754
 8006914:	20000c30 	.word	0x20000c30
 8006918:	20000758 	.word	0x20000758

0800691c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800692a:	2301      	movs	r3, #1
 800692c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d06a      	beq.n	8006a0a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	60fb      	str	r3, [r7, #12]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d902      	bls.n	8006962 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	61fb      	str	r3, [r7, #28]
 8006960:	e002      	b.n	8006968 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006966:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	429a      	cmp	r2, r3
 8006970:	d04b      	beq.n	8006a0a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	429a      	cmp	r2, r3
 800697a:	d146      	bne.n	8006a0a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800697c:	4b25      	ldr	r3, [pc, #148]	; (8006a14 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	429a      	cmp	r2, r3
 8006984:	d10a      	bne.n	800699c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	60bb      	str	r3, [r7, #8]
}
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	db04      	blt.n	80069ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	6959      	ldr	r1, [r3, #20]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4a13      	ldr	r2, [pc, #76]	; (8006a18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80069ca:	4413      	add	r3, r2
 80069cc:	4299      	cmp	r1, r3
 80069ce:	d11c      	bne.n	8006a0a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	3304      	adds	r3, #4
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fe f81b 	bl	8004a10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069de:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d903      	bls.n	80069ee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	4a0c      	ldr	r2, [pc, #48]	; (8006a1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4a07      	ldr	r2, [pc, #28]	; (8006a18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80069fc:	441a      	add	r2, r3
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f7fd ffa6 	bl	8004956 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a0a:	bf00      	nop
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000754 	.word	0x20000754
 8006a18:	20000758 	.word	0x20000758
 8006a1c:	20000c30 	.word	0x20000c30

08006a20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a24:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a32:	3201      	adds	r2, #1
 8006a34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006a36:	4b03      	ldr	r3, [pc, #12]	; (8006a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a38:	681b      	ldr	r3, [r3, #0]
	}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	20000754 	.word	0x20000754

08006a48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a52:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a58:	4b20      	ldr	r3, [pc, #128]	; (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fd ffd6 	bl	8004a10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6a:	d10a      	bne.n	8006a82 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d007      	beq.n	8006a82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a72:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4819      	ldr	r0, [pc, #100]	; (8006ae0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a7c:	f7fd ff6b 	bl	8004956 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a80:	e026      	b.n	8006ad0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4413      	add	r3, r2
 8006a88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a8a:	4b14      	ldr	r3, [pc, #80]	; (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d209      	bcs.n	8006aae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a9a:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f7fd ff79 	bl	800499e <vListInsert>
}
 8006aac:	e010      	b.n	8006ad0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aae:	4b0e      	ldr	r3, [pc, #56]	; (8006ae8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fd ff6f 	bl	800499e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ac0:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d202      	bcs.n	8006ad0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006aca:	4a08      	ldr	r2, [pc, #32]	; (8006aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	6013      	str	r3, [r2, #0]
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000c2c 	.word	0x20000c2c
 8006adc:	20000754 	.word	0x20000754
 8006ae0:	20000c14 	.word	0x20000c14
 8006ae4:	20000be4 	.word	0x20000be4
 8006ae8:	20000be0 	.word	0x20000be0
 8006aec:	20000c48 	.word	0x20000c48

08006af0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08a      	sub	sp, #40	; 0x28
 8006af4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006afa:	f000 fb07 	bl	800710c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006afe:	4b1c      	ldr	r3, [pc, #112]	; (8006b70 <xTimerCreateTimerTask+0x80>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d021      	beq.n	8006b4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b0e:	1d3a      	adds	r2, r7, #4
 8006b10:	f107 0108 	add.w	r1, r7, #8
 8006b14:	f107 030c 	add.w	r3, r7, #12
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fd fed5 	bl	80048c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b1e:	6879      	ldr	r1, [r7, #4]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	9202      	str	r2, [sp, #8]
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	2302      	movs	r3, #2
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	460a      	mov	r2, r1
 8006b30:	4910      	ldr	r1, [pc, #64]	; (8006b74 <xTimerCreateTimerTask+0x84>)
 8006b32:	4811      	ldr	r0, [pc, #68]	; (8006b78 <xTimerCreateTimerTask+0x88>)
 8006b34:	f7fe ffe0 	bl	8005af8 <xTaskCreateStatic>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	4a10      	ldr	r2, [pc, #64]	; (8006b7c <xTimerCreateTimerTask+0x8c>)
 8006b3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b3e:	4b0f      	ldr	r3, [pc, #60]	; (8006b7c <xTimerCreateTimerTask+0x8c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b46:	2301      	movs	r3, #1
 8006b48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	613b      	str	r3, [r7, #16]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b66:	697b      	ldr	r3, [r7, #20]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20000c84 	.word	0x20000c84
 8006b74:	080083f0 	.word	0x080083f0
 8006b78:	08006cb5 	.word	0x08006cb5
 8006b7c:	20000c88 	.word	0x20000c88

08006b80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08a      	sub	sp, #40	; 0x28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	623b      	str	r3, [r7, #32]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bae:	4b1a      	ldr	r3, [pc, #104]	; (8006c18 <xTimerGenericCommand+0x98>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d02a      	beq.n	8006c0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b05      	cmp	r3, #5
 8006bc6:	dc18      	bgt.n	8006bfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bc8:	f7ff fdb4 	bl	8006734 <xTaskGetSchedulerState>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d109      	bne.n	8006be6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bd2:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <xTimerGenericCommand+0x98>)
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	f107 0110 	add.w	r1, r7, #16
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bde:	f7fe f8e9 	bl	8004db4 <xQueueGenericSend>
 8006be2:	6278      	str	r0, [r7, #36]	; 0x24
 8006be4:	e012      	b.n	8006c0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006be6:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <xTimerGenericCommand+0x98>)
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	f107 0110 	add.w	r1, r7, #16
 8006bee:	2300      	movs	r3, #0
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f7fe f8df 	bl	8004db4 <xQueueGenericSend>
 8006bf6:	6278      	str	r0, [r7, #36]	; 0x24
 8006bf8:	e008      	b.n	8006c0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006bfa:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <xTimerGenericCommand+0x98>)
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	f107 0110 	add.w	r1, r7, #16
 8006c02:	2300      	movs	r3, #0
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	f7fe f9d3 	bl	8004fb0 <xQueueGenericSendFromISR>
 8006c0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3728      	adds	r7, #40	; 0x28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000c84 	.word	0x20000c84

08006c1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af02      	add	r7, sp, #8
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c26:	4b22      	ldr	r3, [pc, #136]	; (8006cb0 <prvProcessExpiredTimer+0x94>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	3304      	adds	r3, #4
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fd feeb 	bl	8004a10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d022      	beq.n	8006c8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	699a      	ldr	r2, [r3, #24]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	18d1      	adds	r1, r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	6978      	ldr	r0, [r7, #20]
 8006c56:	f000 f8d1 	bl	8006dfc <prvInsertTimerInActiveList>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01f      	beq.n	8006ca0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c60:	2300      	movs	r3, #0
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	2300      	movs	r3, #0
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	2100      	movs	r1, #0
 8006c6a:	6978      	ldr	r0, [r7, #20]
 8006c6c:	f7ff ff88 	bl	8006b80 <xTimerGenericCommand>
 8006c70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d113      	bne.n	8006ca0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	60fb      	str	r3, [r7, #12]
}
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c94:	f023 0301 	bic.w	r3, r3, #1
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	6978      	ldr	r0, [r7, #20]
 8006ca6:	4798      	blx	r3
}
 8006ca8:	bf00      	nop
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20000c7c 	.word	0x20000c7c

08006cb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cbc:	f107 0308 	add.w	r3, r7, #8
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 f857 	bl	8006d74 <prvGetNextExpireTime>
 8006cc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f803 	bl	8006cd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006cd2:	f000 f8d5 	bl	8006e80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cd6:	e7f1      	b.n	8006cbc <prvTimerTask+0x8>

08006cd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ce2:	f7ff f945 	bl	8005f70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ce6:	f107 0308 	add.w	r3, r7, #8
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 f866 	bl	8006dbc <prvSampleTimeNow>
 8006cf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d130      	bne.n	8006d5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <prvProcessTimerOrBlockTask+0x3c>
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d806      	bhi.n	8006d14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d06:	f7ff f941 	bl	8005f8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff ff85 	bl	8006c1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d12:	e024      	b.n	8006d5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d008      	beq.n	8006d2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d1a:	4b13      	ldr	r3, [pc, #76]	; (8006d68 <prvProcessTimerOrBlockTask+0x90>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <prvProcessTimerOrBlockTask+0x50>
 8006d24:	2301      	movs	r3, #1
 8006d26:	e000      	b.n	8006d2a <prvProcessTimerOrBlockTask+0x52>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d2c:	4b0f      	ldr	r3, [pc, #60]	; (8006d6c <prvProcessTimerOrBlockTask+0x94>)
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f7fe fea9 	bl	8005a90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d3e:	f7ff f925 	bl	8005f8c <xTaskResumeAll>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d48:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <prvProcessTimerOrBlockTask+0x98>)
 8006d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	f3bf 8f6f 	isb	sy
}
 8006d58:	e001      	b.n	8006d5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d5a:	f7ff f917 	bl	8005f8c <xTaskResumeAll>
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000c80 	.word	0x20000c80
 8006d6c:	20000c84 	.word	0x20000c84
 8006d70:	e000ed04 	.word	0xe000ed04

08006d74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d7c:	4b0e      	ldr	r3, [pc, #56]	; (8006db8 <prvGetNextExpireTime+0x44>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <prvGetNextExpireTime+0x16>
 8006d86:	2201      	movs	r2, #1
 8006d88:	e000      	b.n	8006d8c <prvGetNextExpireTime+0x18>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d105      	bne.n	8006da4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d98:	4b07      	ldr	r3, [pc, #28]	; (8006db8 <prvGetNextExpireTime+0x44>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	e001      	b.n	8006da8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006da8:	68fb      	ldr	r3, [r7, #12]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	20000c7c 	.word	0x20000c7c

08006dbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006dc4:	f7ff f980 	bl	80060c8 <xTaskGetTickCount>
 8006dc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006dca:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <prvSampleTimeNow+0x3c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d205      	bcs.n	8006de0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006dd4:	f000 f936 	bl	8007044 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e002      	b.n	8006de6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006de6:	4a04      	ldr	r2, [pc, #16]	; (8006df8 <prvSampleTimeNow+0x3c>)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006dec:	68fb      	ldr	r3, [r7, #12]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000c8c 	.word	0x20000c8c

08006dfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d812      	bhi.n	8006e48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	1ad2      	subs	r2, r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d302      	bcc.n	8006e36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e30:	2301      	movs	r3, #1
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	e01b      	b.n	8006e6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e36:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <prvInsertTimerInActiveList+0x7c>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4610      	mov	r0, r2
 8006e42:	f7fd fdac 	bl	800499e <vListInsert>
 8006e46:	e012      	b.n	8006e6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d206      	bcs.n	8006e5e <prvInsertTimerInActiveList+0x62>
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d302      	bcc.n	8006e5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	e007      	b.n	8006e6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e5e:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <prvInsertTimerInActiveList+0x80>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3304      	adds	r3, #4
 8006e66:	4619      	mov	r1, r3
 8006e68:	4610      	mov	r0, r2
 8006e6a:	f7fd fd98 	bl	800499e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e6e:	697b      	ldr	r3, [r7, #20]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000c80 	.word	0x20000c80
 8006e7c:	20000c7c 	.word	0x20000c7c

08006e80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08e      	sub	sp, #56	; 0x38
 8006e84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e86:	e0ca      	b.n	800701e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	da18      	bge.n	8006ec0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e8e:	1d3b      	adds	r3, r7, #4
 8006e90:	3304      	adds	r3, #4
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	61fb      	str	r3, [r7, #28]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eb6:	6850      	ldr	r0, [r2, #4]
 8006eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eba:	6892      	ldr	r2, [r2, #8]
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f2c0 80aa 	blt.w	800701c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d004      	beq.n	8006ede <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fd fd99 	bl	8004a10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ede:	463b      	mov	r3, r7
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff ff6b 	bl	8006dbc <prvSampleTimeNow>
 8006ee6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b09      	cmp	r3, #9
 8006eec:	f200 8097 	bhi.w	800701e <prvProcessReceivedCommands+0x19e>
 8006ef0:	a201      	add	r2, pc, #4	; (adr r2, 8006ef8 <prvProcessReceivedCommands+0x78>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f21 	.word	0x08006f21
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f21 	.word	0x08006f21
 8006f04:	08006f95 	.word	0x08006f95
 8006f08:	08006fa9 	.word	0x08006fa9
 8006f0c:	08006ff3 	.word	0x08006ff3
 8006f10:	08006f21 	.word	0x08006f21
 8006f14:	08006f21 	.word	0x08006f21
 8006f18:	08006f95 	.word	0x08006f95
 8006f1c:	08006fa9 	.word	0x08006fa9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f26:	f043 0301 	orr.w	r3, r3, #1
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	18d1      	adds	r1, r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f40:	f7ff ff5c 	bl	8006dfc <prvInsertTimerInActiveList>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d069      	beq.n	800701e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d05e      	beq.n	800701e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	441a      	add	r2, r3
 8006f68:	2300      	movs	r3, #0
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	2100      	movs	r1, #0
 8006f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f72:	f7ff fe05 	bl	8006b80 <xTimerGenericCommand>
 8006f76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d14f      	bne.n	800701e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	61bb      	str	r3, [r7, #24]
}
 8006f90:	bf00      	nop
 8006f92:	e7fe      	b.n	8006f92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f9a:	f023 0301 	bic.w	r3, r3, #1
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006fa6:	e03a      	b.n	800701e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fae:	f043 0301 	orr.w	r3, r3, #1
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	617b      	str	r3, [r7, #20]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	699a      	ldr	r2, [r3, #24]
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	18d1      	adds	r1, r2, r3
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fec:	f7ff ff06 	bl	8006dfc <prvInsertTimerInActiveList>
					break;
 8006ff0:	e015      	b.n	800701e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d103      	bne.n	8007008 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007002:	f000 fbdd 	bl	80077c0 <vPortFree>
 8007006:	e00a      	b.n	800701e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800700e:	f023 0301 	bic.w	r3, r3, #1
 8007012:	b2da      	uxtb	r2, r3
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800701a:	e000      	b.n	800701e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800701c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800701e:	4b08      	ldr	r3, [pc, #32]	; (8007040 <prvProcessReceivedCommands+0x1c0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	1d39      	adds	r1, r7, #4
 8007024:	2200      	movs	r2, #0
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe f8ea 	bl	8005200 <xQueueReceive>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	f47f af2a 	bne.w	8006e88 <prvProcessReceivedCommands+0x8>
	}
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop
 8007038:	3730      	adds	r7, #48	; 0x30
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000c84 	.word	0x20000c84

08007044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800704a:	e048      	b.n	80070de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800704c:	4b2d      	ldr	r3, [pc, #180]	; (8007104 <prvSwitchTimerLists+0xc0>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007056:	4b2b      	ldr	r3, [pc, #172]	; (8007104 <prvSwitchTimerLists+0xc0>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3304      	adds	r3, #4
 8007064:	4618      	mov	r0, r3
 8007066:	f7fd fcd3 	bl	8004a10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d02e      	beq.n	80070de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4413      	add	r3, r2
 8007088:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	429a      	cmp	r2, r3
 8007090:	d90e      	bls.n	80070b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800709e:	4b19      	ldr	r3, [pc, #100]	; (8007104 <prvSwitchTimerLists+0xc0>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7fd fc78 	bl	800499e <vListInsert>
 80070ae:	e016      	b.n	80070de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070b0:	2300      	movs	r3, #0
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	2300      	movs	r3, #0
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	2100      	movs	r1, #0
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f7ff fd60 	bl	8006b80 <xTimerGenericCommand>
 80070c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10a      	bne.n	80070de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	603b      	str	r3, [r7, #0]
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070de:	4b09      	ldr	r3, [pc, #36]	; (8007104 <prvSwitchTimerLists+0xc0>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1b1      	bne.n	800704c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070e8:	4b06      	ldr	r3, [pc, #24]	; (8007104 <prvSwitchTimerLists+0xc0>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070ee:	4b06      	ldr	r3, [pc, #24]	; (8007108 <prvSwitchTimerLists+0xc4>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a04      	ldr	r2, [pc, #16]	; (8007104 <prvSwitchTimerLists+0xc0>)
 80070f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070f6:	4a04      	ldr	r2, [pc, #16]	; (8007108 <prvSwitchTimerLists+0xc4>)
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	6013      	str	r3, [r2, #0]
}
 80070fc:	bf00      	nop
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000c7c 	.word	0x20000c7c
 8007108:	20000c80 	.word	0x20000c80

0800710c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007112:	f000 f967 	bl	80073e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007116:	4b15      	ldr	r3, [pc, #84]	; (800716c <prvCheckForValidListAndQueue+0x60>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d120      	bne.n	8007160 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800711e:	4814      	ldr	r0, [pc, #80]	; (8007170 <prvCheckForValidListAndQueue+0x64>)
 8007120:	f7fd fbec 	bl	80048fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007124:	4813      	ldr	r0, [pc, #76]	; (8007174 <prvCheckForValidListAndQueue+0x68>)
 8007126:	f7fd fbe9 	bl	80048fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800712a:	4b13      	ldr	r3, [pc, #76]	; (8007178 <prvCheckForValidListAndQueue+0x6c>)
 800712c:	4a10      	ldr	r2, [pc, #64]	; (8007170 <prvCheckForValidListAndQueue+0x64>)
 800712e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007130:	4b12      	ldr	r3, [pc, #72]	; (800717c <prvCheckForValidListAndQueue+0x70>)
 8007132:	4a10      	ldr	r2, [pc, #64]	; (8007174 <prvCheckForValidListAndQueue+0x68>)
 8007134:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007136:	2300      	movs	r3, #0
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	4b11      	ldr	r3, [pc, #68]	; (8007180 <prvCheckForValidListAndQueue+0x74>)
 800713c:	4a11      	ldr	r2, [pc, #68]	; (8007184 <prvCheckForValidListAndQueue+0x78>)
 800713e:	2110      	movs	r1, #16
 8007140:	200a      	movs	r0, #10
 8007142:	f7fd fcf7 	bl	8004b34 <xQueueGenericCreateStatic>
 8007146:	4603      	mov	r3, r0
 8007148:	4a08      	ldr	r2, [pc, #32]	; (800716c <prvCheckForValidListAndQueue+0x60>)
 800714a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800714c:	4b07      	ldr	r3, [pc, #28]	; (800716c <prvCheckForValidListAndQueue+0x60>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007154:	4b05      	ldr	r3, [pc, #20]	; (800716c <prvCheckForValidListAndQueue+0x60>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	490b      	ldr	r1, [pc, #44]	; (8007188 <prvCheckForValidListAndQueue+0x7c>)
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fc44 	bl	80059e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007160:	f000 f970 	bl	8007444 <vPortExitCritical>
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000c84 	.word	0x20000c84
 8007170:	20000c54 	.word	0x20000c54
 8007174:	20000c68 	.word	0x20000c68
 8007178:	20000c7c 	.word	0x20000c7c
 800717c:	20000c80 	.word	0x20000c80
 8007180:	20000d30 	.word	0x20000d30
 8007184:	20000c90 	.word	0x20000c90
 8007188:	080083f8 	.word	0x080083f8

0800718c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3b04      	subs	r3, #4
 800719c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3b04      	subs	r3, #4
 80071aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f023 0201 	bic.w	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3b04      	subs	r3, #4
 80071ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071bc:	4a0c      	ldr	r2, [pc, #48]	; (80071f0 <pxPortInitialiseStack+0x64>)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3b14      	subs	r3, #20
 80071c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3b04      	subs	r3, #4
 80071d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f06f 0202 	mvn.w	r2, #2
 80071da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3b20      	subs	r3, #32
 80071e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071e2:	68fb      	ldr	r3, [r7, #12]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	080071f5 	.word	0x080071f5

080071f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071fe:	4b12      	ldr	r3, [pc, #72]	; (8007248 <prvTaskExitError+0x54>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	d00a      	beq.n	800721e <prvTaskExitError+0x2a>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	60fb      	str	r3, [r7, #12]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <prvTaskExitError+0x28>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	60bb      	str	r3, [r7, #8]
}
 8007230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007232:	bf00      	nop
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0fc      	beq.n	8007234 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800723a:	bf00      	nop
 800723c:	bf00      	nop
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	2000000c 	.word	0x2000000c
 800724c:	00000000 	.word	0x00000000

08007250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007250:	4b07      	ldr	r3, [pc, #28]	; (8007270 <pxCurrentTCBConst2>)
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	6808      	ldr	r0, [r1, #0]
 8007256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725a:	f380 8809 	msr	PSP, r0
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f04f 0000 	mov.w	r0, #0
 8007266:	f380 8811 	msr	BASEPRI, r0
 800726a:	4770      	bx	lr
 800726c:	f3af 8000 	nop.w

08007270 <pxCurrentTCBConst2>:
 8007270:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop

08007278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007278:	4808      	ldr	r0, [pc, #32]	; (800729c <prvPortStartFirstTask+0x24>)
 800727a:	6800      	ldr	r0, [r0, #0]
 800727c:	6800      	ldr	r0, [r0, #0]
 800727e:	f380 8808 	msr	MSP, r0
 8007282:	f04f 0000 	mov.w	r0, #0
 8007286:	f380 8814 	msr	CONTROL, r0
 800728a:	b662      	cpsie	i
 800728c:	b661      	cpsie	f
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	df00      	svc	0
 8007298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800729a:	bf00      	nop
 800729c:	e000ed08 	.word	0xe000ed08

080072a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072a6:	4b46      	ldr	r3, [pc, #280]	; (80073c0 <xPortStartScheduler+0x120>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a46      	ldr	r2, [pc, #280]	; (80073c4 <xPortStartScheduler+0x124>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d10a      	bne.n	80072c6 <xPortStartScheduler+0x26>
	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	613b      	str	r3, [r7, #16]
}
 80072c2:	bf00      	nop
 80072c4:	e7fe      	b.n	80072c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072c6:	4b3e      	ldr	r3, [pc, #248]	; (80073c0 <xPortStartScheduler+0x120>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a3f      	ldr	r2, [pc, #252]	; (80073c8 <xPortStartScheduler+0x128>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d10a      	bne.n	80072e6 <xPortStartScheduler+0x46>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	60fb      	str	r3, [r7, #12]
}
 80072e2:	bf00      	nop
 80072e4:	e7fe      	b.n	80072e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072e6:	4b39      	ldr	r3, [pc, #228]	; (80073cc <xPortStartScheduler+0x12c>)
 80072e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	22ff      	movs	r2, #255	; 0xff
 80072f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007308:	b2da      	uxtb	r2, r3
 800730a:	4b31      	ldr	r3, [pc, #196]	; (80073d0 <xPortStartScheduler+0x130>)
 800730c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800730e:	4b31      	ldr	r3, [pc, #196]	; (80073d4 <xPortStartScheduler+0x134>)
 8007310:	2207      	movs	r2, #7
 8007312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007314:	e009      	b.n	800732a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007316:	4b2f      	ldr	r3, [pc, #188]	; (80073d4 <xPortStartScheduler+0x134>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3b01      	subs	r3, #1
 800731c:	4a2d      	ldr	r2, [pc, #180]	; (80073d4 <xPortStartScheduler+0x134>)
 800731e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007320:	78fb      	ldrb	r3, [r7, #3]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	b2db      	uxtb	r3, r3
 8007328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007332:	2b80      	cmp	r3, #128	; 0x80
 8007334:	d0ef      	beq.n	8007316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007336:	4b27      	ldr	r3, [pc, #156]	; (80073d4 <xPortStartScheduler+0x134>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f1c3 0307 	rsb	r3, r3, #7
 800733e:	2b04      	cmp	r3, #4
 8007340:	d00a      	beq.n	8007358 <xPortStartScheduler+0xb8>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	60bb      	str	r3, [r7, #8]
}
 8007354:	bf00      	nop
 8007356:	e7fe      	b.n	8007356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007358:	4b1e      	ldr	r3, [pc, #120]	; (80073d4 <xPortStartScheduler+0x134>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	4a1d      	ldr	r2, [pc, #116]	; (80073d4 <xPortStartScheduler+0x134>)
 8007360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007362:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <xPortStartScheduler+0x134>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800736a:	4a1a      	ldr	r2, [pc, #104]	; (80073d4 <xPortStartScheduler+0x134>)
 800736c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	b2da      	uxtb	r2, r3
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007376:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <xPortStartScheduler+0x138>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <xPortStartScheduler+0x138>)
 800737c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007382:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <xPortStartScheduler+0x138>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a14      	ldr	r2, [pc, #80]	; (80073d8 <xPortStartScheduler+0x138>)
 8007388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800738c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800738e:	f000 f8dd 	bl	800754c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007392:	4b12      	ldr	r3, [pc, #72]	; (80073dc <xPortStartScheduler+0x13c>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007398:	f000 f8fc 	bl	8007594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800739c:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <xPortStartScheduler+0x140>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a0f      	ldr	r2, [pc, #60]	; (80073e0 <xPortStartScheduler+0x140>)
 80073a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073a8:	f7ff ff66 	bl	8007278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073ac:	f7fe ff56 	bl	800625c <vTaskSwitchContext>
	prvTaskExitError();
 80073b0:	f7ff ff20 	bl	80071f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	e000ed00 	.word	0xe000ed00
 80073c4:	410fc271 	.word	0x410fc271
 80073c8:	410fc270 	.word	0x410fc270
 80073cc:	e000e400 	.word	0xe000e400
 80073d0:	20000d80 	.word	0x20000d80
 80073d4:	20000d84 	.word	0x20000d84
 80073d8:	e000ed20 	.word	0xe000ed20
 80073dc:	2000000c 	.word	0x2000000c
 80073e0:	e000ef34 	.word	0xe000ef34

080073e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	607b      	str	r3, [r7, #4]
}
 80073fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073fe:	4b0f      	ldr	r3, [pc, #60]	; (800743c <vPortEnterCritical+0x58>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3301      	adds	r3, #1
 8007404:	4a0d      	ldr	r2, [pc, #52]	; (800743c <vPortEnterCritical+0x58>)
 8007406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007408:	4b0c      	ldr	r3, [pc, #48]	; (800743c <vPortEnterCritical+0x58>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d10f      	bne.n	8007430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <vPortEnterCritical+0x5c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <vPortEnterCritical+0x4c>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	603b      	str	r3, [r7, #0]
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <vPortEnterCritical+0x4a>
	}
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	2000000c 	.word	0x2000000c
 8007440:	e000ed04 	.word	0xe000ed04

08007444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800744a:	4b12      	ldr	r3, [pc, #72]	; (8007494 <vPortExitCritical+0x50>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10a      	bne.n	8007468 <vPortExitCritical+0x24>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	607b      	str	r3, [r7, #4]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <vPortExitCritical+0x50>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3b01      	subs	r3, #1
 800746e:	4a09      	ldr	r2, [pc, #36]	; (8007494 <vPortExitCritical+0x50>)
 8007470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007472:	4b08      	ldr	r3, [pc, #32]	; (8007494 <vPortExitCritical+0x50>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <vPortExitCritical+0x42>
 800747a:	2300      	movs	r3, #0
 800747c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	f383 8811 	msr	BASEPRI, r3
}
 8007484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	2000000c 	.word	0x2000000c
	...

080074a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074a0:	f3ef 8009 	mrs	r0, PSP
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	4b15      	ldr	r3, [pc, #84]	; (8007500 <pxCurrentTCBConst>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	f01e 0f10 	tst.w	lr, #16
 80074b0:	bf08      	it	eq
 80074b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	6010      	str	r0, [r2, #0]
 80074bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074c4:	f380 8811 	msr	BASEPRI, r0
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f7fe fec4 	bl	800625c <vTaskSwitchContext>
 80074d4:	f04f 0000 	mov.w	r0, #0
 80074d8:	f380 8811 	msr	BASEPRI, r0
 80074dc:	bc09      	pop	{r0, r3}
 80074de:	6819      	ldr	r1, [r3, #0]
 80074e0:	6808      	ldr	r0, [r1, #0]
 80074e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e6:	f01e 0f10 	tst.w	lr, #16
 80074ea:	bf08      	it	eq
 80074ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074f0:	f380 8809 	msr	PSP, r0
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	f3af 8000 	nop.w

08007500 <pxCurrentTCBConst>:
 8007500:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop

08007508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	607b      	str	r3, [r7, #4]
}
 8007520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007522:	f7fe fde1 	bl	80060e8 <xTaskIncrementTick>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800752c:	4b06      	ldr	r3, [pc, #24]	; (8007548 <xPortSysTickHandler+0x40>)
 800752e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	2300      	movs	r3, #0
 8007536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f383 8811 	msr	BASEPRI, r3
}
 800753e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800754c:	b480      	push	{r7}
 800754e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <vPortSetupTimerInterrupt+0x34>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007556:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <vPortSetupTimerInterrupt+0x38>)
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <vPortSetupTimerInterrupt+0x3c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a0a      	ldr	r2, [pc, #40]	; (800758c <vPortSetupTimerInterrupt+0x40>)
 8007562:	fba2 2303 	umull	r2, r3, r2, r3
 8007566:	099b      	lsrs	r3, r3, #6
 8007568:	4a09      	ldr	r2, [pc, #36]	; (8007590 <vPortSetupTimerInterrupt+0x44>)
 800756a:	3b01      	subs	r3, #1
 800756c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800756e:	4b04      	ldr	r3, [pc, #16]	; (8007580 <vPortSetupTimerInterrupt+0x34>)
 8007570:	2207      	movs	r2, #7
 8007572:	601a      	str	r2, [r3, #0]
}
 8007574:	bf00      	nop
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	e000e010 	.word	0xe000e010
 8007584:	e000e018 	.word	0xe000e018
 8007588:	20000000 	.word	0x20000000
 800758c:	10624dd3 	.word	0x10624dd3
 8007590:	e000e014 	.word	0xe000e014

08007594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075a4 <vPortEnableVFP+0x10>
 8007598:	6801      	ldr	r1, [r0, #0]
 800759a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800759e:	6001      	str	r1, [r0, #0]
 80075a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075a2:	bf00      	nop
 80075a4:	e000ed88 	.word	0xe000ed88

080075a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075ae:	f3ef 8305 	mrs	r3, IPSR
 80075b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b0f      	cmp	r3, #15
 80075b8:	d914      	bls.n	80075e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075ba:	4a17      	ldr	r2, [pc, #92]	; (8007618 <vPortValidateInterruptPriority+0x70>)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075c4:	4b15      	ldr	r3, [pc, #84]	; (800761c <vPortValidateInterruptPriority+0x74>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	7afa      	ldrb	r2, [r7, #11]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d20a      	bcs.n	80075e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	607b      	str	r3, [r7, #4]
}
 80075e0:	bf00      	nop
 80075e2:	e7fe      	b.n	80075e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075e4:	4b0e      	ldr	r3, [pc, #56]	; (8007620 <vPortValidateInterruptPriority+0x78>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075ec:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <vPortValidateInterruptPriority+0x7c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d90a      	bls.n	800760a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	603b      	str	r3, [r7, #0]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <vPortValidateInterruptPriority+0x60>
	}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	e000e3f0 	.word	0xe000e3f0
 800761c:	20000d80 	.word	0x20000d80
 8007620:	e000ed0c 	.word	0xe000ed0c
 8007624:	20000d84 	.word	0x20000d84

08007628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	; 0x28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007630:	2300      	movs	r3, #0
 8007632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007634:	f7fe fc9c 	bl	8005f70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007638:	4b5b      	ldr	r3, [pc, #364]	; (80077a8 <pvPortMalloc+0x180>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007640:	f000 f920 	bl	8007884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007644:	4b59      	ldr	r3, [pc, #356]	; (80077ac <pvPortMalloc+0x184>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4013      	ands	r3, r2
 800764c:	2b00      	cmp	r3, #0
 800764e:	f040 8093 	bne.w	8007778 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01d      	beq.n	8007694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007658:	2208      	movs	r2, #8
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	2b00      	cmp	r3, #0
 8007668:	d014      	beq.n	8007694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f023 0307 	bic.w	r3, r3, #7
 8007670:	3308      	adds	r3, #8
 8007672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <pvPortMalloc+0x6c>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	617b      	str	r3, [r7, #20]
}
 8007690:	bf00      	nop
 8007692:	e7fe      	b.n	8007692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d06e      	beq.n	8007778 <pvPortMalloc+0x150>
 800769a:	4b45      	ldr	r3, [pc, #276]	; (80077b0 <pvPortMalloc+0x188>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d869      	bhi.n	8007778 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076a4:	4b43      	ldr	r3, [pc, #268]	; (80077b4 <pvPortMalloc+0x18c>)
 80076a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076a8:	4b42      	ldr	r3, [pc, #264]	; (80077b4 <pvPortMalloc+0x18c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076ae:	e004      	b.n	80076ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d903      	bls.n	80076cc <pvPortMalloc+0xa4>
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1f1      	bne.n	80076b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076cc:	4b36      	ldr	r3, [pc, #216]	; (80077a8 <pvPortMalloc+0x180>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d050      	beq.n	8007778 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2208      	movs	r2, #8
 80076dc:	4413      	add	r3, r2
 80076de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	2308      	movs	r3, #8
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d91f      	bls.n	8007738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <pvPortMalloc+0xf8>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	613b      	str	r3, [r7, #16]
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	1ad2      	subs	r2, r2, r3
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007732:	69b8      	ldr	r0, [r7, #24]
 8007734:	f000 f908 	bl	8007948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007738:	4b1d      	ldr	r3, [pc, #116]	; (80077b0 <pvPortMalloc+0x188>)
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	4a1b      	ldr	r2, [pc, #108]	; (80077b0 <pvPortMalloc+0x188>)
 8007744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007746:	4b1a      	ldr	r3, [pc, #104]	; (80077b0 <pvPortMalloc+0x188>)
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	4b1b      	ldr	r3, [pc, #108]	; (80077b8 <pvPortMalloc+0x190>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d203      	bcs.n	800775a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007752:	4b17      	ldr	r3, [pc, #92]	; (80077b0 <pvPortMalloc+0x188>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a18      	ldr	r2, [pc, #96]	; (80077b8 <pvPortMalloc+0x190>)
 8007758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	4b13      	ldr	r3, [pc, #76]	; (80077ac <pvPortMalloc+0x184>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	431a      	orrs	r2, r3
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800776e:	4b13      	ldr	r3, [pc, #76]	; (80077bc <pvPortMalloc+0x194>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3301      	adds	r3, #1
 8007774:	4a11      	ldr	r2, [pc, #68]	; (80077bc <pvPortMalloc+0x194>)
 8007776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007778:	f7fe fc08 	bl	8005f8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00a      	beq.n	800779c <pvPortMalloc+0x174>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	60fb      	str	r3, [r7, #12]
}
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <pvPortMalloc+0x172>
	return pvReturn;
 800779c:	69fb      	ldr	r3, [r7, #28]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3728      	adds	r7, #40	; 0x28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20004990 	.word	0x20004990
 80077ac:	200049a4 	.word	0x200049a4
 80077b0:	20004994 	.word	0x20004994
 80077b4:	20004988 	.word	0x20004988
 80077b8:	20004998 	.word	0x20004998
 80077bc:	2000499c 	.word	0x2000499c

080077c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d04d      	beq.n	800786e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077d2:	2308      	movs	r3, #8
 80077d4:	425b      	negs	r3, r3
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	4413      	add	r3, r2
 80077da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	4b24      	ldr	r3, [pc, #144]	; (8007878 <vPortFree+0xb8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4013      	ands	r3, r2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10a      	bne.n	8007804 <vPortFree+0x44>
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	60fb      	str	r3, [r7, #12]
}
 8007800:	bf00      	nop
 8007802:	e7fe      	b.n	8007802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00a      	beq.n	8007822 <vPortFree+0x62>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	60bb      	str	r3, [r7, #8]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	4b14      	ldr	r3, [pc, #80]	; (8007878 <vPortFree+0xb8>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01e      	beq.n	800786e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d11a      	bne.n	800786e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	4b0e      	ldr	r3, [pc, #56]	; (8007878 <vPortFree+0xb8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	43db      	mvns	r3, r3
 8007842:	401a      	ands	r2, r3
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007848:	f7fe fb92 	bl	8005f70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	4b0a      	ldr	r3, [pc, #40]	; (800787c <vPortFree+0xbc>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4413      	add	r3, r2
 8007856:	4a09      	ldr	r2, [pc, #36]	; (800787c <vPortFree+0xbc>)
 8007858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800785a:	6938      	ldr	r0, [r7, #16]
 800785c:	f000 f874 	bl	8007948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007860:	4b07      	ldr	r3, [pc, #28]	; (8007880 <vPortFree+0xc0>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3301      	adds	r3, #1
 8007866:	4a06      	ldr	r2, [pc, #24]	; (8007880 <vPortFree+0xc0>)
 8007868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800786a:	f7fe fb8f 	bl	8005f8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800786e:	bf00      	nop
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	200049a4 	.word	0x200049a4
 800787c:	20004994 	.word	0x20004994
 8007880:	200049a0 	.word	0x200049a0

08007884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800788a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800788e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007890:	4b27      	ldr	r3, [pc, #156]	; (8007930 <prvHeapInit+0xac>)
 8007892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00c      	beq.n	80078b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3307      	adds	r3, #7
 80078a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0307 	bic.w	r3, r3, #7
 80078aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	4a1f      	ldr	r2, [pc, #124]	; (8007930 <prvHeapInit+0xac>)
 80078b4:	4413      	add	r3, r2
 80078b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078bc:	4a1d      	ldr	r2, [pc, #116]	; (8007934 <prvHeapInit+0xb0>)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078c2:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <prvHeapInit+0xb0>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	4413      	add	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078d0:	2208      	movs	r2, #8
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	1a9b      	subs	r3, r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f023 0307 	bic.w	r3, r3, #7
 80078de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4a15      	ldr	r2, [pc, #84]	; (8007938 <prvHeapInit+0xb4>)
 80078e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078e6:	4b14      	ldr	r3, [pc, #80]	; (8007938 <prvHeapInit+0xb4>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2200      	movs	r2, #0
 80078ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078ee:	4b12      	ldr	r3, [pc, #72]	; (8007938 <prvHeapInit+0xb4>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	1ad2      	subs	r2, r2, r3
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007904:	4b0c      	ldr	r3, [pc, #48]	; (8007938 <prvHeapInit+0xb4>)
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	4a0a      	ldr	r2, [pc, #40]	; (800793c <prvHeapInit+0xb8>)
 8007912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	4a09      	ldr	r2, [pc, #36]	; (8007940 <prvHeapInit+0xbc>)
 800791a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800791c:	4b09      	ldr	r3, [pc, #36]	; (8007944 <prvHeapInit+0xc0>)
 800791e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007922:	601a      	str	r2, [r3, #0]
}
 8007924:	bf00      	nop
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	20000d88 	.word	0x20000d88
 8007934:	20004988 	.word	0x20004988
 8007938:	20004990 	.word	0x20004990
 800793c:	20004998 	.word	0x20004998
 8007940:	20004994 	.word	0x20004994
 8007944:	200049a4 	.word	0x200049a4

08007948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007950:	4b28      	ldr	r3, [pc, #160]	; (80079f4 <prvInsertBlockIntoFreeList+0xac>)
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	e002      	b.n	800795c <prvInsertBlockIntoFreeList+0x14>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	429a      	cmp	r2, r3
 8007964:	d8f7      	bhi.n	8007956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	4413      	add	r3, r2
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	429a      	cmp	r2, r3
 8007976:	d108      	bne.n	800798a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	441a      	add	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	441a      	add	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d118      	bne.n	80079d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <prvInsertBlockIntoFreeList+0xb0>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d00d      	beq.n	80079c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	441a      	add	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e008      	b.n	80079d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079c6:	4b0c      	ldr	r3, [pc, #48]	; (80079f8 <prvInsertBlockIntoFreeList+0xb0>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	e003      	b.n	80079d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d002      	beq.n	80079e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079e6:	bf00      	nop
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	20004988 	.word	0x20004988
 80079f8:	20004990 	.word	0x20004990

080079fc <__errno>:
 80079fc:	4b01      	ldr	r3, [pc, #4]	; (8007a04 <__errno+0x8>)
 80079fe:	6818      	ldr	r0, [r3, #0]
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000010 	.word	0x20000010

08007a08 <__libc_init_array>:
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	4d0d      	ldr	r5, [pc, #52]	; (8007a40 <__libc_init_array+0x38>)
 8007a0c:	4c0d      	ldr	r4, [pc, #52]	; (8007a44 <__libc_init_array+0x3c>)
 8007a0e:	1b64      	subs	r4, r4, r5
 8007a10:	10a4      	asrs	r4, r4, #2
 8007a12:	2600      	movs	r6, #0
 8007a14:	42a6      	cmp	r6, r4
 8007a16:	d109      	bne.n	8007a2c <__libc_init_array+0x24>
 8007a18:	4d0b      	ldr	r5, [pc, #44]	; (8007a48 <__libc_init_array+0x40>)
 8007a1a:	4c0c      	ldr	r4, [pc, #48]	; (8007a4c <__libc_init_array+0x44>)
 8007a1c:	f000 fc82 	bl	8008324 <_init>
 8007a20:	1b64      	subs	r4, r4, r5
 8007a22:	10a4      	asrs	r4, r4, #2
 8007a24:	2600      	movs	r6, #0
 8007a26:	42a6      	cmp	r6, r4
 8007a28:	d105      	bne.n	8007a36 <__libc_init_array+0x2e>
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a30:	4798      	blx	r3
 8007a32:	3601      	adds	r6, #1
 8007a34:	e7ee      	b.n	8007a14 <__libc_init_array+0xc>
 8007a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a3a:	4798      	blx	r3
 8007a3c:	3601      	adds	r6, #1
 8007a3e:	e7f2      	b.n	8007a26 <__libc_init_array+0x1e>
 8007a40:	080084d4 	.word	0x080084d4
 8007a44:	080084d4 	.word	0x080084d4
 8007a48:	080084d4 	.word	0x080084d4
 8007a4c:	080084d8 	.word	0x080084d8

08007a50 <memcpy>:
 8007a50:	440a      	add	r2, r1
 8007a52:	4291      	cmp	r1, r2
 8007a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a58:	d100      	bne.n	8007a5c <memcpy+0xc>
 8007a5a:	4770      	bx	lr
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a66:	4291      	cmp	r1, r2
 8007a68:	d1f9      	bne.n	8007a5e <memcpy+0xe>
 8007a6a:	bd10      	pop	{r4, pc}

08007a6c <memset>:
 8007a6c:	4402      	add	r2, r0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d100      	bne.n	8007a76 <memset+0xa>
 8007a74:	4770      	bx	lr
 8007a76:	f803 1b01 	strb.w	r1, [r3], #1
 8007a7a:	e7f9      	b.n	8007a70 <memset+0x4>

08007a7c <sniprintf>:
 8007a7c:	b40c      	push	{r2, r3}
 8007a7e:	b530      	push	{r4, r5, lr}
 8007a80:	4b17      	ldr	r3, [pc, #92]	; (8007ae0 <sniprintf+0x64>)
 8007a82:	1e0c      	subs	r4, r1, #0
 8007a84:	681d      	ldr	r5, [r3, #0]
 8007a86:	b09d      	sub	sp, #116	; 0x74
 8007a88:	da08      	bge.n	8007a9c <sniprintf+0x20>
 8007a8a:	238b      	movs	r3, #139	; 0x8b
 8007a8c:	602b      	str	r3, [r5, #0]
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a92:	b01d      	add	sp, #116	; 0x74
 8007a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a98:	b002      	add	sp, #8
 8007a9a:	4770      	bx	lr
 8007a9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007aa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007aa4:	bf14      	ite	ne
 8007aa6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007aaa:	4623      	moveq	r3, r4
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	9307      	str	r3, [sp, #28]
 8007ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ab4:	9002      	str	r0, [sp, #8]
 8007ab6:	9006      	str	r0, [sp, #24]
 8007ab8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007abc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007abe:	ab21      	add	r3, sp, #132	; 0x84
 8007ac0:	a902      	add	r1, sp, #8
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	9301      	str	r3, [sp, #4]
 8007ac6:	f000 f889 	bl	8007bdc <_svfiprintf_r>
 8007aca:	1c43      	adds	r3, r0, #1
 8007acc:	bfbc      	itt	lt
 8007ace:	238b      	movlt	r3, #139	; 0x8b
 8007ad0:	602b      	strlt	r3, [r5, #0]
 8007ad2:	2c00      	cmp	r4, #0
 8007ad4:	d0dd      	beq.n	8007a92 <sniprintf+0x16>
 8007ad6:	9b02      	ldr	r3, [sp, #8]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	e7d9      	b.n	8007a92 <sniprintf+0x16>
 8007ade:	bf00      	nop
 8007ae0:	20000010 	.word	0x20000010

08007ae4 <siprintf>:
 8007ae4:	b40e      	push	{r1, r2, r3}
 8007ae6:	b500      	push	{lr}
 8007ae8:	b09c      	sub	sp, #112	; 0x70
 8007aea:	ab1d      	add	r3, sp, #116	; 0x74
 8007aec:	9002      	str	r0, [sp, #8]
 8007aee:	9006      	str	r0, [sp, #24]
 8007af0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007af4:	4809      	ldr	r0, [pc, #36]	; (8007b1c <siprintf+0x38>)
 8007af6:	9107      	str	r1, [sp, #28]
 8007af8:	9104      	str	r1, [sp, #16]
 8007afa:	4909      	ldr	r1, [pc, #36]	; (8007b20 <siprintf+0x3c>)
 8007afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b00:	9105      	str	r1, [sp, #20]
 8007b02:	6800      	ldr	r0, [r0, #0]
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	a902      	add	r1, sp, #8
 8007b08:	f000 f868 	bl	8007bdc <_svfiprintf_r>
 8007b0c:	9b02      	ldr	r3, [sp, #8]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	701a      	strb	r2, [r3, #0]
 8007b12:	b01c      	add	sp, #112	; 0x70
 8007b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b18:	b003      	add	sp, #12
 8007b1a:	4770      	bx	lr
 8007b1c:	20000010 	.word	0x20000010
 8007b20:	ffff0208 	.word	0xffff0208

08007b24 <__ssputs_r>:
 8007b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b28:	688e      	ldr	r6, [r1, #8]
 8007b2a:	429e      	cmp	r6, r3
 8007b2c:	4682      	mov	sl, r0
 8007b2e:	460c      	mov	r4, r1
 8007b30:	4690      	mov	r8, r2
 8007b32:	461f      	mov	r7, r3
 8007b34:	d838      	bhi.n	8007ba8 <__ssputs_r+0x84>
 8007b36:	898a      	ldrh	r2, [r1, #12]
 8007b38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b3c:	d032      	beq.n	8007ba4 <__ssputs_r+0x80>
 8007b3e:	6825      	ldr	r5, [r4, #0]
 8007b40:	6909      	ldr	r1, [r1, #16]
 8007b42:	eba5 0901 	sub.w	r9, r5, r1
 8007b46:	6965      	ldr	r5, [r4, #20]
 8007b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b50:	3301      	adds	r3, #1
 8007b52:	444b      	add	r3, r9
 8007b54:	106d      	asrs	r5, r5, #1
 8007b56:	429d      	cmp	r5, r3
 8007b58:	bf38      	it	cc
 8007b5a:	461d      	movcc	r5, r3
 8007b5c:	0553      	lsls	r3, r2, #21
 8007b5e:	d531      	bpl.n	8007bc4 <__ssputs_r+0xa0>
 8007b60:	4629      	mov	r1, r5
 8007b62:	f000 fb39 	bl	80081d8 <_malloc_r>
 8007b66:	4606      	mov	r6, r0
 8007b68:	b950      	cbnz	r0, 8007b80 <__ssputs_r+0x5c>
 8007b6a:	230c      	movs	r3, #12
 8007b6c:	f8ca 3000 	str.w	r3, [sl]
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b80:	6921      	ldr	r1, [r4, #16]
 8007b82:	464a      	mov	r2, r9
 8007b84:	f7ff ff64 	bl	8007a50 <memcpy>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b92:	81a3      	strh	r3, [r4, #12]
 8007b94:	6126      	str	r6, [r4, #16]
 8007b96:	6165      	str	r5, [r4, #20]
 8007b98:	444e      	add	r6, r9
 8007b9a:	eba5 0509 	sub.w	r5, r5, r9
 8007b9e:	6026      	str	r6, [r4, #0]
 8007ba0:	60a5      	str	r5, [r4, #8]
 8007ba2:	463e      	mov	r6, r7
 8007ba4:	42be      	cmp	r6, r7
 8007ba6:	d900      	bls.n	8007baa <__ssputs_r+0x86>
 8007ba8:	463e      	mov	r6, r7
 8007baa:	4632      	mov	r2, r6
 8007bac:	6820      	ldr	r0, [r4, #0]
 8007bae:	4641      	mov	r1, r8
 8007bb0:	f000 faa8 	bl	8008104 <memmove>
 8007bb4:	68a3      	ldr	r3, [r4, #8]
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	1b9b      	subs	r3, r3, r6
 8007bba:	4432      	add	r2, r6
 8007bbc:	60a3      	str	r3, [r4, #8]
 8007bbe:	6022      	str	r2, [r4, #0]
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	e7db      	b.n	8007b7c <__ssputs_r+0x58>
 8007bc4:	462a      	mov	r2, r5
 8007bc6:	f000 fb61 	bl	800828c <_realloc_r>
 8007bca:	4606      	mov	r6, r0
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d1e1      	bne.n	8007b94 <__ssputs_r+0x70>
 8007bd0:	6921      	ldr	r1, [r4, #16]
 8007bd2:	4650      	mov	r0, sl
 8007bd4:	f000 fab0 	bl	8008138 <_free_r>
 8007bd8:	e7c7      	b.n	8007b6a <__ssputs_r+0x46>
	...

08007bdc <_svfiprintf_r>:
 8007bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	4698      	mov	r8, r3
 8007be2:	898b      	ldrh	r3, [r1, #12]
 8007be4:	061b      	lsls	r3, r3, #24
 8007be6:	b09d      	sub	sp, #116	; 0x74
 8007be8:	4607      	mov	r7, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	4614      	mov	r4, r2
 8007bee:	d50e      	bpl.n	8007c0e <_svfiprintf_r+0x32>
 8007bf0:	690b      	ldr	r3, [r1, #16]
 8007bf2:	b963      	cbnz	r3, 8007c0e <_svfiprintf_r+0x32>
 8007bf4:	2140      	movs	r1, #64	; 0x40
 8007bf6:	f000 faef 	bl	80081d8 <_malloc_r>
 8007bfa:	6028      	str	r0, [r5, #0]
 8007bfc:	6128      	str	r0, [r5, #16]
 8007bfe:	b920      	cbnz	r0, 8007c0a <_svfiprintf_r+0x2e>
 8007c00:	230c      	movs	r3, #12
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295
 8007c08:	e0d1      	b.n	8007dae <_svfiprintf_r+0x1d2>
 8007c0a:	2340      	movs	r3, #64	; 0x40
 8007c0c:	616b      	str	r3, [r5, #20]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	9309      	str	r3, [sp, #36]	; 0x24
 8007c12:	2320      	movs	r3, #32
 8007c14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c1c:	2330      	movs	r3, #48	; 0x30
 8007c1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007dc8 <_svfiprintf_r+0x1ec>
 8007c22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c26:	f04f 0901 	mov.w	r9, #1
 8007c2a:	4623      	mov	r3, r4
 8007c2c:	469a      	mov	sl, r3
 8007c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c32:	b10a      	cbz	r2, 8007c38 <_svfiprintf_r+0x5c>
 8007c34:	2a25      	cmp	r2, #37	; 0x25
 8007c36:	d1f9      	bne.n	8007c2c <_svfiprintf_r+0x50>
 8007c38:	ebba 0b04 	subs.w	fp, sl, r4
 8007c3c:	d00b      	beq.n	8007c56 <_svfiprintf_r+0x7a>
 8007c3e:	465b      	mov	r3, fp
 8007c40:	4622      	mov	r2, r4
 8007c42:	4629      	mov	r1, r5
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7ff ff6d 	bl	8007b24 <__ssputs_r>
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	f000 80aa 	beq.w	8007da4 <_svfiprintf_r+0x1c8>
 8007c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c52:	445a      	add	r2, fp
 8007c54:	9209      	str	r2, [sp, #36]	; 0x24
 8007c56:	f89a 3000 	ldrb.w	r3, [sl]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 80a2 	beq.w	8007da4 <_svfiprintf_r+0x1c8>
 8007c60:	2300      	movs	r3, #0
 8007c62:	f04f 32ff 	mov.w	r2, #4294967295
 8007c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c6a:	f10a 0a01 	add.w	sl, sl, #1
 8007c6e:	9304      	str	r3, [sp, #16]
 8007c70:	9307      	str	r3, [sp, #28]
 8007c72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c76:	931a      	str	r3, [sp, #104]	; 0x68
 8007c78:	4654      	mov	r4, sl
 8007c7a:	2205      	movs	r2, #5
 8007c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c80:	4851      	ldr	r0, [pc, #324]	; (8007dc8 <_svfiprintf_r+0x1ec>)
 8007c82:	f7f8 fab5 	bl	80001f0 <memchr>
 8007c86:	9a04      	ldr	r2, [sp, #16]
 8007c88:	b9d8      	cbnz	r0, 8007cc2 <_svfiprintf_r+0xe6>
 8007c8a:	06d0      	lsls	r0, r2, #27
 8007c8c:	bf44      	itt	mi
 8007c8e:	2320      	movmi	r3, #32
 8007c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c94:	0711      	lsls	r1, r2, #28
 8007c96:	bf44      	itt	mi
 8007c98:	232b      	movmi	r3, #43	; 0x2b
 8007c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca4:	d015      	beq.n	8007cd2 <_svfiprintf_r+0xf6>
 8007ca6:	9a07      	ldr	r2, [sp, #28]
 8007ca8:	4654      	mov	r4, sl
 8007caa:	2000      	movs	r0, #0
 8007cac:	f04f 0c0a 	mov.w	ip, #10
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cb6:	3b30      	subs	r3, #48	; 0x30
 8007cb8:	2b09      	cmp	r3, #9
 8007cba:	d94e      	bls.n	8007d5a <_svfiprintf_r+0x17e>
 8007cbc:	b1b0      	cbz	r0, 8007cec <_svfiprintf_r+0x110>
 8007cbe:	9207      	str	r2, [sp, #28]
 8007cc0:	e014      	b.n	8007cec <_svfiprintf_r+0x110>
 8007cc2:	eba0 0308 	sub.w	r3, r0, r8
 8007cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	9304      	str	r3, [sp, #16]
 8007cce:	46a2      	mov	sl, r4
 8007cd0:	e7d2      	b.n	8007c78 <_svfiprintf_r+0x9c>
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	1d19      	adds	r1, r3, #4
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	9103      	str	r1, [sp, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	bfbb      	ittet	lt
 8007cde:	425b      	neglt	r3, r3
 8007ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ce4:	9307      	strge	r3, [sp, #28]
 8007ce6:	9307      	strlt	r3, [sp, #28]
 8007ce8:	bfb8      	it	lt
 8007cea:	9204      	strlt	r2, [sp, #16]
 8007cec:	7823      	ldrb	r3, [r4, #0]
 8007cee:	2b2e      	cmp	r3, #46	; 0x2e
 8007cf0:	d10c      	bne.n	8007d0c <_svfiprintf_r+0x130>
 8007cf2:	7863      	ldrb	r3, [r4, #1]
 8007cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf6:	d135      	bne.n	8007d64 <_svfiprintf_r+0x188>
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	1d1a      	adds	r2, r3, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	9203      	str	r2, [sp, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	bfb8      	it	lt
 8007d04:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d08:	3402      	adds	r4, #2
 8007d0a:	9305      	str	r3, [sp, #20]
 8007d0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007dd8 <_svfiprintf_r+0x1fc>
 8007d10:	7821      	ldrb	r1, [r4, #0]
 8007d12:	2203      	movs	r2, #3
 8007d14:	4650      	mov	r0, sl
 8007d16:	f7f8 fa6b 	bl	80001f0 <memchr>
 8007d1a:	b140      	cbz	r0, 8007d2e <_svfiprintf_r+0x152>
 8007d1c:	2340      	movs	r3, #64	; 0x40
 8007d1e:	eba0 000a 	sub.w	r0, r0, sl
 8007d22:	fa03 f000 	lsl.w	r0, r3, r0
 8007d26:	9b04      	ldr	r3, [sp, #16]
 8007d28:	4303      	orrs	r3, r0
 8007d2a:	3401      	adds	r4, #1
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d32:	4826      	ldr	r0, [pc, #152]	; (8007dcc <_svfiprintf_r+0x1f0>)
 8007d34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d38:	2206      	movs	r2, #6
 8007d3a:	f7f8 fa59 	bl	80001f0 <memchr>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d038      	beq.n	8007db4 <_svfiprintf_r+0x1d8>
 8007d42:	4b23      	ldr	r3, [pc, #140]	; (8007dd0 <_svfiprintf_r+0x1f4>)
 8007d44:	bb1b      	cbnz	r3, 8007d8e <_svfiprintf_r+0x1b2>
 8007d46:	9b03      	ldr	r3, [sp, #12]
 8007d48:	3307      	adds	r3, #7
 8007d4a:	f023 0307 	bic.w	r3, r3, #7
 8007d4e:	3308      	adds	r3, #8
 8007d50:	9303      	str	r3, [sp, #12]
 8007d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d54:	4433      	add	r3, r6
 8007d56:	9309      	str	r3, [sp, #36]	; 0x24
 8007d58:	e767      	b.n	8007c2a <_svfiprintf_r+0x4e>
 8007d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d5e:	460c      	mov	r4, r1
 8007d60:	2001      	movs	r0, #1
 8007d62:	e7a5      	b.n	8007cb0 <_svfiprintf_r+0xd4>
 8007d64:	2300      	movs	r3, #0
 8007d66:	3401      	adds	r4, #1
 8007d68:	9305      	str	r3, [sp, #20]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	f04f 0c0a 	mov.w	ip, #10
 8007d70:	4620      	mov	r0, r4
 8007d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d76:	3a30      	subs	r2, #48	; 0x30
 8007d78:	2a09      	cmp	r2, #9
 8007d7a:	d903      	bls.n	8007d84 <_svfiprintf_r+0x1a8>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d0c5      	beq.n	8007d0c <_svfiprintf_r+0x130>
 8007d80:	9105      	str	r1, [sp, #20]
 8007d82:	e7c3      	b.n	8007d0c <_svfiprintf_r+0x130>
 8007d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d88:	4604      	mov	r4, r0
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e7f0      	b.n	8007d70 <_svfiprintf_r+0x194>
 8007d8e:	ab03      	add	r3, sp, #12
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	462a      	mov	r2, r5
 8007d94:	4b0f      	ldr	r3, [pc, #60]	; (8007dd4 <_svfiprintf_r+0x1f8>)
 8007d96:	a904      	add	r1, sp, #16
 8007d98:	4638      	mov	r0, r7
 8007d9a:	f3af 8000 	nop.w
 8007d9e:	1c42      	adds	r2, r0, #1
 8007da0:	4606      	mov	r6, r0
 8007da2:	d1d6      	bne.n	8007d52 <_svfiprintf_r+0x176>
 8007da4:	89ab      	ldrh	r3, [r5, #12]
 8007da6:	065b      	lsls	r3, r3, #25
 8007da8:	f53f af2c 	bmi.w	8007c04 <_svfiprintf_r+0x28>
 8007dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dae:	b01d      	add	sp, #116	; 0x74
 8007db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db4:	ab03      	add	r3, sp, #12
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	462a      	mov	r2, r5
 8007dba:	4b06      	ldr	r3, [pc, #24]	; (8007dd4 <_svfiprintf_r+0x1f8>)
 8007dbc:	a904      	add	r1, sp, #16
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	f000 f87a 	bl	8007eb8 <_printf_i>
 8007dc4:	e7eb      	b.n	8007d9e <_svfiprintf_r+0x1c2>
 8007dc6:	bf00      	nop
 8007dc8:	08008498 	.word	0x08008498
 8007dcc:	080084a2 	.word	0x080084a2
 8007dd0:	00000000 	.word	0x00000000
 8007dd4:	08007b25 	.word	0x08007b25
 8007dd8:	0800849e 	.word	0x0800849e

08007ddc <_printf_common>:
 8007ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de0:	4616      	mov	r6, r2
 8007de2:	4699      	mov	r9, r3
 8007de4:	688a      	ldr	r2, [r1, #8]
 8007de6:	690b      	ldr	r3, [r1, #16]
 8007de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dec:	4293      	cmp	r3, r2
 8007dee:	bfb8      	it	lt
 8007df0:	4613      	movlt	r3, r2
 8007df2:	6033      	str	r3, [r6, #0]
 8007df4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007df8:	4607      	mov	r7, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	b10a      	cbz	r2, 8007e02 <_printf_common+0x26>
 8007dfe:	3301      	adds	r3, #1
 8007e00:	6033      	str	r3, [r6, #0]
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	0699      	lsls	r1, r3, #26
 8007e06:	bf42      	ittt	mi
 8007e08:	6833      	ldrmi	r3, [r6, #0]
 8007e0a:	3302      	addmi	r3, #2
 8007e0c:	6033      	strmi	r3, [r6, #0]
 8007e0e:	6825      	ldr	r5, [r4, #0]
 8007e10:	f015 0506 	ands.w	r5, r5, #6
 8007e14:	d106      	bne.n	8007e24 <_printf_common+0x48>
 8007e16:	f104 0a19 	add.w	sl, r4, #25
 8007e1a:	68e3      	ldr	r3, [r4, #12]
 8007e1c:	6832      	ldr	r2, [r6, #0]
 8007e1e:	1a9b      	subs	r3, r3, r2
 8007e20:	42ab      	cmp	r3, r5
 8007e22:	dc26      	bgt.n	8007e72 <_printf_common+0x96>
 8007e24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e28:	1e13      	subs	r3, r2, #0
 8007e2a:	6822      	ldr	r2, [r4, #0]
 8007e2c:	bf18      	it	ne
 8007e2e:	2301      	movne	r3, #1
 8007e30:	0692      	lsls	r2, r2, #26
 8007e32:	d42b      	bmi.n	8007e8c <_printf_common+0xb0>
 8007e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e38:	4649      	mov	r1, r9
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	47c0      	blx	r8
 8007e3e:	3001      	adds	r0, #1
 8007e40:	d01e      	beq.n	8007e80 <_printf_common+0xa4>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	68e5      	ldr	r5, [r4, #12]
 8007e46:	6832      	ldr	r2, [r6, #0]
 8007e48:	f003 0306 	and.w	r3, r3, #6
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	bf08      	it	eq
 8007e50:	1aad      	subeq	r5, r5, r2
 8007e52:	68a3      	ldr	r3, [r4, #8]
 8007e54:	6922      	ldr	r2, [r4, #16]
 8007e56:	bf0c      	ite	eq
 8007e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e5c:	2500      	movne	r5, #0
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	bfc4      	itt	gt
 8007e62:	1a9b      	subgt	r3, r3, r2
 8007e64:	18ed      	addgt	r5, r5, r3
 8007e66:	2600      	movs	r6, #0
 8007e68:	341a      	adds	r4, #26
 8007e6a:	42b5      	cmp	r5, r6
 8007e6c:	d11a      	bne.n	8007ea4 <_printf_common+0xc8>
 8007e6e:	2000      	movs	r0, #0
 8007e70:	e008      	b.n	8007e84 <_printf_common+0xa8>
 8007e72:	2301      	movs	r3, #1
 8007e74:	4652      	mov	r2, sl
 8007e76:	4649      	mov	r1, r9
 8007e78:	4638      	mov	r0, r7
 8007e7a:	47c0      	blx	r8
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d103      	bne.n	8007e88 <_printf_common+0xac>
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e88:	3501      	adds	r5, #1
 8007e8a:	e7c6      	b.n	8007e1a <_printf_common+0x3e>
 8007e8c:	18e1      	adds	r1, r4, r3
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	2030      	movs	r0, #48	; 0x30
 8007e92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e96:	4422      	add	r2, r4
 8007e98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ea0:	3302      	adds	r3, #2
 8007ea2:	e7c7      	b.n	8007e34 <_printf_common+0x58>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	4649      	mov	r1, r9
 8007eaa:	4638      	mov	r0, r7
 8007eac:	47c0      	blx	r8
 8007eae:	3001      	adds	r0, #1
 8007eb0:	d0e6      	beq.n	8007e80 <_printf_common+0xa4>
 8007eb2:	3601      	adds	r6, #1
 8007eb4:	e7d9      	b.n	8007e6a <_printf_common+0x8e>
	...

08007eb8 <_printf_i>:
 8007eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	4691      	mov	r9, r2
 8007ec0:	7e27      	ldrb	r7, [r4, #24]
 8007ec2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ec4:	2f78      	cmp	r7, #120	; 0x78
 8007ec6:	4680      	mov	r8, r0
 8007ec8:	469a      	mov	sl, r3
 8007eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ece:	d807      	bhi.n	8007ee0 <_printf_i+0x28>
 8007ed0:	2f62      	cmp	r7, #98	; 0x62
 8007ed2:	d80a      	bhi.n	8007eea <_printf_i+0x32>
 8007ed4:	2f00      	cmp	r7, #0
 8007ed6:	f000 80d8 	beq.w	800808a <_printf_i+0x1d2>
 8007eda:	2f58      	cmp	r7, #88	; 0x58
 8007edc:	f000 80a3 	beq.w	8008026 <_printf_i+0x16e>
 8007ee0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ee8:	e03a      	b.n	8007f60 <_printf_i+0xa8>
 8007eea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007eee:	2b15      	cmp	r3, #21
 8007ef0:	d8f6      	bhi.n	8007ee0 <_printf_i+0x28>
 8007ef2:	a001      	add	r0, pc, #4	; (adr r0, 8007ef8 <_printf_i+0x40>)
 8007ef4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ef8:	08007f51 	.word	0x08007f51
 8007efc:	08007f65 	.word	0x08007f65
 8007f00:	08007ee1 	.word	0x08007ee1
 8007f04:	08007ee1 	.word	0x08007ee1
 8007f08:	08007ee1 	.word	0x08007ee1
 8007f0c:	08007ee1 	.word	0x08007ee1
 8007f10:	08007f65 	.word	0x08007f65
 8007f14:	08007ee1 	.word	0x08007ee1
 8007f18:	08007ee1 	.word	0x08007ee1
 8007f1c:	08007ee1 	.word	0x08007ee1
 8007f20:	08007ee1 	.word	0x08007ee1
 8007f24:	08008071 	.word	0x08008071
 8007f28:	08007f95 	.word	0x08007f95
 8007f2c:	08008053 	.word	0x08008053
 8007f30:	08007ee1 	.word	0x08007ee1
 8007f34:	08007ee1 	.word	0x08007ee1
 8007f38:	08008093 	.word	0x08008093
 8007f3c:	08007ee1 	.word	0x08007ee1
 8007f40:	08007f95 	.word	0x08007f95
 8007f44:	08007ee1 	.word	0x08007ee1
 8007f48:	08007ee1 	.word	0x08007ee1
 8007f4c:	0800805b 	.word	0x0800805b
 8007f50:	680b      	ldr	r3, [r1, #0]
 8007f52:	1d1a      	adds	r2, r3, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	600a      	str	r2, [r1, #0]
 8007f58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f60:	2301      	movs	r3, #1
 8007f62:	e0a3      	b.n	80080ac <_printf_i+0x1f4>
 8007f64:	6825      	ldr	r5, [r4, #0]
 8007f66:	6808      	ldr	r0, [r1, #0]
 8007f68:	062e      	lsls	r6, r5, #24
 8007f6a:	f100 0304 	add.w	r3, r0, #4
 8007f6e:	d50a      	bpl.n	8007f86 <_printf_i+0xce>
 8007f70:	6805      	ldr	r5, [r0, #0]
 8007f72:	600b      	str	r3, [r1, #0]
 8007f74:	2d00      	cmp	r5, #0
 8007f76:	da03      	bge.n	8007f80 <_printf_i+0xc8>
 8007f78:	232d      	movs	r3, #45	; 0x2d
 8007f7a:	426d      	negs	r5, r5
 8007f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f80:	485e      	ldr	r0, [pc, #376]	; (80080fc <_printf_i+0x244>)
 8007f82:	230a      	movs	r3, #10
 8007f84:	e019      	b.n	8007fba <_printf_i+0x102>
 8007f86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007f8a:	6805      	ldr	r5, [r0, #0]
 8007f8c:	600b      	str	r3, [r1, #0]
 8007f8e:	bf18      	it	ne
 8007f90:	b22d      	sxthne	r5, r5
 8007f92:	e7ef      	b.n	8007f74 <_printf_i+0xbc>
 8007f94:	680b      	ldr	r3, [r1, #0]
 8007f96:	6825      	ldr	r5, [r4, #0]
 8007f98:	1d18      	adds	r0, r3, #4
 8007f9a:	6008      	str	r0, [r1, #0]
 8007f9c:	0628      	lsls	r0, r5, #24
 8007f9e:	d501      	bpl.n	8007fa4 <_printf_i+0xec>
 8007fa0:	681d      	ldr	r5, [r3, #0]
 8007fa2:	e002      	b.n	8007faa <_printf_i+0xf2>
 8007fa4:	0669      	lsls	r1, r5, #25
 8007fa6:	d5fb      	bpl.n	8007fa0 <_printf_i+0xe8>
 8007fa8:	881d      	ldrh	r5, [r3, #0]
 8007faa:	4854      	ldr	r0, [pc, #336]	; (80080fc <_printf_i+0x244>)
 8007fac:	2f6f      	cmp	r7, #111	; 0x6f
 8007fae:	bf0c      	ite	eq
 8007fb0:	2308      	moveq	r3, #8
 8007fb2:	230a      	movne	r3, #10
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fba:	6866      	ldr	r6, [r4, #4]
 8007fbc:	60a6      	str	r6, [r4, #8]
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	bfa2      	ittt	ge
 8007fc2:	6821      	ldrge	r1, [r4, #0]
 8007fc4:	f021 0104 	bicge.w	r1, r1, #4
 8007fc8:	6021      	strge	r1, [r4, #0]
 8007fca:	b90d      	cbnz	r5, 8007fd0 <_printf_i+0x118>
 8007fcc:	2e00      	cmp	r6, #0
 8007fce:	d04d      	beq.n	800806c <_printf_i+0x1b4>
 8007fd0:	4616      	mov	r6, r2
 8007fd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fd6:	fb03 5711 	mls	r7, r3, r1, r5
 8007fda:	5dc7      	ldrb	r7, [r0, r7]
 8007fdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fe0:	462f      	mov	r7, r5
 8007fe2:	42bb      	cmp	r3, r7
 8007fe4:	460d      	mov	r5, r1
 8007fe6:	d9f4      	bls.n	8007fd2 <_printf_i+0x11a>
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d10b      	bne.n	8008004 <_printf_i+0x14c>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	07df      	lsls	r7, r3, #31
 8007ff0:	d508      	bpl.n	8008004 <_printf_i+0x14c>
 8007ff2:	6923      	ldr	r3, [r4, #16]
 8007ff4:	6861      	ldr	r1, [r4, #4]
 8007ff6:	4299      	cmp	r1, r3
 8007ff8:	bfde      	ittt	le
 8007ffa:	2330      	movle	r3, #48	; 0x30
 8007ffc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008000:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008004:	1b92      	subs	r2, r2, r6
 8008006:	6122      	str	r2, [r4, #16]
 8008008:	f8cd a000 	str.w	sl, [sp]
 800800c:	464b      	mov	r3, r9
 800800e:	aa03      	add	r2, sp, #12
 8008010:	4621      	mov	r1, r4
 8008012:	4640      	mov	r0, r8
 8008014:	f7ff fee2 	bl	8007ddc <_printf_common>
 8008018:	3001      	adds	r0, #1
 800801a:	d14c      	bne.n	80080b6 <_printf_i+0x1fe>
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	b004      	add	sp, #16
 8008022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008026:	4835      	ldr	r0, [pc, #212]	; (80080fc <_printf_i+0x244>)
 8008028:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	680e      	ldr	r6, [r1, #0]
 8008030:	061f      	lsls	r7, r3, #24
 8008032:	f856 5b04 	ldr.w	r5, [r6], #4
 8008036:	600e      	str	r6, [r1, #0]
 8008038:	d514      	bpl.n	8008064 <_printf_i+0x1ac>
 800803a:	07d9      	lsls	r1, r3, #31
 800803c:	bf44      	itt	mi
 800803e:	f043 0320 	orrmi.w	r3, r3, #32
 8008042:	6023      	strmi	r3, [r4, #0]
 8008044:	b91d      	cbnz	r5, 800804e <_printf_i+0x196>
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	f023 0320 	bic.w	r3, r3, #32
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	2310      	movs	r3, #16
 8008050:	e7b0      	b.n	8007fb4 <_printf_i+0xfc>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	f043 0320 	orr.w	r3, r3, #32
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	2378      	movs	r3, #120	; 0x78
 800805c:	4828      	ldr	r0, [pc, #160]	; (8008100 <_printf_i+0x248>)
 800805e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008062:	e7e3      	b.n	800802c <_printf_i+0x174>
 8008064:	065e      	lsls	r6, r3, #25
 8008066:	bf48      	it	mi
 8008068:	b2ad      	uxthmi	r5, r5
 800806a:	e7e6      	b.n	800803a <_printf_i+0x182>
 800806c:	4616      	mov	r6, r2
 800806e:	e7bb      	b.n	8007fe8 <_printf_i+0x130>
 8008070:	680b      	ldr	r3, [r1, #0]
 8008072:	6826      	ldr	r6, [r4, #0]
 8008074:	6960      	ldr	r0, [r4, #20]
 8008076:	1d1d      	adds	r5, r3, #4
 8008078:	600d      	str	r5, [r1, #0]
 800807a:	0635      	lsls	r5, r6, #24
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	d501      	bpl.n	8008084 <_printf_i+0x1cc>
 8008080:	6018      	str	r0, [r3, #0]
 8008082:	e002      	b.n	800808a <_printf_i+0x1d2>
 8008084:	0671      	lsls	r1, r6, #25
 8008086:	d5fb      	bpl.n	8008080 <_printf_i+0x1c8>
 8008088:	8018      	strh	r0, [r3, #0]
 800808a:	2300      	movs	r3, #0
 800808c:	6123      	str	r3, [r4, #16]
 800808e:	4616      	mov	r6, r2
 8008090:	e7ba      	b.n	8008008 <_printf_i+0x150>
 8008092:	680b      	ldr	r3, [r1, #0]
 8008094:	1d1a      	adds	r2, r3, #4
 8008096:	600a      	str	r2, [r1, #0]
 8008098:	681e      	ldr	r6, [r3, #0]
 800809a:	6862      	ldr	r2, [r4, #4]
 800809c:	2100      	movs	r1, #0
 800809e:	4630      	mov	r0, r6
 80080a0:	f7f8 f8a6 	bl	80001f0 <memchr>
 80080a4:	b108      	cbz	r0, 80080aa <_printf_i+0x1f2>
 80080a6:	1b80      	subs	r0, r0, r6
 80080a8:	6060      	str	r0, [r4, #4]
 80080aa:	6863      	ldr	r3, [r4, #4]
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	2300      	movs	r3, #0
 80080b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080b4:	e7a8      	b.n	8008008 <_printf_i+0x150>
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	4632      	mov	r2, r6
 80080ba:	4649      	mov	r1, r9
 80080bc:	4640      	mov	r0, r8
 80080be:	47d0      	blx	sl
 80080c0:	3001      	adds	r0, #1
 80080c2:	d0ab      	beq.n	800801c <_printf_i+0x164>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	079b      	lsls	r3, r3, #30
 80080c8:	d413      	bmi.n	80080f2 <_printf_i+0x23a>
 80080ca:	68e0      	ldr	r0, [r4, #12]
 80080cc:	9b03      	ldr	r3, [sp, #12]
 80080ce:	4298      	cmp	r0, r3
 80080d0:	bfb8      	it	lt
 80080d2:	4618      	movlt	r0, r3
 80080d4:	e7a4      	b.n	8008020 <_printf_i+0x168>
 80080d6:	2301      	movs	r3, #1
 80080d8:	4632      	mov	r2, r6
 80080da:	4649      	mov	r1, r9
 80080dc:	4640      	mov	r0, r8
 80080de:	47d0      	blx	sl
 80080e0:	3001      	adds	r0, #1
 80080e2:	d09b      	beq.n	800801c <_printf_i+0x164>
 80080e4:	3501      	adds	r5, #1
 80080e6:	68e3      	ldr	r3, [r4, #12]
 80080e8:	9903      	ldr	r1, [sp, #12]
 80080ea:	1a5b      	subs	r3, r3, r1
 80080ec:	42ab      	cmp	r3, r5
 80080ee:	dcf2      	bgt.n	80080d6 <_printf_i+0x21e>
 80080f0:	e7eb      	b.n	80080ca <_printf_i+0x212>
 80080f2:	2500      	movs	r5, #0
 80080f4:	f104 0619 	add.w	r6, r4, #25
 80080f8:	e7f5      	b.n	80080e6 <_printf_i+0x22e>
 80080fa:	bf00      	nop
 80080fc:	080084a9 	.word	0x080084a9
 8008100:	080084ba 	.word	0x080084ba

08008104 <memmove>:
 8008104:	4288      	cmp	r0, r1
 8008106:	b510      	push	{r4, lr}
 8008108:	eb01 0402 	add.w	r4, r1, r2
 800810c:	d902      	bls.n	8008114 <memmove+0x10>
 800810e:	4284      	cmp	r4, r0
 8008110:	4623      	mov	r3, r4
 8008112:	d807      	bhi.n	8008124 <memmove+0x20>
 8008114:	1e43      	subs	r3, r0, #1
 8008116:	42a1      	cmp	r1, r4
 8008118:	d008      	beq.n	800812c <memmove+0x28>
 800811a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800811e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008122:	e7f8      	b.n	8008116 <memmove+0x12>
 8008124:	4402      	add	r2, r0
 8008126:	4601      	mov	r1, r0
 8008128:	428a      	cmp	r2, r1
 800812a:	d100      	bne.n	800812e <memmove+0x2a>
 800812c:	bd10      	pop	{r4, pc}
 800812e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008136:	e7f7      	b.n	8008128 <memmove+0x24>

08008138 <_free_r>:
 8008138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800813a:	2900      	cmp	r1, #0
 800813c:	d048      	beq.n	80081d0 <_free_r+0x98>
 800813e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008142:	9001      	str	r0, [sp, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f1a1 0404 	sub.w	r4, r1, #4
 800814a:	bfb8      	it	lt
 800814c:	18e4      	addlt	r4, r4, r3
 800814e:	f000 f8d3 	bl	80082f8 <__malloc_lock>
 8008152:	4a20      	ldr	r2, [pc, #128]	; (80081d4 <_free_r+0x9c>)
 8008154:	9801      	ldr	r0, [sp, #4]
 8008156:	6813      	ldr	r3, [r2, #0]
 8008158:	4615      	mov	r5, r2
 800815a:	b933      	cbnz	r3, 800816a <_free_r+0x32>
 800815c:	6063      	str	r3, [r4, #4]
 800815e:	6014      	str	r4, [r2, #0]
 8008160:	b003      	add	sp, #12
 8008162:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008166:	f000 b8cd 	b.w	8008304 <__malloc_unlock>
 800816a:	42a3      	cmp	r3, r4
 800816c:	d90b      	bls.n	8008186 <_free_r+0x4e>
 800816e:	6821      	ldr	r1, [r4, #0]
 8008170:	1862      	adds	r2, r4, r1
 8008172:	4293      	cmp	r3, r2
 8008174:	bf04      	itt	eq
 8008176:	681a      	ldreq	r2, [r3, #0]
 8008178:	685b      	ldreq	r3, [r3, #4]
 800817a:	6063      	str	r3, [r4, #4]
 800817c:	bf04      	itt	eq
 800817e:	1852      	addeq	r2, r2, r1
 8008180:	6022      	streq	r2, [r4, #0]
 8008182:	602c      	str	r4, [r5, #0]
 8008184:	e7ec      	b.n	8008160 <_free_r+0x28>
 8008186:	461a      	mov	r2, r3
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	b10b      	cbz	r3, 8008190 <_free_r+0x58>
 800818c:	42a3      	cmp	r3, r4
 800818e:	d9fa      	bls.n	8008186 <_free_r+0x4e>
 8008190:	6811      	ldr	r1, [r2, #0]
 8008192:	1855      	adds	r5, r2, r1
 8008194:	42a5      	cmp	r5, r4
 8008196:	d10b      	bne.n	80081b0 <_free_r+0x78>
 8008198:	6824      	ldr	r4, [r4, #0]
 800819a:	4421      	add	r1, r4
 800819c:	1854      	adds	r4, r2, r1
 800819e:	42a3      	cmp	r3, r4
 80081a0:	6011      	str	r1, [r2, #0]
 80081a2:	d1dd      	bne.n	8008160 <_free_r+0x28>
 80081a4:	681c      	ldr	r4, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	6053      	str	r3, [r2, #4]
 80081aa:	4421      	add	r1, r4
 80081ac:	6011      	str	r1, [r2, #0]
 80081ae:	e7d7      	b.n	8008160 <_free_r+0x28>
 80081b0:	d902      	bls.n	80081b8 <_free_r+0x80>
 80081b2:	230c      	movs	r3, #12
 80081b4:	6003      	str	r3, [r0, #0]
 80081b6:	e7d3      	b.n	8008160 <_free_r+0x28>
 80081b8:	6825      	ldr	r5, [r4, #0]
 80081ba:	1961      	adds	r1, r4, r5
 80081bc:	428b      	cmp	r3, r1
 80081be:	bf04      	itt	eq
 80081c0:	6819      	ldreq	r1, [r3, #0]
 80081c2:	685b      	ldreq	r3, [r3, #4]
 80081c4:	6063      	str	r3, [r4, #4]
 80081c6:	bf04      	itt	eq
 80081c8:	1949      	addeq	r1, r1, r5
 80081ca:	6021      	streq	r1, [r4, #0]
 80081cc:	6054      	str	r4, [r2, #4]
 80081ce:	e7c7      	b.n	8008160 <_free_r+0x28>
 80081d0:	b003      	add	sp, #12
 80081d2:	bd30      	pop	{r4, r5, pc}
 80081d4:	200049a8 	.word	0x200049a8

080081d8 <_malloc_r>:
 80081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081da:	1ccd      	adds	r5, r1, #3
 80081dc:	f025 0503 	bic.w	r5, r5, #3
 80081e0:	3508      	adds	r5, #8
 80081e2:	2d0c      	cmp	r5, #12
 80081e4:	bf38      	it	cc
 80081e6:	250c      	movcc	r5, #12
 80081e8:	2d00      	cmp	r5, #0
 80081ea:	4606      	mov	r6, r0
 80081ec:	db01      	blt.n	80081f2 <_malloc_r+0x1a>
 80081ee:	42a9      	cmp	r1, r5
 80081f0:	d903      	bls.n	80081fa <_malloc_r+0x22>
 80081f2:	230c      	movs	r3, #12
 80081f4:	6033      	str	r3, [r6, #0]
 80081f6:	2000      	movs	r0, #0
 80081f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081fa:	f000 f87d 	bl	80082f8 <__malloc_lock>
 80081fe:	4921      	ldr	r1, [pc, #132]	; (8008284 <_malloc_r+0xac>)
 8008200:	680a      	ldr	r2, [r1, #0]
 8008202:	4614      	mov	r4, r2
 8008204:	b99c      	cbnz	r4, 800822e <_malloc_r+0x56>
 8008206:	4f20      	ldr	r7, [pc, #128]	; (8008288 <_malloc_r+0xb0>)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	b923      	cbnz	r3, 8008216 <_malloc_r+0x3e>
 800820c:	4621      	mov	r1, r4
 800820e:	4630      	mov	r0, r6
 8008210:	f000 f862 	bl	80082d8 <_sbrk_r>
 8008214:	6038      	str	r0, [r7, #0]
 8008216:	4629      	mov	r1, r5
 8008218:	4630      	mov	r0, r6
 800821a:	f000 f85d 	bl	80082d8 <_sbrk_r>
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	d123      	bne.n	800826a <_malloc_r+0x92>
 8008222:	230c      	movs	r3, #12
 8008224:	6033      	str	r3, [r6, #0]
 8008226:	4630      	mov	r0, r6
 8008228:	f000 f86c 	bl	8008304 <__malloc_unlock>
 800822c:	e7e3      	b.n	80081f6 <_malloc_r+0x1e>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	1b5b      	subs	r3, r3, r5
 8008232:	d417      	bmi.n	8008264 <_malloc_r+0x8c>
 8008234:	2b0b      	cmp	r3, #11
 8008236:	d903      	bls.n	8008240 <_malloc_r+0x68>
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	441c      	add	r4, r3
 800823c:	6025      	str	r5, [r4, #0]
 800823e:	e004      	b.n	800824a <_malloc_r+0x72>
 8008240:	6863      	ldr	r3, [r4, #4]
 8008242:	42a2      	cmp	r2, r4
 8008244:	bf0c      	ite	eq
 8008246:	600b      	streq	r3, [r1, #0]
 8008248:	6053      	strne	r3, [r2, #4]
 800824a:	4630      	mov	r0, r6
 800824c:	f000 f85a 	bl	8008304 <__malloc_unlock>
 8008250:	f104 000b 	add.w	r0, r4, #11
 8008254:	1d23      	adds	r3, r4, #4
 8008256:	f020 0007 	bic.w	r0, r0, #7
 800825a:	1ac2      	subs	r2, r0, r3
 800825c:	d0cc      	beq.n	80081f8 <_malloc_r+0x20>
 800825e:	1a1b      	subs	r3, r3, r0
 8008260:	50a3      	str	r3, [r4, r2]
 8008262:	e7c9      	b.n	80081f8 <_malloc_r+0x20>
 8008264:	4622      	mov	r2, r4
 8008266:	6864      	ldr	r4, [r4, #4]
 8008268:	e7cc      	b.n	8008204 <_malloc_r+0x2c>
 800826a:	1cc4      	adds	r4, r0, #3
 800826c:	f024 0403 	bic.w	r4, r4, #3
 8008270:	42a0      	cmp	r0, r4
 8008272:	d0e3      	beq.n	800823c <_malloc_r+0x64>
 8008274:	1a21      	subs	r1, r4, r0
 8008276:	4630      	mov	r0, r6
 8008278:	f000 f82e 	bl	80082d8 <_sbrk_r>
 800827c:	3001      	adds	r0, #1
 800827e:	d1dd      	bne.n	800823c <_malloc_r+0x64>
 8008280:	e7cf      	b.n	8008222 <_malloc_r+0x4a>
 8008282:	bf00      	nop
 8008284:	200049a8 	.word	0x200049a8
 8008288:	200049ac 	.word	0x200049ac

0800828c <_realloc_r>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	4607      	mov	r7, r0
 8008290:	4614      	mov	r4, r2
 8008292:	460e      	mov	r6, r1
 8008294:	b921      	cbnz	r1, 80082a0 <_realloc_r+0x14>
 8008296:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800829a:	4611      	mov	r1, r2
 800829c:	f7ff bf9c 	b.w	80081d8 <_malloc_r>
 80082a0:	b922      	cbnz	r2, 80082ac <_realloc_r+0x20>
 80082a2:	f7ff ff49 	bl	8008138 <_free_r>
 80082a6:	4625      	mov	r5, r4
 80082a8:	4628      	mov	r0, r5
 80082aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ac:	f000 f830 	bl	8008310 <_malloc_usable_size_r>
 80082b0:	42a0      	cmp	r0, r4
 80082b2:	d20f      	bcs.n	80082d4 <_realloc_r+0x48>
 80082b4:	4621      	mov	r1, r4
 80082b6:	4638      	mov	r0, r7
 80082b8:	f7ff ff8e 	bl	80081d8 <_malloc_r>
 80082bc:	4605      	mov	r5, r0
 80082be:	2800      	cmp	r0, #0
 80082c0:	d0f2      	beq.n	80082a8 <_realloc_r+0x1c>
 80082c2:	4631      	mov	r1, r6
 80082c4:	4622      	mov	r2, r4
 80082c6:	f7ff fbc3 	bl	8007a50 <memcpy>
 80082ca:	4631      	mov	r1, r6
 80082cc:	4638      	mov	r0, r7
 80082ce:	f7ff ff33 	bl	8008138 <_free_r>
 80082d2:	e7e9      	b.n	80082a8 <_realloc_r+0x1c>
 80082d4:	4635      	mov	r5, r6
 80082d6:	e7e7      	b.n	80082a8 <_realloc_r+0x1c>

080082d8 <_sbrk_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4d06      	ldr	r5, [pc, #24]	; (80082f4 <_sbrk_r+0x1c>)
 80082dc:	2300      	movs	r3, #0
 80082de:	4604      	mov	r4, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	f7f8 ffb2 	bl	800124c <_sbrk>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_sbrk_r+0x1a>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_sbrk_r+0x1a>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	200058d4 	.word	0x200058d4

080082f8 <__malloc_lock>:
 80082f8:	4801      	ldr	r0, [pc, #4]	; (8008300 <__malloc_lock+0x8>)
 80082fa:	f000 b811 	b.w	8008320 <__retarget_lock_acquire_recursive>
 80082fe:	bf00      	nop
 8008300:	200058dc 	.word	0x200058dc

08008304 <__malloc_unlock>:
 8008304:	4801      	ldr	r0, [pc, #4]	; (800830c <__malloc_unlock+0x8>)
 8008306:	f000 b80c 	b.w	8008322 <__retarget_lock_release_recursive>
 800830a:	bf00      	nop
 800830c:	200058dc 	.word	0x200058dc

08008310 <_malloc_usable_size_r>:
 8008310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008314:	1f18      	subs	r0, r3, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	bfbc      	itt	lt
 800831a:	580b      	ldrlt	r3, [r1, r0]
 800831c:	18c0      	addlt	r0, r0, r3
 800831e:	4770      	bx	lr

08008320 <__retarget_lock_acquire_recursive>:
 8008320:	4770      	bx	lr

08008322 <__retarget_lock_release_recursive>:
 8008322:	4770      	bx	lr

08008324 <_init>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	bf00      	nop
 8008328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832a:	bc08      	pop	{r3}
 800832c:	469e      	mov	lr, r3
 800832e:	4770      	bx	lr

08008330 <_fini>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	bf00      	nop
 8008334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008336:	bc08      	pop	{r3}
 8008338:	469e      	mov	lr, r3
 800833a:	4770      	bx	lr
